name: Yral-Prod (TestFlight)

on:
  pull_request:
    branches:
      - 'develop'
    types:
      - opened
      - ready_for_review
      - synchronize
      - reopened
    paths:
      - 'iosApp/**/*.swift'
      - 'iosApp/**/*.h'
      - 'iosApp/**/*.m'
      - 'iosApp/**/*.mm'
      - 'iosApp/**/*.storyboard'
      - 'iosApp/**/*.xib'
      - 'iosApp/**/*.xcassets/**'
      - 'iosApp/**/Info.plist'
      - 'iosApp/*.xcodeproj/**'
      - 'iosApp/*.xcworkspace/**'
      - 'iosApp/**/*.xcscheme'
      - 'iosApp/Package.swift'
      - 'iosApp/Podfile'
      - 'iosApp/Podfile.lock'
      - 'fastlane/**'
      - 'iosApp/build-rust.sh'
      - 'scripts/ios/**'
      - 'Package.swift'
      - 'iosApp/**/*.xcconfig'
      - 'iosApp/**/*.entitlements'

jobs:
  build-release-branch:
    if: startsWith(github.event.pull_request.head.ref, 'fix/')
    runs-on: macos-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1.0'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-ios
          override: true

      - name: Install cargo-lipo
        run: cargo install cargo-lipo

      - name: Make build script executable
        run: chmod +x iosApp/build-rust.sh

      - name: Build Rust Library
        run: |
          # ─── quick-diagnosis ──────────────────────────────────────────────
          echo "----------- DEBUG ------------"
          echo "pwd          : $(pwd)"
          echo "Tree (depth) :"
          find . -maxdepth 2 -type f -name Cargo.toml
          echo "--------------------------------"
          # ─── actual build ─────────────────────────────────────────────────
          PROJECT_DIR="${PWD}/rust-agent" CONFIGURATION=Release iosApp/build-rust.sh
          # Optional: verify the build
          ls -la rust-agent/target || true

      - name: Install Fastlane
        run: |
          gem install fastlane

      - name: Clean Build Directory
        run: |
          xcodebuild clean -project iosApp/iosApp.xcodeproj -scheme iosAppStaging
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

      - name: Decrypt and import Distribution Certificate
        run: |
          mkdir -p certs
          echo "${{ secrets.YRAL_DIST_CERT_P12_BASE64 }}" | base64 --decode > certs/Yral-Dist.p12
          echo "${{ secrets.YRAL_PROD_DIST_PROF_BASE64 }}" | base64 --decode > "certs/Yral distribution.mobileprovision"

          security create-keychain -p "" build.keychain
          security import certs/Yral-Dist.p12 -k ~/Library/Keychains/build.keychain -P ${{ secrets.IOS_CERTIFICATE_PASSWORD }} -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security set-keychain-settings -lut 21600s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          
          # Import certificate
          security import certs/Yral-Dist.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "certs/Yral distribution.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/
  
      - name: Build & Upload to TestFlight
        run: fastlane ios build_production_testflight
        env:
          APP_STORE_CONNECT_ISSUER_ID: ${{ vars.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_ID: ${{ vars.APP_STORE_CONNECT_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}