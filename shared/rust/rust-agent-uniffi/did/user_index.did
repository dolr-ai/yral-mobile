type BroadcastCallStatus = record {
  successful_canister_ids : vec principal;
  failed_canisters_count : nat64;
  successful_canisters_count : nat64;
  method_name : text;
  failed_canister_ids : vec record { principal; text };
  timestamp : SystemTime;
  total_canisters : nat64;
};
type CanisterInstallMode = variant {
  reinstall;
  upgrade : opt opt bool;
  install;
};
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type IndividualUserCreatorDaoEntry = record {
  deployed_canisters : vec principal;
  individual_profile_id : principal;
};
type KnownPrincipalType = variant {
  CanisterIdUserIndex;
  CanisterIdPlatformOrchestrator;
  CanisterIdConfiguration;
  CanisterIdHotOrNotSubnetOrchestrator;
  CanisterIdProjectMemberIndex;
  CanisterIdTopicCacheIndex;
  CanisterIdRootCanister;
  CanisterIdDataBackup;
  CanisterIdSnsLedger;
  CanisterIdSnsWasm;
  CanisterIdPostCache;
  CanisterIdSNSController;
  CanisterIdSnsGovernance;
  UserIdGlobalSuperAdmin;
};
type LogVisibility = variant { controllers; public };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type RecycleStatus = record {
  last_recycled_duration : opt nat64;
  last_recycled_at : opt SystemTime;
  num_last_recycled_canisters : nat64;
  success_canisters : vec text;
  failed_recycling : vec record { principal; text };
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : principal; Err : text };
type Result_1 = variant {
  Ok : vec record { principal; IndividualUserCreatorDaoEntry };
  Err : text;
};
type Result_2 = variant { Ok : text; Err : text };
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant {
  Ok : record { CanisterStatusResponse };
  Err : record { RejectionCode; text };
};
type Result_5 = variant { Ok; Err : SetUniqueUsernameError };
type SetUniqueUsernameError = variant {
  UsernameAlreadyTaken;
  SendingCanisterDoesNotMatchUserCanisterId;
  UserCanisterEntryDoesNotExist;
};
type SystemTime = record {
  nanos_since_epoch : nat32;
  secs_since_epoch : nat64;
};
type UpgradeStatus = record {
  version_number : nat64;
  version : text;
  last_run_on : SystemTime;
  failed_canister_ids : vec record { principal; principal; text };
  successful_upgrade_count : nat32;
};
type UserAccessRole = variant {
  CanisterController;
  ProfileOwner;
  CanisterAdmin;
  ProjectCanister;
};
type UserIndexInitArgs = record {
  known_principal_ids : opt vec record { KnownPrincipalType; principal };
  version : text;
  access_control_map : opt vec record { principal; vec UserAccessRole };
};
service : {
  allot_empty_canister : () -> (Result);
  are_signups_enabled : () -> (bool) query;
  clear_snapshot : () -> ();
  collect_creator_dao_stats_in_the_network : () -> (Result_1);
  create_pool_of_individual_user_available_canisters : (text, blob) -> (
      Result_2,
    );
  delete_all_sns_creator_token_in_the_network : () -> ();
  delete_all_sns_creator_token_of_an_individual_canister : (principal) -> (
      Result_3,
    );
  download_snapshot : (nat64, nat64) -> (blob) query;
  fixup_individual_canisters_mapping : () -> ();
  get_current_list_of_all_well_known_principal_values : () -> (
      vec record { KnownPrincipalType; principal },
    ) query;
  get_index_details_is_user_name_taken : (text) -> (bool) query;
  get_index_details_last_upgrade_status : () -> (UpgradeStatus) query;
  get_last_broadcast_call_status : () -> (BroadcastCallStatus) query;
  get_list_of_available_canisters : () -> (vec principal) query;
  get_recycle_status : () -> (RecycleStatus) query;
  get_requester_principals_canister_id_create_if_not_exists : () -> (Result);
  get_requester_principals_canister_id_create_if_not_exists_and_optionally_allow_referrer : () -> (
      principal,
    );
  get_subnet_available_capacity : () -> (nat64) query;
  get_subnet_backup_capacity : () -> (nat64) query;
  get_user_canister_id_from_unique_user_name : (text) -> (opt principal) query;
  get_user_canister_id_from_user_principal_id : (principal) -> (
      opt principal,
    ) query;
  get_user_canister_incl_avail_list : () -> (vec principal) query;
  get_user_canister_list : () -> (vec principal) query;
  get_user_canister_status : (principal) -> (Result_4);
  get_user_id_and_canister_list : () -> (
      vec record { principal; principal },
    ) query;
  get_user_index_canister_count : () -> (nat64) query;
  get_user_index_canister_cycle_balance : () -> (nat) query;
  get_version : () -> (text) query;
  get_version_number : () -> (nat64) query;
  get_well_known_principal_value : (KnownPrincipalType) -> (
      opt principal,
    ) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  issue_rewards_for_referral : (principal, principal, principal) -> (Result_2);
  load_snapshot : () -> ();
  make_individual_canister_logs_private : (principal) -> (Result_3);
  make_individual_canister_logs_public : (principal) -> (Result_3);
  notify_specific_individual_canister_to_upgrade_creator_dao_governance_canisters : (
      principal,
      blob,
    ) -> (Result_3);
  provision_empty_canisters : (nat64) -> ();
  receive_and_save_snaphot : (nat64, blob) -> ();
  receive_creator_dao_stats_from_individual_canister : (vec principal) -> (
      Result_3,
    );
  receive_empty_canister_from_individual_canister : (vec principal) -> (
      Result_3,
    );
  recharge_individual_user_canister : () -> (Result_3);
  reclaim_cycles_from_individual_canisters : () -> ();
  redeem_gdollr : (principal, nat) -> (Result_3);
  request_cycles : (nat) -> (Result_3);
  reset_user_canisters_ml_feed_cache : () -> (text);
  reset_user_individual_canisters : (vec principal) -> (Result_2);
  return_cycles_to_platform_orchestrator_canister : () -> (Result_2);
  save_snapshot_json : () -> (nat32);
  set_permission_to_upgrade_individual_canisters : (bool) -> (text);
  start_upgrades_for_individual_canisters : (text, blob) -> (text);
  toggle_signups_enabled : () -> (Result_3);
  uninstall_individual_user_canister : (principal) -> (Result_3);
  update_index_with_unique_user_name_corresponding_to_user_principal_id : (
      text,
      principal,
    ) -> (Result_5);
  update_pd_onboarding_reward_for_all_individual_users : (nat) -> (Result_3);
  update_profile_owner_for_individual_canisters : () -> ();
  update_restart_timers_hon_game : () -> (text);
  update_well_known_principal : (KnownPrincipalType, principal) -> ();
  upgrade_all_creator_dao_governance_canisters_in_the_network : (blob) -> ();
  upgrade_specific_individual_canister_with_wasm_version : (
      principal,
      text,
      blob,
    ) -> (Result_3);
  upgrade_specific_individual_user_canister_with_latest_wasm : (
      principal,
      opt principal,
      opt CanisterInstallMode,
    ) -> (Result_3);
  validate_reset_user_individual_canisters : (vec principal) -> (
      Result_2,
    ) query;
}