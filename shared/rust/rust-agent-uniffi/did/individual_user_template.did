type AggregateStats = record {
  total_number_of_not_bets : nat64;
  total_amount_bet : nat64;
  total_number_of_hot_bets : nat64;
};
type AirdropDistribution = record { airdrop_neurons : vec NeuronDistribution };
type AirdropError = variant {
  NoBalance;
  CanisterPrincipalDoNotMatch;
  AlreadyClaimedAirdrop;
  RequestedAmountTooLow;
  InvalidRoot;
  CallError : record { RejectionCode; text };
  Transfer : TransferError;
};
type AirdropInfo = record {
  principals_who_successfully_claimed : vec record { principal; ClaimStatus };
};
type BalanceInfo = record {
  balance : nat;
  withdrawable : nat;
  net_airdrop_reward : nat;
};
type BetDetails = record {
  bet_direction : BetDirection;
  bet_maker_canister_id : principal;
  bet_maker_informed_status : opt BetMakerInformedStatus;
  amount : nat64;
  payout : BetPayout;
};
type BetDirection = variant { Hot; Not };
type BetMakerInformedStatus = variant { InformedSuccessfully; Failed : text };
type BetOnCurrentlyViewingPostError = variant {
  UserPrincipalNotSet;
  InsufficientBalance;
  UserAlreadyParticipatedInThisPost;
  BettingClosed;
  Unauthorized;
  PostCreatorCanisterCallFailed;
  UserNotLoggedIn;
};
type BetOutcomeForBetMaker = variant {
  Won : nat64;
  Draw : nat64;
  Lost;
  AwaitingResult;
};
type BetPayout = variant { NotCalculatedYet; Calculated : nat64 };
type BettingStatus = variant {
  BettingOpen : record {
    number_of_participants : nat8;
    ongoing_room : nat64;
    ongoing_slot : nat8;
    has_this_user_participated_in_this_post : opt bool;
    started_at : SystemTime;
  };
  BettingClosed;
};
type Canister = record { id : opt principal };
type CdaoDeployError = variant {
  CycleError : text;
  Unregistered;
  CallError : record { RejectionCode; text };
  InvalidInitPayload : text;
  TokenLimit : nat64;
  Unauthenticated;
};
type CdaoTokenError = variant {
  NoBalance;
  InvalidRoot;
  CallError : record { RejectionCode; text };
  Transfer : TransferError;
  Unauthenticated;
};
type ClaimStatus = variant {
  Unclaimed;
  Claiming;
  Claimed;
  ClaimedWithTimestamp : nat64;
};
type Committed = record {
  total_direct_participation_icp_e8s : opt nat64;
  total_neurons_fund_participation_icp_e8s : opt nat64;
  sns_governance_canister_id : opt principal;
};
type Countries = record { iso_codes : vec text };
type DappCanisters = record { canisters : vec Canister };
type DeployedCdaoCanisters = record {
  airdrop_info : AirdropInfo;
  root : principal;
  swap : principal;
  ledger : principal;
  index : principal;
  governance : principal;
};
type DeveloperDistribution = record {
  developer_neurons : vec NeuronDistribution;
};
type FeedScore = record {
  current_score : nat64;
  last_synchronized_at : SystemTime;
  last_synchronized_score : nat64;
};
type FractionalDeveloperVotingPower = record {
  treasury_distribution : opt TreasuryDistribution;
  developer_distribution : opt DeveloperDistribution;
  airdrop_distribution : opt AirdropDistribution;
  swap_distribution : opt SwapDistribution;
};
type GameDirection = variant { Dump; Pump };
type GetPostsOfUserProfileError = variant {
  ReachedEndOfItemsList;
  InvalidBoundsPassed;
  ExceededMaxNumberOfItemsAllowedInOneRequest;
};
type GovernanceError = record { error_message : text; error_type : int32 };
type HotOrNotDetails = record {
  hot_or_not_feed_score : FeedScore;
  aggregate_stats : AggregateStats;
  slot_history : vec record { nat8; SlotDetails };
};
type HotOrNotOutcomePayoutEvent = variant {
  WinningsEarnedFromBet : record {
    slot_id : nat8;
    post_id : nat64;
    room_id : nat64;
    post_canister_id : principal;
    winnings_amount : nat64;
    event_outcome : BetOutcomeForBetMaker;
  };
  CommissionFromHotOrNotBet : record {
    slot_id : nat8;
    post_id : nat64;
    room_pot_total_amount : nat64;
    room_id : nat64;
    post_canister_id : principal;
  };
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type IdealMatchedParticipationFunction = record {
  serialized_representation : opt text;
};
type IndividualUserCreatorDaoEntry = record {
  deployed_canisters : vec principal;
  individual_profile_id : principal;
};
type IndividualUserTemplateInitArgs = record {
  pump_dump_onboarding_reward : opt nat;
  known_principal_ids : opt vec record { KnownPrincipalType; principal };
  version : text;
  url_to_send_canister_metrics_to : opt text;
  profile_owner : opt principal;
  upgrade_version_number : opt nat64;
};
type InitialTokenDistribution = variant {
  FractionalDeveloperVotingPower : FractionalDeveloperVotingPower;
};
type KnownPrincipalType = variant {
  CanisterIdUserIndex;
  CanisterIdPlatformOrchestrator;
  CanisterIdConfiguration;
  CanisterIdHotOrNotSubnetOrchestrator;
  CanisterIdProjectMemberIndex;
  CanisterIdTopicCacheIndex;
  CanisterIdRootCanister;
  CanisterIdDataBackup;
  CanisterIdSnsLedger;
  CanisterIdSnsWasm;
  CanisterIdPostCache;
  CanisterIdSNSController;
  CanisterIdSnsGovernance;
  UserIdGlobalSuperAdmin;
};
type LinearScalingCoefficient = record {
  slope_numerator : opt nat64;
  intercept_icp_e8s : opt nat64;
  from_direct_participation_icp_e8s : opt nat64;
  slope_denominator : opt nat64;
  to_direct_participation_icp_e8s : opt nat64;
};
type MigrationErrors = variant {
  InvalidToCanister;
  InvalidFromCanister;
  MigrationInfoNotFound;
  UserNotRegistered;
  RequestCycleFromUserIndexFailed : text;
  UserIndexCanisterIdNotFound;
  Unauthorized;
  TransferToCanisterCallFailed : text;
  HotOrNotSubnetCanisterIdNotFound;
  AlreadyUsedForMigration;
  CanisterInfoFailed;
  AlreadyMigrated;
};
type MigrationInfo = variant {
  MigratedFromHotOrNot : record { account_principal : principal };
  NotMigrated;
  MigratedToYral : record { account_principal : principal };
};
type MintEvent = variant {
  Airdrop : record { amount : nat64 };
  NewUserSignup : record { new_user_principal_id : principal };
  Referral : record {
    referrer_user_principal_id : principal;
    referee_user_principal_id : principal;
  };
};
type NeuronBasketConstructionParameters = record {
  dissolve_delay_interval_seconds : nat64;
  count : nat64;
};
type NeuronDistribution = record {
  controller : opt principal;
  dissolve_delay_seconds : nat64;
  memo : nat64;
  stake_e8s : nat64;
  vesting_period_seconds : opt nat64;
};
type NeuronsFundNeuron = record {
  controller : opt principal;
  hotkeys : opt Principals;
  is_capped : opt bool;
  nns_neuron_id : opt nat64;
  amount_icp_e8s : opt nat64;
};
type NeuronsFundParticipationConstraints = record {
  coefficient_intervals : vec LinearScalingCoefficient;
  max_neurons_fund_participation_icp_e8s : opt nat64;
  min_direct_participation_threshold_icp_e8s : opt nat64;
  ideal_matched_participation_function : opt IdealMatchedParticipationFunction;
};
type Ok = record { neurons_fund_neuron_portions : vec NeuronsFundNeuron };
type PaginationError = variant {
  ReachedEndOfItemsList;
  InvalidBoundsPassed;
  ExceededMaxNumberOfItemsAllowedInOneRequest;
};
type ParticipatedGameInfo = record {
  game_direction : GameDirection;
  reward : nat;
  pumps : nat64;
  dumps : nat64;
  token_root : principal;
};
type PlaceBetArg = record {
  bet_amount : nat64;
  post_id : nat64;
  bet_direction : BetDirection;
  post_canister_id : principal;
};
type PlacedBetDetail = record {
  outcome_received : BetOutcomeForBetMaker;
  slot_id : nat8;
  post_id : nat64;
  room_id : nat64;
  canister_id : principal;
  bet_direction : BetDirection;
  amount_bet : nat64;
  bet_placed_at : SystemTime;
};
type Post = record {
  id : nat64;
  is_nsfw : bool;
  status : PostStatus;
  share_count : nat64;
  hashtags : vec text;
  description : text;
  created_at : SystemTime;
  likes : vec principal;
  video_uid : text;
  home_feed_score : FeedScore;
  slots_left_to_be_computed : blob;
  view_stats : PostViewStatistics;
  hot_or_not_details : opt HotOrNotDetails;
};
type PostDetailsForFrontend = record {
  id : nat64;
  is_nsfw : bool;
  status : PostStatus;
  home_feed_ranking_score : nat64;
  hashtags : vec text;
  hot_or_not_betting_status : opt BettingStatus;
  like_count : nat64;
  description : text;
  total_view_count : nat64;
  created_by_display_name : opt text;
  created_at : SystemTime;
  created_by_unique_user_name : opt text;
  video_uid : text;
  created_by_user_principal_id : principal;
  hot_or_not_feed_ranking_score : opt nat64;
  liked_by_me : bool;
  created_by_profile_photo_url : opt text;
};
type PostDetailsFromFrontend = record {
  is_nsfw : bool;
  hashtags : vec text;
  description : text;
  video_uid : text;
  creator_consent_for_inclusion_in_hot_or_not : bool;
};
type PostStatus = variant {
  BannedForExplicitness;
  BannedDueToUserReporting;
  Uploaded;
  CheckingExplicitness;
  ReadyToView;
  Transcoding;
  Deleted;
};
type PostViewDetailsFromFrontend = variant {
  WatchedMultipleTimes : record {
    percentage_watched : nat8;
    watch_count : nat8;
  };
  WatchedPartially : record { percentage_watched : nat8 };
};
type PostViewStatistics = record {
  total_view_count : nat64;
  average_watch_percentage : nat8;
  threshold_view_count : nat64;
};
type Principals = record { principals : vec principal };
type PumpDumpOutcomePayoutEvent = variant {
  CreatorRewardFromPumpDumpGame;
  RewardFromPumpDumpGame : record {
    game_direction : GameDirection;
    token_root_canister_id : principal;
  };
};
type PumpNDumpStateDiff = variant {
  Participant : ParticipatedGameInfo;
  CreatorReward : nat;
};
type PumpsAndDumps = record { pumps : nat; dumps : nat };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Result_10 = variant { Ok : vec SuccessHistoryItemV1; Err : text };
type Result_11 = variant { Ok : vec principal; Err : PaginationError };
type Result_12 = variant {
  Ok : vec record { nat64; TokenEvent };
  Err : PaginationError;
};
type Result_13 = variant { Ok : vec WatchHistoryItem; Err : text };
type Result_14 = variant { Ok : vec record { nat64; nat8 }; Err : text };
type Result_15 = variant { Ok : vec ParticipatedGameInfo; Err : text };
type Result_16 = variant { Ok; Err : MigrationErrors };
type Result_17 = variant { Ok; Err : AirdropError };
type Result_18 = variant { Ok : IndividualUserCreatorDaoEntry; Err : text };
type Result_19 = variant { Committed : Committed; Aborted : record {} };
type Result_2 = variant { Ok : bool; Err : CdaoTokenError };
type Result_20 = variant { Ok : Ok; Err : GovernanceError };
type Result_21 = variant { Ok; Err : CdaoTokenError };
type Result_22 = variant { Ok : text; Err : text };
type Result_23 = variant {
  Ok : UserProfileDetailsForFrontend;
  Err : UpdateProfileDetailsError;
};
type Result_3 = variant {
  Ok : BettingStatus;
  Err : BetOnCurrentlyViewingPostError;
};
type Result_4 = variant { Ok : DeployedCdaoCanisters; Err : CdaoDeployError };
type Result_5 = variant { Ok : BetDetails; Err : text };
type Result_6 = variant { Ok : Post; Err };
type Result_7 = variant { Ok : SystemTime; Err : text };
type Result_8 = variant {
  Ok : vec PostDetailsForFrontend;
  Err : GetPostsOfUserProfileError;
};
type Result_9 = variant { Ok : SessionType; Err : text };
type RoomBetPossibleOutcomes = variant { HotWon; BetOngoing; Draw; NotWon };
type RoomDetails = record {
  total_hot_bets : nat64;
  bets_made : vec record { principal; BetDetails };
  total_not_bets : nat64;
  room_bets_total_pot : nat64;
  bet_outcome : RoomBetPossibleOutcomes;
};
type SessionType = variant { AnonymousSession; RegisteredSession };
type SettleNeuronsFundParticipationRequest = record {
  result : opt Result_19;
  nns_proposal_id : opt nat64;
};
type SettleNeuronsFundParticipationResponse = record { result : opt Result_20 };
type SlotDetails = record { room_details : vec record { nat64; RoomDetails } };
type SnsInitPayload = record {
  url : opt text;
  max_dissolve_delay_seconds : opt nat64;
  max_dissolve_delay_bonus_percentage : opt nat64;
  nns_proposal_id : opt nat64;
  neurons_fund_participation : opt bool;
  min_participant_icp_e8s : opt nat64;
  neuron_basket_construction_parameters : opt NeuronBasketConstructionParameters;
  fallback_controller_principal_ids : vec text;
  token_symbol : opt text;
  final_reward_rate_basis_points : opt nat64;
  max_icp_e8s : opt nat64;
  neuron_minimum_stake_e8s : opt nat64;
  confirmation_text : opt text;
  logo : opt text;
  name : opt text;
  swap_start_timestamp_seconds : opt nat64;
  swap_due_timestamp_seconds : opt nat64;
  initial_voting_period_seconds : opt nat64;
  neuron_minimum_dissolve_delay_to_vote_seconds : opt nat64;
  description : opt text;
  max_neuron_age_seconds_for_age_bonus : opt nat64;
  min_participants : opt nat64;
  initial_reward_rate_basis_points : opt nat64;
  wait_for_quiet_deadline_increase_seconds : opt nat64;
  transaction_fee_e8s : opt nat64;
  dapp_canisters : opt DappCanisters;
  neurons_fund_participation_constraints : opt NeuronsFundParticipationConstraints;
  max_age_bonus_percentage : opt nat64;
  initial_token_distribution : opt InitialTokenDistribution;
  reward_rate_transition_duration_seconds : opt nat64;
  token_logo : opt text;
  token_name : opt text;
  max_participant_icp_e8s : opt nat64;
  min_direct_participation_icp_e8s : opt nat64;
  proposal_reject_cost_e8s : opt nat64;
  restricted_countries : opt Countries;
  min_icp_e8s : opt nat64;
  max_direct_participation_icp_e8s : opt nat64;
};
type StakeEvent = variant {
  BetOnHotOrNotPost : PlaceBetArg;
  BetOnPumpDump : record {
    root_canister_id : principal;
    pumps : nat64;
    dumps : nat64;
  };
  BetFailureRefund : PlaceBetArg;
};
type SuccessHistoryItemV1 = record {
  post_id : nat64;
  percentage_watched : float32;
  item_type : text;
  publisher_canister_id : principal;
  cf_video_id : text;
  interacted_at : SystemTime;
};
type SwapDistribution = record {
  total_e8s : nat64;
  initial_swap_amount_e8s : nat64;
};
type SystemTime = record {
  nanos_since_epoch : nat32;
  secs_since_epoch : nat64;
};
type TokenEvent = variant {
  Withdraw : record { amount : nat; event_type : WithdrawEvent };
  Stake : record {
    timestamp : SystemTime;
    details : StakeEvent;
    amount : nat64;
  };
  Burn;
  Mint : record { timestamp : SystemTime; details : MintEvent; amount : nat64 };
  PumpDumpOutcomePayout : record {
    payout_type : PumpDumpOutcomePayoutEvent;
    amount : nat;
  };
  Transfer : record {
    to_account : principal;
    timestamp : SystemTime;
    amount : nat64;
  };
  HotOrNotOutcomePayout : record {
    timestamp : SystemTime;
    details : HotOrNotOutcomePayoutEvent;
    amount : nat64;
  };
  Receive : record {
    from_account : principal;
    timestamp : SystemTime;
    amount : nat64;
  };
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TreasuryDistribution = record { total_e8s : nat64 };
type UpdateProfileDetailsError = variant { NotAuthorized };
type UserCanisterDetails = record {
  user_canister_id : principal;
  profile_owner : principal;
};
type UserProfileDetailsForFrontend = record {
  unique_user_name : opt text;
  lifetime_earnings : nat64;
  following_count : nat64;
  profile_picture_url : opt text;
  display_name : opt text;
  principal_id : principal;
  profile_stats : UserProfileGlobalStats;
  followers_count : nat64;
  referrer_details : opt UserCanisterDetails;
};
type UserProfileDetailsForFrontendV2 = record {
  unique_user_name : opt text;
  lifetime_earnings : nat64;
  migration_info : MigrationInfo;
  following_count : nat64;
  profile_picture_url : opt text;
  display_name : opt text;
  principal_id : principal;
  profile_stats : UserProfileGlobalStats;
  followers_count : nat64;
  referrer_details : opt UserCanisterDetails;
};
type UserProfileGlobalStats = record {
  hot_bets_received : nat64;
  not_bets_received : nat64;
};
type UserProfileUpdateDetailsFromFrontend = record {
  profile_picture_url : opt text;
  display_name : opt text;
};
type WatchHistoryItem = record {
  post_id : nat64;
  viewed_at : SystemTime;
  percentage_watched : float32;
  publisher_canister_id : principal;
  cf_video_id : text;
};
type WithdrawEvent = variant { WithdrawRequest; WithdrawRequestFailed };
service : {
  add_dollr_to_liquidity_pool : (principal, nat) -> (Result);
  add_post_v2 : (PostDetailsFromFrontend) -> (Result_1);
  add_token : (principal) -> (Result_2);
  bet_on_currently_viewing_post : (PlaceBetArg) -> (Result_3);
  bet_on_currently_viewing_post_v1 : (PlaceBetArg) -> (Result_3);
  cents_token_balance_info : () -> (BalanceInfo) query;
  clear_snapshot : () -> ();
  delete_all_creator_token : () -> ();
  delete_post : (nat64) -> (Result);
  deploy_cdao_sns : (SnsInitPayload, nat64) -> (Result_4);
  deployed_cdao_canisters : () -> (vec DeployedCdaoCanisters) query;
  download_snapshot : (nat64, nat64) -> (blob) query;
  get_bet_details_for_a_user_on_a_post : (principal, nat64) -> (Result_5) query;
  get_bet_details_for_a_user_on_a_post_v1 : (principal, nat64) -> (
      Result_5,
    ) query;
  get_entire_individual_post_detail_by_id : (nat64) -> (Result_6) query;
  get_hot_or_not_bet_details_for_this_post : (nat64) -> (BettingStatus) query;
  get_hot_or_not_bet_details_for_this_post_v1 : (nat64) -> (
      BettingStatus,
    ) query;
  get_hot_or_not_bets_placed_by_this_profile_with_pagination : (nat64) -> (
      vec PlacedBetDetail,
    ) query;
  get_hot_or_not_bets_placed_by_this_profile_with_pagination_v1 : (nat64) -> (
      vec PlacedBetDetail,
    ) query;
  get_individual_hot_or_not_bet_placed_by_this_profile : (principal, nat64) -> (
      opt PlacedBetDetail,
    ) query;
  get_individual_hot_or_not_bet_placed_by_this_profile_v1 : (
      principal,
      nat64,
    ) -> (opt PlacedBetDetail) query;
  get_individual_post_details_by_id : (nat64) -> (PostDetailsForFrontend) query;
  get_last_access_time : () -> (Result_7) query;
  get_posts_of_this_user_profile_with_pagination_cursor : (nat64, nat64) -> (
      Result_8,
    ) query;
  get_profile_details : () -> (UserProfileDetailsForFrontend) query;
  get_profile_details_v2 : () -> (UserProfileDetailsForFrontendV2) query;
  get_rewarded_for_referral : (principal, principal) -> ();
  get_rewarded_for_signing_up : () -> ();
  get_session_type : () -> (Result_9) query;
  get_stable_memory_size : () -> (nat64) query;
  get_success_history : () -> (Result_10) query;
  get_token_roots_of_this_user_with_pagination_cursor : (nat64, nat64) -> (
      Result_11,
    ) query;
  get_user_caniser_cycle_balance : () -> (nat) query;
  get_user_utility_token_transaction_history_with_pagination : (
      nat64,
      nat64,
    ) -> (Result_12) query;
  get_utility_token_balance : () -> (nat64) query;
  get_version : () -> (text) query;
  get_version_number : () -> (nat64) query;
  get_watch_history : () -> (Result_13) query;
  get_well_known_principal_value : (KnownPrincipalType) -> (
      opt principal,
    ) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  load_snapshot : () -> ();
  load_snapshot_v2 : () -> ();
  net_earnings : () -> (nat) query;
  once_reenqueue_timers_for_pending_bet_outcomes : () -> (Result_14);
  pd_balance_info : () -> (BalanceInfo) query;
  played_game_count : () -> (nat64) query;
  played_game_info_with_pagination_cursor : (nat64, nat64) -> (Result_15) query;
  pumps_and_dumps : () -> (PumpsAndDumps) query;
  receive_and_save_snaphot : (nat64, blob) -> ();
  receive_bet_from_bet_makers_canister : (PlaceBetArg, principal) -> (Result_3);
  receive_bet_from_bet_makers_canister_v1 : (PlaceBetArg, principal) -> (
      Result_3,
    );
  receive_bet_winnings_when_distributed : (nat64, BetOutcomeForBetMaker) -> ();
  receive_bet_winnings_when_distributed_v1 : (
      nat64,
      BetOutcomeForBetMaker,
    ) -> ();
  receive_data_from_hotornot : (principal, nat64, vec Post) -> (Result_16);
  reconcile_user_state : (vec PumpNDumpStateDiff) -> (Result);
  redeem_gdollr : (nat) -> (Result);
  redeem_gdolr_v2 : (nat) -> (Result);
  request_airdrop : (principal, opt blob, nat, principal) -> (Result_17);
  return_cycles_to_user_index_canister : (opt nat) -> ();
  save_snapshot_json : () -> (nat32);
  save_snapshot_json_v2 : () -> (nat32);
  send_creator_dao_stats_to_subnet_orchestrator : () -> (Result_18);
  set_controller_as_subnet_orchestrator : (principal) -> ();
  settle_neurons_fund_participation : (
      SettleNeuronsFundParticipationRequest,
    ) -> (SettleNeuronsFundParticipationResponse);
  stake_dollr_for_gdollr : (nat) -> (Result);
  transfer_token_to_user_canister : (principal, principal, opt blob, nat) -> (
      Result_21,
    );
  transfer_tokens_and_posts : (principal, principal) -> (Result_16);
  update_last_access_time : () -> (Result_22);
  update_pd_onboarding_reward : (nat) -> (Result);
  update_post_add_view_details : (nat64, PostViewDetailsFromFrontend) -> ();
  update_post_as_ready_to_view : (nat64) -> ();
  update_post_increment_share_count : (nat64) -> (nat64);
  update_post_status : (nat64, PostStatus) -> ();
  update_post_toggle_like_status_by_caller : (nat64) -> (bool);
  update_profile_display_details : (UserProfileUpdateDetailsFromFrontend) -> (
      Result_23,
    );
  update_profile_owner : (opt principal) -> (Result);
  update_referrer_details : (UserCanisterDetails) -> (Result_22);
  update_session_type : (SessionType) -> (Result_22);
  update_success_history : (SuccessHistoryItemV1) -> (Result_22);
  update_watch_history : (WatchHistoryItem) -> (Result_22);
  update_well_known_principal : (KnownPrincipalType, principal) -> ();
  upgrade_creator_dao_governance_canisters : (blob) -> (Result);
}