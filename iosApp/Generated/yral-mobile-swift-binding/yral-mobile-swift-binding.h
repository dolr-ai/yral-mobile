// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
typedef struct PostServicePostError PostServicePostError;
void __swift_bridge__$PostServicePostError$_free(void* self);

void* __swift_bridge__$Vec_PostServicePostError$new(void);
void __swift_bridge__$Vec_PostServicePostError$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostServicePostError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostServicePostError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePostError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostServicePostError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostServicePostError$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePostError$as_ptr(void* vec_ptr);

typedef struct PostServiceResult1 PostServiceResult1;
void __swift_bridge__$PostServiceResult1$_free(void* self);

void* __swift_bridge__$Vec_PostServiceResult1$new(void);
void __swift_bridge__$Vec_PostServiceResult1$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostServiceResult1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostServiceResult1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostServiceResult1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostServiceResult1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostServiceResult1$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostServiceResult1$as_ptr(void* vec_ptr);

typedef struct VideoGenRequestStatus VideoGenRequestStatus;
void __swift_bridge__$VideoGenRequestStatus$_free(void* self);

void* __swift_bridge__$Vec_VideoGenRequestStatus$new(void);
void __swift_bridge__$Vec_VideoGenRequestStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_VideoGenRequestStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_VideoGenRequestStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_VideoGenRequestStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_VideoGenRequestStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestStatus$as_ptr(void* vec_ptr);

typedef struct RateLimitsResult2 RateLimitsResult2;
void __swift_bridge__$RateLimitsResult2$_free(void* self);

void* __swift_bridge__$Vec_RateLimitsResult2$new(void);
void __swift_bridge__$Vec_RateLimitsResult2$drop(void* vec_ptr);
void __swift_bridge__$Vec_RateLimitsResult2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RateLimitsResult2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitsResult2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RateLimitsResult2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RateLimitsResult2$len(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitsResult2$as_ptr(void* vec_ptr);

typedef struct KeyValuePair KeyValuePair;
void __swift_bridge__$KeyValuePair$_free(void* self);

void* __swift_bridge__$Vec_KeyValuePair$new(void);
void __swift_bridge__$Vec_KeyValuePair$drop(void* vec_ptr);
void __swift_bridge__$Vec_KeyValuePair$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_KeyValuePair$pop(void* vec_ptr);
void* __swift_bridge__$Vec_KeyValuePair$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_KeyValuePair$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_KeyValuePair$len(void* vec_ptr);
void* __swift_bridge__$Vec_KeyValuePair$as_ptr(void* vec_ptr);

typedef struct U64Wrapper U64Wrapper;
void __swift_bridge__$U64Wrapper$_free(void* self);

void* __swift_bridge__$Vec_U64Wrapper$new(void);
void __swift_bridge__$Vec_U64Wrapper$drop(void* vec_ptr);
void __swift_bridge__$Vec_U64Wrapper$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_U64Wrapper$pop(void* vec_ptr);
void* __swift_bridge__$Vec_U64Wrapper$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_U64Wrapper$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_U64Wrapper$len(void* vec_ptr);
void* __swift_bridge__$Vec_U64Wrapper$as_ptr(void* vec_ptr);

typedef struct PrincipalResult PrincipalResult;
void __swift_bridge__$PrincipalResult$_free(void* self);

void* __swift_bridge__$Vec_PrincipalResult$new(void);
void __swift_bridge__$Vec_PrincipalResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_PrincipalResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PrincipalResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PrincipalResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PrincipalResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalResult$as_ptr(void* vec_ptr);

typedef struct Secp256k1Error Secp256k1Error;
void __swift_bridge__$Secp256k1Error$_free(void* self);

void* __swift_bridge__$Vec_Secp256k1Error$new(void);
void __swift_bridge__$Vec_Secp256k1Error$drop(void* vec_ptr);
void __swift_bridge__$Vec_Secp256k1Error$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Secp256k1Error$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Error$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Secp256k1Error$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Secp256k1Error$len(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Error$as_ptr(void* vec_ptr);

typedef struct DelegatedIdentity DelegatedIdentity;
void __swift_bridge__$DelegatedIdentity$_free(void* self);

void* __swift_bridge__$Vec_DelegatedIdentity$new(void);
void __swift_bridge__$Vec_DelegatedIdentity$drop(void* vec_ptr);
void __swift_bridge__$Vec_DelegatedIdentity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DelegatedIdentity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DelegatedIdentity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DelegatedIdentity$len(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentity$as_ptr(void* vec_ptr);

typedef struct Secp256k1Identity Secp256k1Identity;
void __swift_bridge__$Secp256k1Identity$_free(void* self);

void* __swift_bridge__$Vec_Secp256k1Identity$new(void);
void __swift_bridge__$Vec_Secp256k1Identity$drop(void* vec_ptr);
void __swift_bridge__$Vec_Secp256k1Identity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Secp256k1Identity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Identity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Secp256k1Identity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Secp256k1Identity$len(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Identity$as_ptr(void* vec_ptr);

typedef struct JwkEcKey JwkEcKey;
void __swift_bridge__$JwkEcKey$_free(void* self);

void* __swift_bridge__$Vec_JwkEcKey$new(void);
void __swift_bridge__$Vec_JwkEcKey$drop(void* vec_ptr);
void __swift_bridge__$Vec_JwkEcKey$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_JwkEcKey$pop(void* vec_ptr);
void* __swift_bridge__$Vec_JwkEcKey$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_JwkEcKey$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_JwkEcKey$len(void* vec_ptr);
void* __swift_bridge__$Vec_JwkEcKey$as_ptr(void* vec_ptr);

typedef struct Nat Nat;
void __swift_bridge__$Nat$_free(void* self);

void* __swift_bridge__$Vec_Nat$new(void);
void __swift_bridge__$Vec_Nat$drop(void* vec_ptr);
void __swift_bridge__$Vec_Nat$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Nat$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Nat$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Nat$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Nat$len(void* vec_ptr);
void* __swift_bridge__$Vec_Nat$as_ptr(void* vec_ptr);

typedef struct ByteBuf ByteBuf;
void __swift_bridge__$ByteBuf$_free(void* self);

void* __swift_bridge__$Vec_ByteBuf$new(void);
void __swift_bridge__$Vec_ByteBuf$drop(void* vec_ptr);
void __swift_bridge__$Vec_ByteBuf$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ByteBuf$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ByteBuf$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ByteBuf$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ByteBuf$len(void* vec_ptr);
void* __swift_bridge__$Vec_ByteBuf$as_ptr(void* vec_ptr);

typedef struct Principal Principal;
void __swift_bridge__$Principal$_free(void* self);

void* __swift_bridge__$Vec_Principal$new(void);
void __swift_bridge__$Vec_Principal$drop(void* vec_ptr);
void __swift_bridge__$Vec_Principal$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Principal$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Principal$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Principal$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Principal$len(void* vec_ptr);
void* __swift_bridge__$Vec_Principal$as_ptr(void* vec_ptr);

typedef struct PrincipalError PrincipalError;
void __swift_bridge__$PrincipalError$_free(void* self);

void* __swift_bridge__$Vec_PrincipalError$new(void);
void __swift_bridge__$Vec_PrincipalError$drop(void* vec_ptr);
void __swift_bridge__$Vec_PrincipalError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PrincipalError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PrincipalError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PrincipalError$len(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalError$as_ptr(void* vec_ptr);

typedef struct AgentError AgentError;
void __swift_bridge__$AgentError$_free(void* self);

void* __swift_bridge__$Vec_AgentError$new(void);
void __swift_bridge__$Vec_AgentError$drop(void* vec_ptr);
void __swift_bridge__$Vec_AgentError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AgentError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AgentError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AgentError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AgentError$len(void* vec_ptr);
void* __swift_bridge__$Vec_AgentError$as_ptr(void* vec_ptr);

typedef struct FollowerArg FollowerArg;
void __swift_bridge__$FollowerArg$_free(void* self);

void* __swift_bridge__$Vec_FollowerArg$new(void);
void __swift_bridge__$Vec_FollowerArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowerArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowerArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowerArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowerArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowerArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowerArg$as_ptr(void* vec_ptr);

typedef struct Result27 Result27;
void __swift_bridge__$Result27$_free(void* self);

void* __swift_bridge__$Vec_Result27$new(void);
void __swift_bridge__$Vec_Result27$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result27$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result27$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result27$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result27$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result27$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result27$as_ptr(void* vec_ptr);

typedef struct UpdateProfileSetUniqueUsernameError UpdateProfileSetUniqueUsernameError;
void __swift_bridge__$UpdateProfileSetUniqueUsernameError$_free(void* self);

void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$new(void);
void __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$as_ptr(void* vec_ptr);

typedef struct Result26 Result26;
void __swift_bridge__$Result26$_free(void* self);

void* __swift_bridge__$Vec_Result26$new(void);
void __swift_bridge__$Vec_Result26$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result26$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result26$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result26$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result26$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result26$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result26$as_ptr(void* vec_ptr);

typedef struct Result25 Result25;
void __swift_bridge__$Result25$_free(void* self);

void* __swift_bridge__$Vec_Result25$new(void);
void __swift_bridge__$Vec_Result25$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result25$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result25$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result25$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result25$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result25$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result25$as_ptr(void* vec_ptr);

typedef struct UpdateProfileDetailsError UpdateProfileDetailsError;
void __swift_bridge__$UpdateProfileDetailsError$_free(void* self);

void* __swift_bridge__$Vec_UpdateProfileDetailsError$new(void);
void __swift_bridge__$Vec_UpdateProfileDetailsError$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpdateProfileDetailsError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpdateProfileDetailsError$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$as_ptr(void* vec_ptr);

typedef struct UserProfileUpdateDetailsFromFrontend UserProfileUpdateDetailsFromFrontend;
void __swift_bridge__$UserProfileUpdateDetailsFromFrontend$_free(void* self);

void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$new(void);
void __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$as_ptr(void* vec_ptr);

typedef struct PostViewDetailsFromFrontend PostViewDetailsFromFrontend;
void __swift_bridge__$PostViewDetailsFromFrontend$_free(void* self);

void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$new(void);
void __swift_bridge__$Vec_PostViewDetailsFromFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostViewDetailsFromFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostViewDetailsFromFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$as_ptr(void* vec_ptr);

typedef struct Result24 Result24;
void __swift_bridge__$Result24$_free(void* self);

void* __swift_bridge__$Vec_Result24$new(void);
void __swift_bridge__$Vec_Result24$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result24$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result24$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result24$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result24$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result24$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result24$as_ptr(void* vec_ptr);

typedef struct Result23 Result23;
void __swift_bridge__$Result23$_free(void* self);

void* __swift_bridge__$Vec_Result23$new(void);
void __swift_bridge__$Vec_Result23$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result23$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result23$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result23$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result23$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result23$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result23$as_ptr(void* vec_ptr);

typedef struct SettleNeuronsFundParticipationResponse SettleNeuronsFundParticipationResponse;
void __swift_bridge__$SettleNeuronsFundParticipationResponse$_free(void* self);

void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$new(void);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$as_ptr(void* vec_ptr);

typedef struct Result22 Result22;
void __swift_bridge__$Result22$_free(void* self);

void* __swift_bridge__$Vec_Result22$new(void);
void __swift_bridge__$Vec_Result22$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result22$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result22$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result22$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result22$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result22$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result22$as_ptr(void* vec_ptr);

typedef struct GovernanceError GovernanceError;
void __swift_bridge__$GovernanceError$_free(void* self);

void* __swift_bridge__$Vec_GovernanceError$new(void);
void __swift_bridge__$Vec_GovernanceError$drop(void* vec_ptr);
void __swift_bridge__$Vec_GovernanceError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GovernanceError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GovernanceError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GovernanceError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GovernanceError$len(void* vec_ptr);
void* __swift_bridge__$Vec_GovernanceError$as_ptr(void* vec_ptr);

typedef struct Ok Ok;
void __swift_bridge__$Ok$_free(void* self);

void* __swift_bridge__$Vec_Ok$new(void);
void __swift_bridge__$Vec_Ok$drop(void* vec_ptr);
void __swift_bridge__$Vec_Ok$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Ok$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Ok$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Ok$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Ok$len(void* vec_ptr);
void* __swift_bridge__$Vec_Ok$as_ptr(void* vec_ptr);

typedef struct NeuronsFundNeuron NeuronsFundNeuron;
void __swift_bridge__$NeuronsFundNeuron$_free(void* self);

void* __swift_bridge__$Vec_NeuronsFundNeuron$new(void);
void __swift_bridge__$Vec_NeuronsFundNeuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronsFundNeuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronsFundNeuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundNeuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronsFundNeuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronsFundNeuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundNeuron$as_ptr(void* vec_ptr);

typedef struct SettleNeuronsFundParticipationRequest SettleNeuronsFundParticipationRequest;
void __swift_bridge__$SettleNeuronsFundParticipationRequest$_free(void* self);

void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$new(void);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$as_ptr(void* vec_ptr);

typedef struct Result21 Result21;
void __swift_bridge__$Result21$_free(void* self);

void* __swift_bridge__$Vec_Result21$new(void);
void __swift_bridge__$Vec_Result21$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result21$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result21$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result21$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result21$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result21$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result21$as_ptr(void* vec_ptr);

typedef struct Committed Committed;
void __swift_bridge__$Committed$_free(void* self);

void* __swift_bridge__$Vec_Committed$new(void);
void __swift_bridge__$Vec_Committed$drop(void* vec_ptr);
void __swift_bridge__$Vec_Committed$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Committed$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Committed$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Committed$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Committed$len(void* vec_ptr);
void* __swift_bridge__$Vec_Committed$as_ptr(void* vec_ptr);

typedef struct Result20 Result20;
void __swift_bridge__$Result20$_free(void* self);

void* __swift_bridge__$Vec_Result20$new(void);
void __swift_bridge__$Vec_Result20$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result20$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result20$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result20$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result20$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result20$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result20$as_ptr(void* vec_ptr);

typedef struct MigrationErrors MigrationErrors;
void __swift_bridge__$MigrationErrors$_free(void* self);

void* __swift_bridge__$Vec_MigrationErrors$new(void);
void __swift_bridge__$Vec_MigrationErrors$drop(void* vec_ptr);
void __swift_bridge__$Vec_MigrationErrors$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MigrationErrors$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationErrors$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MigrationErrors$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MigrationErrors$len(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationErrors$as_ptr(void* vec_ptr);

typedef struct Result19 Result19;
void __swift_bridge__$Result19$_free(void* self);

void* __swift_bridge__$Vec_Result19$new(void);
void __swift_bridge__$Vec_Result19$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result19$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result19$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result19$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result19$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result19$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result19$as_ptr(void* vec_ptr);

typedef struct Result18 Result18;
void __swift_bridge__$Result18$_free(void* self);

void* __swift_bridge__$Vec_Result18$new(void);
void __swift_bridge__$Vec_Result18$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result18$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result18$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result18$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result18$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result18$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result18$as_ptr(void* vec_ptr);

typedef struct HttpResponse HttpResponse;
void __swift_bridge__$HttpResponse$_free(void* self);

void* __swift_bridge__$Vec_HttpResponse$new(void);
void __swift_bridge__$Vec_HttpResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_HttpResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HttpResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HttpResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HttpResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HttpResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_HttpResponse$as_ptr(void* vec_ptr);

typedef struct HttpRequest HttpRequest;
void __swift_bridge__$HttpRequest$_free(void* self);

void* __swift_bridge__$Vec_HttpRequest$new(void);
void __swift_bridge__$Vec_HttpRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_HttpRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HttpRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HttpRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HttpRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HttpRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_HttpRequest$as_ptr(void* vec_ptr);

typedef struct KnownPrincipalType KnownPrincipalType;
void __swift_bridge__$KnownPrincipalType$_free(void* self);

void* __swift_bridge__$Vec_KnownPrincipalType$new(void);
void __swift_bridge__$Vec_KnownPrincipalType$drop(void* vec_ptr);
void __swift_bridge__$Vec_KnownPrincipalType$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_KnownPrincipalType$pop(void* vec_ptr);
void* __swift_bridge__$Vec_KnownPrincipalType$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_KnownPrincipalType$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_KnownPrincipalType$len(void* vec_ptr);
void* __swift_bridge__$Vec_KnownPrincipalType$as_ptr(void* vec_ptr);

typedef struct Result17 Result17;
void __swift_bridge__$Result17$_free(void* self);

void* __swift_bridge__$Vec_Result17$new(void);
void __swift_bridge__$Vec_Result17$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result17$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result17$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result17$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result17$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result17$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result17$as_ptr(void* vec_ptr);

typedef struct WatchHistoryItem WatchHistoryItem;
void __swift_bridge__$WatchHistoryItem$_free(void* self);

void* __swift_bridge__$Vec_WatchHistoryItem$new(void);
void __swift_bridge__$Vec_WatchHistoryItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_WatchHistoryItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_WatchHistoryItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_WatchHistoryItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_WatchHistoryItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_WatchHistoryItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_WatchHistoryItem$as_ptr(void* vec_ptr);

typedef struct Result16 Result16;
void __swift_bridge__$Result16$_free(void* self);

void* __swift_bridge__$Vec_Result16$new(void);
void __swift_bridge__$Vec_Result16$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result16$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result16$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result16$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result16$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result16$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result16$as_ptr(void* vec_ptr);

typedef struct TokenEvent TokenEvent;
void __swift_bridge__$TokenEvent$_free(void* self);

void* __swift_bridge__$Vec_TokenEvent$new(void);
void __swift_bridge__$Vec_TokenEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_TokenEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TokenEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TokenEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TokenEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TokenEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_TokenEvent$as_ptr(void* vec_ptr);

typedef struct HotOrNotOutcomePayoutEvent HotOrNotOutcomePayoutEvent;
void __swift_bridge__$HotOrNotOutcomePayoutEvent$_free(void* self);

void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$new(void);
void __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$as_ptr(void* vec_ptr);

typedef struct MintEvent MintEvent;
void __swift_bridge__$MintEvent$_free(void* self);

void* __swift_bridge__$Vec_MintEvent$new(void);
void __swift_bridge__$Vec_MintEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_MintEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MintEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MintEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MintEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MintEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_MintEvent$as_ptr(void* vec_ptr);

typedef struct StakeEvent StakeEvent;
void __swift_bridge__$StakeEvent$_free(void* self);

void* __swift_bridge__$Vec_StakeEvent$new(void);
void __swift_bridge__$Vec_StakeEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_StakeEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_StakeEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_StakeEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_StakeEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_StakeEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_StakeEvent$as_ptr(void* vec_ptr);

typedef struct Result15 Result15;
void __swift_bridge__$Result15$_free(void* self);

void* __swift_bridge__$Vec_Result15$new(void);
void __swift_bridge__$Vec_Result15$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result15$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result15$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result15$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result15$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result15$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result15$as_ptr(void* vec_ptr);

typedef struct PaginationError PaginationError;
void __swift_bridge__$PaginationError$_free(void* self);

void* __swift_bridge__$Vec_PaginationError$new(void);
void __swift_bridge__$Vec_PaginationError$drop(void* vec_ptr);
void __swift_bridge__$Vec_PaginationError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PaginationError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PaginationError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PaginationError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PaginationError$len(void* vec_ptr);
void* __swift_bridge__$Vec_PaginationError$as_ptr(void* vec_ptr);

typedef struct Result14 Result14;
void __swift_bridge__$Result14$_free(void* self);

void* __swift_bridge__$Vec_Result14$new(void);
void __swift_bridge__$Vec_Result14$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result14$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result14$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result14$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result14$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result14$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result14$as_ptr(void* vec_ptr);

typedef struct SuccessHistoryItemV1 SuccessHistoryItemV1;
void __swift_bridge__$SuccessHistoryItemV1$_free(void* self);

void* __swift_bridge__$Vec_SuccessHistoryItemV1$new(void);
void __swift_bridge__$Vec_SuccessHistoryItemV1$drop(void* vec_ptr);
void __swift_bridge__$Vec_SuccessHistoryItemV1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SuccessHistoryItemV1$len(void* vec_ptr);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$as_ptr(void* vec_ptr);

typedef struct Result13 Result13;
void __swift_bridge__$Result13$_free(void* self);

void* __swift_bridge__$Vec_Result13$new(void);
void __swift_bridge__$Vec_Result13$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result13$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result13$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result13$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result13$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result13$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result13$as_ptr(void* vec_ptr);

typedef struct SessionType SessionType;
void __swift_bridge__$SessionType$_free(void* self);

void* __swift_bridge__$Vec_SessionType$new(void);
void __swift_bridge__$Vec_SessionType$drop(void* vec_ptr);
void __swift_bridge__$Vec_SessionType$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SessionType$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SessionType$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SessionType$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SessionType$len(void* vec_ptr);
void* __swift_bridge__$Vec_SessionType$as_ptr(void* vec_ptr);

typedef struct UserProfileDetailsForFrontendV2 UserProfileDetailsForFrontendV2;
void __swift_bridge__$UserProfileDetailsForFrontendV2$_free(void* self);

void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$new(void);
void __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$as_ptr(void* vec_ptr);

typedef struct MigrationInfo MigrationInfo;
void __swift_bridge__$MigrationInfo$_free(void* self);

void* __swift_bridge__$Vec_MigrationInfo$new(void);
void __swift_bridge__$Vec_MigrationInfo$drop(void* vec_ptr);
void __swift_bridge__$Vec_MigrationInfo$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MigrationInfo$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationInfo$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MigrationInfo$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MigrationInfo$len(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationInfo$as_ptr(void* vec_ptr);

typedef struct UserProfileDetailsForFrontend UserProfileDetailsForFrontend;
void __swift_bridge__$UserProfileDetailsForFrontend$_free(void* self);

void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$new(void);
void __swift_bridge__$Vec_UserProfileDetailsForFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileDetailsForFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileDetailsForFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$as_ptr(void* vec_ptr);

typedef struct UserCanisterDetails UserCanisterDetails;
void __swift_bridge__$UserCanisterDetails$_free(void* self);

void* __swift_bridge__$Vec_UserCanisterDetails$new(void);
void __swift_bridge__$Vec_UserCanisterDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserCanisterDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserCanisterDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserCanisterDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserCanisterDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserCanisterDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserCanisterDetails$as_ptr(void* vec_ptr);

typedef struct UserProfileGlobalStats UserProfileGlobalStats;
void __swift_bridge__$UserProfileGlobalStats$_free(void* self);

void* __swift_bridge__$Vec_UserProfileGlobalStats$new(void);
void __swift_bridge__$Vec_UserProfileGlobalStats$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileGlobalStats$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileGlobalStats$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileGlobalStats$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileGlobalStats$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileGlobalStats$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileGlobalStats$as_ptr(void* vec_ptr);

typedef struct FollowEntry FollowEntry;
void __swift_bridge__$FollowEntry$_free(void* self);

void* __swift_bridge__$Vec_FollowEntry$new(void);
void __swift_bridge__$Vec_FollowEntry$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowEntry$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowEntry$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntry$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowEntry$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowEntry$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntry$as_ptr(void* vec_ptr);

typedef struct FollowEntryDetail FollowEntryDetail;
void __swift_bridge__$FollowEntryDetail$_free(void* self);

void* __swift_bridge__$Vec_FollowEntryDetail$new(void);
void __swift_bridge__$Vec_FollowEntryDetail$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowEntryDetail$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowEntryDetail$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntryDetail$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowEntryDetail$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowEntryDetail$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntryDetail$as_ptr(void* vec_ptr);

typedef struct MlFeedCacheItem MlFeedCacheItem;
void __swift_bridge__$MlFeedCacheItem$_free(void* self);

void* __swift_bridge__$Vec_MlFeedCacheItem$new(void);
void __swift_bridge__$Vec_MlFeedCacheItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_MlFeedCacheItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MlFeedCacheItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MlFeedCacheItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MlFeedCacheItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MlFeedCacheItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_MlFeedCacheItem$as_ptr(void* vec_ptr);

typedef struct Result11 Result11;
void __swift_bridge__$Result11$_free(void* self);

void* __swift_bridge__$Vec_Result11$new(void);
void __swift_bridge__$Vec_Result11$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result11$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result11$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result11$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result11$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result11$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result11$as_ptr(void* vec_ptr);

typedef struct PlacedBetDetailResult PlacedBetDetailResult;
void __swift_bridge__$PlacedBetDetailResult$_free(void* self);

void* __swift_bridge__$Vec_PlacedBetDetailResult$new(void);
void __swift_bridge__$Vec_PlacedBetDetailResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlacedBetDetailResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlacedBetDetailResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetailResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlacedBetDetailResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlacedBetDetailResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetailResult$as_ptr(void* vec_ptr);

typedef struct PlacedBetDetail PlacedBetDetail;
void __swift_bridge__$PlacedBetDetail$_free(void* self);

void* __swift_bridge__$Vec_PlacedBetDetail$new(void);
void __swift_bridge__$Vec_PlacedBetDetail$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlacedBetDetail$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlacedBetDetail$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetail$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlacedBetDetail$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlacedBetDetail$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetail$as_ptr(void* vec_ptr);

typedef struct BetOutcomeForBetMaker BetOutcomeForBetMaker;
void __swift_bridge__$BetOutcomeForBetMaker$_free(void* self);

void* __swift_bridge__$Vec_BetOutcomeForBetMaker$new(void);
void __swift_bridge__$Vec_BetOutcomeForBetMaker$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetOutcomeForBetMaker$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetOutcomeForBetMaker$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$as_ptr(void* vec_ptr);

typedef struct Result10 Result10;
void __swift_bridge__$Result10$_free(void* self);

void* __swift_bridge__$Vec_Result10$new(void);
void __swift_bridge__$Vec_Result10$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result10$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result10$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result10$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result10$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result10$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result10$as_ptr(void* vec_ptr);

typedef struct Post Post;
void __swift_bridge__$Post$_free(void* self);

void* __swift_bridge__$Vec_Post$new(void);
void __swift_bridge__$Vec_Post$drop(void* vec_ptr);
void __swift_bridge__$Vec_Post$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Post$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Post$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Post$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Post$len(void* vec_ptr);
void* __swift_bridge__$Vec_Post$as_ptr(void* vec_ptr);

typedef struct HotOrNotDetails HotOrNotDetails;
void __swift_bridge__$HotOrNotDetails$_free(void* self);

void* __swift_bridge__$Vec_HotOrNotDetails$new(void);
void __swift_bridge__$Vec_HotOrNotDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_HotOrNotDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HotOrNotDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HotOrNotDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HotOrNotDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotDetails$as_ptr(void* vec_ptr);

typedef struct SlotDetails SlotDetails;
void __swift_bridge__$SlotDetails$_free(void* self);

void* __swift_bridge__$Vec_SlotDetails$new(void);
void __swift_bridge__$Vec_SlotDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_SlotDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SlotDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SlotDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SlotDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SlotDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_SlotDetails$as_ptr(void* vec_ptr);

typedef struct RoomDetails RoomDetails;
void __swift_bridge__$RoomDetails$_free(void* self);

void* __swift_bridge__$Vec_RoomDetails$new(void);
void __swift_bridge__$Vec_RoomDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_RoomDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RoomDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RoomDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RoomDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RoomDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_RoomDetails$as_ptr(void* vec_ptr);

typedef struct RoomBetPossibleOutcomes RoomBetPossibleOutcomes;
void __swift_bridge__$RoomBetPossibleOutcomes$_free(void* self);

void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$new(void);
void __swift_bridge__$Vec_RoomBetPossibleOutcomes$drop(void* vec_ptr);
void __swift_bridge__$Vec_RoomBetPossibleOutcomes$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RoomBetPossibleOutcomes$len(void* vec_ptr);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$as_ptr(void* vec_ptr);

typedef struct AggregateStats AggregateStats;
void __swift_bridge__$AggregateStats$_free(void* self);

void* __swift_bridge__$Vec_AggregateStats$new(void);
void __swift_bridge__$Vec_AggregateStats$drop(void* vec_ptr);
void __swift_bridge__$Vec_AggregateStats$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AggregateStats$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AggregateStats$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AggregateStats$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AggregateStats$len(void* vec_ptr);
void* __swift_bridge__$Vec_AggregateStats$as_ptr(void* vec_ptr);

typedef struct PostViewStatistics PostViewStatistics;
void __swift_bridge__$PostViewStatistics$_free(void* self);

void* __swift_bridge__$Vec_PostViewStatistics$new(void);
void __swift_bridge__$Vec_PostViewStatistics$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostViewStatistics$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostViewStatistics$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewStatistics$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostViewStatistics$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostViewStatistics$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewStatistics$as_ptr(void* vec_ptr);

typedef struct FeedScore FeedScore;
void __swift_bridge__$FeedScore$_free(void* self);

void* __swift_bridge__$Vec_FeedScore$new(void);
void __swift_bridge__$Vec_FeedScore$drop(void* vec_ptr);
void __swift_bridge__$Vec_FeedScore$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FeedScore$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FeedScore$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FeedScore$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FeedScore$len(void* vec_ptr);
void* __swift_bridge__$Vec_FeedScore$as_ptr(void* vec_ptr);

typedef struct DeviceIdentity DeviceIdentity;
void __swift_bridge__$DeviceIdentity$_free(void* self);

void* __swift_bridge__$Vec_DeviceIdentity$new(void);
void __swift_bridge__$Vec_DeviceIdentity$drop(void* vec_ptr);
void __swift_bridge__$Vec_DeviceIdentity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DeviceIdentity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DeviceIdentity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DeviceIdentity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DeviceIdentity$len(void* vec_ptr);
void* __swift_bridge__$Vec_DeviceIdentity$as_ptr(void* vec_ptr);

typedef struct Result9 Result9;
void __swift_bridge__$Result9$_free(void* self);

void* __swift_bridge__$Vec_Result9$new(void);
void __swift_bridge__$Vec_Result9$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result9$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result9$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result9$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result9$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result9$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result9$as_ptr(void* vec_ptr);

typedef struct BetDetails BetDetails;
void __swift_bridge__$BetDetails$_free(void* self);

void* __swift_bridge__$Vec_BetDetails$new(void);
void __swift_bridge__$Vec_BetDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetDetails$as_ptr(void* vec_ptr);

typedef struct BetPayout BetPayout;
void __swift_bridge__$BetPayout$_free(void* self);

void* __swift_bridge__$Vec_BetPayout$new(void);
void __swift_bridge__$Vec_BetPayout$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetPayout$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetPayout$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetPayout$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetPayout$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetPayout$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetPayout$as_ptr(void* vec_ptr);

typedef struct BetMakerInformedStatus BetMakerInformedStatus;
void __swift_bridge__$BetMakerInformedStatus$_free(void* self);

void* __swift_bridge__$Vec_BetMakerInformedStatus$new(void);
void __swift_bridge__$Vec_BetMakerInformedStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetMakerInformedStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetMakerInformedStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetMakerInformedStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetMakerInformedStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetMakerInformedStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetMakerInformedStatus$as_ptr(void* vec_ptr);

typedef struct Result8 Result8;
void __swift_bridge__$Result8$_free(void* self);

void* __swift_bridge__$Vec_Result8$new(void);
void __swift_bridge__$Vec_Result8$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result8$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result8$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result8$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result8$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result8$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result8$as_ptr(void* vec_ptr);

typedef struct FollowAnotherUserProfileError FollowAnotherUserProfileError;
void __swift_bridge__$FollowAnotherUserProfileError$_free(void* self);

void* __swift_bridge__$Vec_FollowAnotherUserProfileError$new(void);
void __swift_bridge__$Vec_FollowAnotherUserProfileError$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowAnotherUserProfileError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowAnotherUserProfileError$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$as_ptr(void* vec_ptr);

typedef struct FolloweeArg FolloweeArg;
void __swift_bridge__$FolloweeArg$_free(void* self);

void* __swift_bridge__$Vec_FolloweeArg$new(void);
void __swift_bridge__$Vec_FolloweeArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_FolloweeArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FolloweeArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FolloweeArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FolloweeArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FolloweeArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_FolloweeArg$as_ptr(void* vec_ptr);

typedef struct Result7 Result7;
void __swift_bridge__$Result7$_free(void* self);

void* __swift_bridge__$Vec_Result7$new(void);
void __swift_bridge__$Vec_Result7$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result7$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result7$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result7$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result7$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result7$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result7$as_ptr(void* vec_ptr);

typedef struct CdaoDeployError CdaoDeployError;
void __swift_bridge__$CdaoDeployError$_free(void* self);

void* __swift_bridge__$Vec_CdaoDeployError$new(void);
void __swift_bridge__$Vec_CdaoDeployError$drop(void* vec_ptr);
void __swift_bridge__$Vec_CdaoDeployError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CdaoDeployError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoDeployError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CdaoDeployError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CdaoDeployError$len(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoDeployError$as_ptr(void* vec_ptr);

typedef struct DeployedCdaoCanisters DeployedCdaoCanisters;
void __swift_bridge__$DeployedCdaoCanisters$_free(void* self);

void* __swift_bridge__$Vec_DeployedCdaoCanisters$new(void);
void __swift_bridge__$Vec_DeployedCdaoCanisters$drop(void* vec_ptr);
void __swift_bridge__$Vec_DeployedCdaoCanisters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DeployedCdaoCanisters$len(void* vec_ptr);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$as_ptr(void* vec_ptr);

typedef struct SnsInitPayload SnsInitPayload;
void __swift_bridge__$SnsInitPayload$_free(void* self);

void* __swift_bridge__$Vec_SnsInitPayload$new(void);
void __swift_bridge__$Vec_SnsInitPayload$drop(void* vec_ptr);
void __swift_bridge__$Vec_SnsInitPayload$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SnsInitPayload$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SnsInitPayload$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SnsInitPayload$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SnsInitPayload$len(void* vec_ptr);
void* __swift_bridge__$Vec_SnsInitPayload$as_ptr(void* vec_ptr);

typedef struct Countries Countries;
void __swift_bridge__$Countries$_free(void* self);

void* __swift_bridge__$Vec_Countries$new(void);
void __swift_bridge__$Vec_Countries$drop(void* vec_ptr);
void __swift_bridge__$Vec_Countries$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Countries$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Countries$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Countries$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Countries$len(void* vec_ptr);
void* __swift_bridge__$Vec_Countries$as_ptr(void* vec_ptr);

typedef struct InitialTokenDistribution InitialTokenDistribution;
void __swift_bridge__$InitialTokenDistribution$_free(void* self);

void* __swift_bridge__$Vec_InitialTokenDistribution$new(void);
void __swift_bridge__$Vec_InitialTokenDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_InitialTokenDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_InitialTokenDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_InitialTokenDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_InitialTokenDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_InitialTokenDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_InitialTokenDistribution$as_ptr(void* vec_ptr);

typedef struct FractionalDeveloperVotingPower FractionalDeveloperVotingPower;
void __swift_bridge__$FractionalDeveloperVotingPower$_free(void* self);

void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$new(void);
void __swift_bridge__$Vec_FractionalDeveloperVotingPower$drop(void* vec_ptr);
void __swift_bridge__$Vec_FractionalDeveloperVotingPower$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FractionalDeveloperVotingPower$len(void* vec_ptr);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$as_ptr(void* vec_ptr);

typedef struct SwapDistribution SwapDistribution;
void __swift_bridge__$SwapDistribution$_free(void* self);

void* __swift_bridge__$Vec_SwapDistribution$new(void);
void __swift_bridge__$Vec_SwapDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_SwapDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SwapDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SwapDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SwapDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SwapDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_SwapDistribution$as_ptr(void* vec_ptr);

typedef struct AirdropDistribution AirdropDistribution;
void __swift_bridge__$AirdropDistribution$_free(void* self);

void* __swift_bridge__$Vec_AirdropDistribution$new(void);
void __swift_bridge__$Vec_AirdropDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_AirdropDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AirdropDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AirdropDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AirdropDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AirdropDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_AirdropDistribution$as_ptr(void* vec_ptr);

typedef struct DeveloperDistribution DeveloperDistribution;
void __swift_bridge__$DeveloperDistribution$_free(void* self);

void* __swift_bridge__$Vec_DeveloperDistribution$new(void);
void __swift_bridge__$Vec_DeveloperDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_DeveloperDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DeveloperDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DeveloperDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DeveloperDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DeveloperDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_DeveloperDistribution$as_ptr(void* vec_ptr);

typedef struct NeuronDistribution NeuronDistribution;
void __swift_bridge__$NeuronDistribution$_free(void* self);

void* __swift_bridge__$Vec_NeuronDistribution$new(void);
void __swift_bridge__$Vec_NeuronDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronDistribution$as_ptr(void* vec_ptr);

typedef struct TreasuryDistribution TreasuryDistribution;
void __swift_bridge__$TreasuryDistribution$_free(void* self);

void* __swift_bridge__$Vec_TreasuryDistribution$new(void);
void __swift_bridge__$Vec_TreasuryDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_TreasuryDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TreasuryDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TreasuryDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TreasuryDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TreasuryDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_TreasuryDistribution$as_ptr(void* vec_ptr);

typedef struct NeuronsFundParticipants NeuronsFundParticipants;
void __swift_bridge__$NeuronsFundParticipants$_free(void* self);

void* __swift_bridge__$Vec_NeuronsFundParticipants$new(void);
void __swift_bridge__$Vec_NeuronsFundParticipants$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronsFundParticipants$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipants$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipants$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronsFundParticipants$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronsFundParticipants$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipants$as_ptr(void* vec_ptr);

typedef struct CfParticipant CfParticipant;
void __swift_bridge__$CfParticipant$_free(void* self);

void* __swift_bridge__$Vec_CfParticipant$new(void);
void __swift_bridge__$Vec_CfParticipant$drop(void* vec_ptr);
void __swift_bridge__$Vec_CfParticipant$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CfParticipant$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CfParticipant$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CfParticipant$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CfParticipant$len(void* vec_ptr);
void* __swift_bridge__$Vec_CfParticipant$as_ptr(void* vec_ptr);

typedef struct CfNeuron CfNeuron;
void __swift_bridge__$CfNeuron$_free(void* self);

void* __swift_bridge__$Vec_CfNeuron$new(void);
void __swift_bridge__$Vec_CfNeuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_CfNeuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CfNeuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CfNeuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CfNeuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CfNeuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_CfNeuron$as_ptr(void* vec_ptr);

typedef struct NeuronsFundParticipationConstraints NeuronsFundParticipationConstraints;
void __swift_bridge__$NeuronsFundParticipationConstraints$_free(void* self);

void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$new(void);
void __swift_bridge__$Vec_NeuronsFundParticipationConstraints$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronsFundParticipationConstraints$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronsFundParticipationConstraints$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$as_ptr(void* vec_ptr);

typedef struct IdealMatchedParticipationFunction IdealMatchedParticipationFunction;
void __swift_bridge__$IdealMatchedParticipationFunction$_free(void* self);

void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$new(void);
void __swift_bridge__$Vec_IdealMatchedParticipationFunction$drop(void* vec_ptr);
void __swift_bridge__$Vec_IdealMatchedParticipationFunction$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$pop(void* vec_ptr);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_IdealMatchedParticipationFunction$len(void* vec_ptr);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$as_ptr(void* vec_ptr);

typedef struct LinearScalingCoefficient LinearScalingCoefficient;
void __swift_bridge__$LinearScalingCoefficient$_free(void* self);

void* __swift_bridge__$Vec_LinearScalingCoefficient$new(void);
void __swift_bridge__$Vec_LinearScalingCoefficient$drop(void* vec_ptr);
void __swift_bridge__$Vec_LinearScalingCoefficient$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_LinearScalingCoefficient$pop(void* vec_ptr);
void* __swift_bridge__$Vec_LinearScalingCoefficient$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_LinearScalingCoefficient$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_LinearScalingCoefficient$len(void* vec_ptr);
void* __swift_bridge__$Vec_LinearScalingCoefficient$as_ptr(void* vec_ptr);

typedef struct DappCanisters DappCanisters;
void __swift_bridge__$DappCanisters$_free(void* self);

void* __swift_bridge__$Vec_DappCanisters$new(void);
void __swift_bridge__$Vec_DappCanisters$drop(void* vec_ptr);
void __swift_bridge__$Vec_DappCanisters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DappCanisters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DappCanisters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DappCanisters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DappCanisters$len(void* vec_ptr);
void* __swift_bridge__$Vec_DappCanisters$as_ptr(void* vec_ptr);

typedef struct Canister Canister;
void __swift_bridge__$Canister$_free(void* self);

void* __swift_bridge__$Vec_Canister$new(void);
void __swift_bridge__$Vec_Canister$drop(void* vec_ptr);
void __swift_bridge__$Vec_Canister$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Canister$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Canister$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Canister$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Canister$len(void* vec_ptr);
void* __swift_bridge__$Vec_Canister$as_ptr(void* vec_ptr);

typedef struct NeuronBasketConstructionParameters NeuronBasketConstructionParameters;
void __swift_bridge__$NeuronBasketConstructionParameters$_free(void* self);

void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$new(void);
void __swift_bridge__$Vec_NeuronBasketConstructionParameters$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronBasketConstructionParameters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronBasketConstructionParameters$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$as_ptr(void* vec_ptr);

typedef struct Result6 Result6;
void __swift_bridge__$Result6$_free(void* self);

void* __swift_bridge__$Vec_Result6$new(void);
void __swift_bridge__$Vec_Result6$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result6$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result6$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result6$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result6$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result6$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result6$as_ptr(void* vec_ptr);

typedef struct Result5 Result5;
void __swift_bridge__$Result5$_free(void* self);

void* __swift_bridge__$Vec_Result5$new(void);
void __swift_bridge__$Vec_Result5$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result5$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result5$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result5$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result5$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result5$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result5$as_ptr(void* vec_ptr);

typedef struct Result4 Result4;
void __swift_bridge__$Result4$_free(void* self);

void* __swift_bridge__$Vec_Result4$new(void);
void __swift_bridge__$Vec_Result4$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result4$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result4$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result4$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result4$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result4$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result4$as_ptr(void* vec_ptr);

typedef struct NamespaceErrors NamespaceErrors;
void __swift_bridge__$NamespaceErrors$_free(void* self);

void* __swift_bridge__$Vec_NamespaceErrors$new(void);
void __swift_bridge__$Vec_NamespaceErrors$drop(void* vec_ptr);
void __swift_bridge__$Vec_NamespaceErrors$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NamespaceErrors$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceErrors$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NamespaceErrors$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NamespaceErrors$len(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceErrors$as_ptr(void* vec_ptr);

typedef struct NamespaceForFrontend NamespaceForFrontend;
void __swift_bridge__$NamespaceForFrontend$_free(void* self);

void* __swift_bridge__$Vec_NamespaceForFrontend$new(void);
void __swift_bridge__$Vec_NamespaceForFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_NamespaceForFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NamespaceForFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceForFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NamespaceForFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NamespaceForFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceForFrontend$as_ptr(void* vec_ptr);

typedef struct Result3 Result3;
void __swift_bridge__$Result3$_free(void* self);

void* __swift_bridge__$Vec_Result3$new(void);
void __swift_bridge__$Vec_Result3$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result3$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result3$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result3$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result3$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result3$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result3$as_ptr(void* vec_ptr);

typedef struct BetOnCurrentlyViewingPostError BetOnCurrentlyViewingPostError;
void __swift_bridge__$BetOnCurrentlyViewingPostError$_free(void* self);

void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$new(void);
void __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$as_ptr(void* vec_ptr);

typedef struct BettingStatus BettingStatus;
void __swift_bridge__$BettingStatus$_free(void* self);

void* __swift_bridge__$Vec_BettingStatus$new(void);
void __swift_bridge__$Vec_BettingStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_BettingStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BettingStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BettingStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BettingStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BettingStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_BettingStatus$as_ptr(void* vec_ptr);

typedef struct SystemTime SystemTime;
void __swift_bridge__$SystemTime$_free(void* self);

void* __swift_bridge__$Vec_SystemTime$new(void);
void __swift_bridge__$Vec_SystemTime$drop(void* vec_ptr);
void __swift_bridge__$Vec_SystemTime$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SystemTime$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SystemTime$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SystemTime$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SystemTime$len(void* vec_ptr);
void* __swift_bridge__$Vec_SystemTime$as_ptr(void* vec_ptr);

typedef struct PlaceBetArg PlaceBetArg;
void __swift_bridge__$PlaceBetArg$_free(void* self);

void* __swift_bridge__$Vec_PlaceBetArg$new(void);
void __swift_bridge__$Vec_PlaceBetArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlaceBetArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlaceBetArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlaceBetArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlaceBetArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlaceBetArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlaceBetArg$as_ptr(void* vec_ptr);

typedef struct BetDirection BetDirection;
void __swift_bridge__$BetDirection$_free(void* self);

void* __swift_bridge__$Vec_BetDirection$new(void);
void __swift_bridge__$Vec_BetDirection$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetDirection$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetDirection$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetDirection$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetDirection$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetDirection$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetDirection$as_ptr(void* vec_ptr);

typedef struct Result2 Result2;
void __swift_bridge__$Result2$_free(void* self);

void* __swift_bridge__$Vec_Result2$new(void);
void __swift_bridge__$Vec_Result2$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result2$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result2$as_ptr(void* vec_ptr);

typedef struct Result1 Result1;
void __swift_bridge__$Result1$_free(void* self);

void* __swift_bridge__$Vec_Result1$new(void);
void __swift_bridge__$Vec_Result1$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result1$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result1$as_ptr(void* vec_ptr);

typedef struct CdaoTokenError CdaoTokenError;
void __swift_bridge__$CdaoTokenError$_free(void* self);

void* __swift_bridge__$Vec_CdaoTokenError$new(void);
void __swift_bridge__$Vec_CdaoTokenError$drop(void* vec_ptr);
void __swift_bridge__$Vec_CdaoTokenError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CdaoTokenError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoTokenError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CdaoTokenError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CdaoTokenError$len(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoTokenError$as_ptr(void* vec_ptr);

typedef struct TransferError TransferError;
void __swift_bridge__$TransferError$_free(void* self);

void* __swift_bridge__$Vec_TransferError$new(void);
void __swift_bridge__$Vec_TransferError$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferError$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferError$as_ptr(void* vec_ptr);

typedef struct RejectionCode RejectionCode;
void __swift_bridge__$RejectionCode$_free(void* self);

void* __swift_bridge__$Vec_RejectionCode$new(void);
void __swift_bridge__$Vec_RejectionCode$drop(void* vec_ptr);
void __swift_bridge__$Vec_RejectionCode$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RejectionCode$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RejectionCode$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RejectionCode$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RejectionCode$len(void* vec_ptr);
void* __swift_bridge__$Vec_RejectionCode$as_ptr(void* vec_ptr);

typedef struct Result_ Result_;
void __swift_bridge__$Result_$_free(void* self);

void* __swift_bridge__$Vec_Result_$new(void);
void __swift_bridge__$Vec_Result_$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result_$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result_$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result_$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result_$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result_$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result_$as_ptr(void* vec_ptr);

typedef struct PostDetailsForFrontend PostDetailsForFrontend;
void __swift_bridge__$PostDetailsForFrontend$_free(void* self);

void* __swift_bridge__$Vec_PostDetailsForFrontend$new(void);
void __swift_bridge__$Vec_PostDetailsForFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostDetailsForFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostDetailsForFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsForFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostDetailsForFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostDetailsForFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsForFrontend$as_ptr(void* vec_ptr);

typedef struct PostStatus PostStatus;
void __swift_bridge__$PostStatus$_free(void* self);

void* __swift_bridge__$Vec_PostStatus$new(void);
void __swift_bridge__$Vec_PostStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostStatus$as_ptr(void* vec_ptr);

typedef struct PostDetailsFromFrontend PostDetailsFromFrontend;
void __swift_bridge__$PostDetailsFromFrontend$_free(void* self);

void* __swift_bridge__$Vec_PostDetailsFromFrontend$new(void);
void __swift_bridge__$Vec_PostDetailsFromFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostDetailsFromFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostDetailsFromFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$as_ptr(void* vec_ptr);

typedef struct Service Service;
void __swift_bridge__$Service$_free(void* self);

void* __swift_bridge__$Vec_Service$new(void);
void __swift_bridge__$Vec_Service$drop(void* vec_ptr);
void __swift_bridge__$Vec_Service$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Service$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Service$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Service$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Service$len(void* vec_ptr);
void* __swift_bridge__$Vec_Service$as_ptr(void* vec_ptr);

typedef struct DelegatedIdentityWire DelegatedIdentityWire;
void __swift_bridge__$DelegatedIdentityWire$_free(void* self);

void* __swift_bridge__$Vec_DelegatedIdentityWire$new(void);
void __swift_bridge__$Vec_DelegatedIdentityWire$drop(void* vec_ptr);
void __swift_bridge__$Vec_DelegatedIdentityWire$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DelegatedIdentityWire$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentityWire$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DelegatedIdentityWire$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DelegatedIdentityWire$len(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentityWire$as_ptr(void* vec_ptr);

typedef struct CanistersWrapper CanistersWrapper;
void __swift_bridge__$CanistersWrapper$_free(void* self);

void* __swift_bridge__$Vec_CanistersWrapper$new(void);
void __swift_bridge__$Vec_CanistersWrapper$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanistersWrapper$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanistersWrapper$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanistersWrapper$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanistersWrapper$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanistersWrapper$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanistersWrapper$as_ptr(void* vec_ptr);

typedef struct GetPostsOfUserProfileError GetPostsOfUserProfileError;
void __swift_bridge__$GetPostsOfUserProfileError$_free(void* self);

void* __swift_bridge__$Vec_GetPostsOfUserProfileError$new(void);
void __swift_bridge__$Vec_GetPostsOfUserProfileError$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetPostsOfUserProfileError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetPostsOfUserProfileError$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$as_ptr(void* vec_ptr);

typedef struct Result12 Result12;
void __swift_bridge__$Result12$_free(void* self);

void* __swift_bridge__$Vec_Result12$new(void);
void __swift_bridge__$Vec_Result12$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result12$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result12$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result12$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result12$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result12$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result12$as_ptr(void* vec_ptr);

typedef struct RateLimitStatus RateLimitStatus;
void __swift_bridge__$RateLimitStatus$_free(void* self);

void* __swift_bridge__$Vec_RateLimitStatus$new(void);
void __swift_bridge__$Vec_RateLimitStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_RateLimitStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RateLimitStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RateLimitStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RateLimitStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitStatus$as_ptr(void* vec_ptr);

typedef struct VideoGenRequestKey VideoGenRequestKey;
void __swift_bridge__$VideoGenRequestKey$_free(void* self);

void* __swift_bridge__$Vec_VideoGenRequestKey$new(void);
void __swift_bridge__$Vec_VideoGenRequestKey$drop(void* vec_ptr);
void __swift_bridge__$Vec_VideoGenRequestKey$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_VideoGenRequestKey$pop(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestKey$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_VideoGenRequestKey$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_VideoGenRequestKey$len(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestKey$as_ptr(void* vec_ptr);

typedef struct UserPostService UserPostService;
void __swift_bridge__$UserPostService$_free(void* self);

void* __swift_bridge__$Vec_UserPostService$new(void);
void __swift_bridge__$Vec_UserPostService$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserPostService$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserPostService$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserPostService$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserPostService$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserPostService$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserPostService$as_ptr(void* vec_ptr);

typedef struct PostServicePost PostServicePost;
void __swift_bridge__$PostServicePost$_free(void* self);

void* __swift_bridge__$Vec_PostServicePost$new(void);
void __swift_bridge__$Vec_PostServicePost$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostServicePost$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostServicePost$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePost$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostServicePost$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostServicePost$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePost$as_ptr(void* vec_ptr);

typedef struct PostServicePostStatus PostServicePostStatus;
void __swift_bridge__$PostServicePostStatus$_free(void* self);

void* __swift_bridge__$Vec_PostServicePostStatus$new(void);
void __swift_bridge__$Vec_PostServicePostStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostServicePostStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostServicePostStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePostStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostServicePostStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostServicePostStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePostStatus$as_ptr(void* vec_ptr);

typedef struct PostServicePostViewStatistics PostServicePostViewStatistics;
void __swift_bridge__$PostServicePostViewStatistics$_free(void* self);

void* __swift_bridge__$Vec_PostServicePostViewStatistics$new(void);
void __swift_bridge__$Vec_PostServicePostViewStatistics$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostServicePostViewStatistics$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostServicePostViewStatistics$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePostViewStatistics$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostServicePostViewStatistics$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostServicePostViewStatistics$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostServicePostViewStatistics$as_ptr(void* vec_ptr);

typedef struct PostServiceGetPostsOfUserProfileError PostServiceGetPostsOfUserProfileError;
void __swift_bridge__$PostServiceGetPostsOfUserProfileError$_free(void* self);

void* __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$new(void);
void __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostServiceGetPostsOfUserProfileError$as_ptr(void* vec_ptr);

typedef struct PostServiceResult3 PostServiceResult3;
void __swift_bridge__$PostServiceResult3$_free(void* self);

void* __swift_bridge__$Vec_PostServiceResult3$new(void);
void __swift_bridge__$Vec_PostServiceResult3$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostServiceResult3$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostServiceResult3$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostServiceResult3$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostServiceResult3$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostServiceResult3$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostServiceResult3$as_ptr(void* vec_ptr);

uint64_t __swift_bridge__$PostDetailsForFrontend$id(void* self);
bool __swift_bridge__$PostDetailsForFrontend$is_nsfw(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$video_uid(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$description(void* self);
uint64_t __swift_bridge__$PostDetailsForFrontend$like_count(void* self);
bool __swift_bridge__$PostDetailsForFrontend$liked_by_me(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$created_by_profile_photo_url(void* self);
void* __swift_bridge__$PostDetailsForFrontend$created_by_user_principal_id(void* self);
void* __swift_bridge__$PostDetailsForFrontend$status(void* self);
void* __swift_bridge__$PostDetailsForFrontend$hashtags(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$created_by_display_name(void* self);
uint64_t __swift_bridge__$PostDetailsForFrontend$total_view_count(void* self);
bool __swift_bridge__$PostStatus$is_banned_due_to_user_reporting(void* self);
bool __swift_bridge__$PostDetailsFromFrontend$is_nsfw(void* self);
void* __swift_bridge__$PostDetailsFromFrontend$hashtags(void* self);
struct RustStr __swift_bridge__$PostDetailsFromFrontend$description(void* self);
struct RustStr __swift_bridge__$PostDetailsFromFrontend$video_uid(void* self);
bool __swift_bridge__$PostDetailsFromFrontend$creator_consent_for_inclusion_in_hot_or_not(void* self);
struct __private__ResultPtrAndPtr __swift_bridge__$Service$new(void* principal, void* identity);
void __swift_bridge__$Service$add_device_id(void* callback_wrapper, void __swift_bridge__$Service$add_device_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$add_post_v_2(void* callback_wrapper, void __swift_bridge__$Service$add_post_v_2$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$add_token(void* callback_wrapper, void __swift_bridge__$Service$add_token$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$bet_on_currently_viewing_post(void* callback_wrapper, void __swift_bridge__$Service$bet_on_currently_viewing_post$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$check_and_update_scores_and_share_with_post_cache_if_difference_beyond_threshold(void* callback_wrapper, void __swift_bridge__$Service$check_and_update_scores_and_share_with_post_cache_if_difference_beyond_threshold$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$clear_snapshot(void* callback_wrapper, void __swift_bridge__$Service$clear_snapshot$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$create_a_namespace(void* callback_wrapper, void __swift_bridge__$Service$create_a_namespace$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$delete_key_value_pair(void* callback_wrapper, void __swift_bridge__$Service$delete_key_value_pair$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$delete_multiple_key_value_pairs(void* callback_wrapper, void __swift_bridge__$Service$delete_multiple_key_value_pairs$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$deploy_cdao_sns(void* callback_wrapper, void __swift_bridge__$Service$deploy_cdao_sns$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1);
void __swift_bridge__$Service$deployed_cdao_canisters(void* callback_wrapper, void __swift_bridge__$Service$deployed_cdao_canisters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$do_i_follow_this_user(void* callback_wrapper, void __swift_bridge__$Service$do_i_follow_this_user$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$download_snapshot(void* callback_wrapper, void __swift_bridge__$Service$download_snapshot$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_bet_details_for_a_user_on_a_post(void* callback_wrapper, void __swift_bridge__$Service$get_bet_details_for_a_user_on_a_post$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1);
void __swift_bridge__$Service$get_device_identities(void* callback_wrapper, void __swift_bridge__$Service$get_device_identities$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_entire_individual_post_detail_by_id(void* callback_wrapper, void __swift_bridge__$Service$get_entire_individual_post_detail_by_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_hot_or_not_bet_details_for_this_post(void* callback_wrapper, void __swift_bridge__$Service$get_hot_or_not_bet_details_for_this_post$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_hot_or_not_bets_placed_by_this_profile_with_pagination(void* callback_wrapper, void __swift_bridge__$Service$get_hot_or_not_bets_placed_by_this_profile_with_pagination$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_individual_post_details_by_id(void* callback_wrapper, void __swift_bridge__$Service$get_individual_post_details_by_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_individual_hot_or_not_bet_placed_by_this_profile(void* callback_wrapper, void __swift_bridge__$Service$get_individual_hot_or_not_bet_placed_by_this_profile$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1);
void __swift_bridge__$Service$get_last_access_time(void* callback_wrapper, void __swift_bridge__$Service$get_last_access_time$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_last_canister_functionality_access_time(void* callback_wrapper, void __swift_bridge__$Service$get_last_canister_functionality_access_time$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_ml_feed_cache_paginated(void* callback_wrapper, void __swift_bridge__$Service$get_ml_feed_cache_paginated$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination(void* callback_wrapper, void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination_cursor(void* callback_wrapper, void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination_cursor$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_principals_that_follow_this_profile_paginated(void* callback_wrapper, void __swift_bridge__$Service$get_principals_that_follow_this_profile_paginated$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, struct __private__OptionU64 arg0);
void __swift_bridge__$Service$get_principals_this_profile_follows_paginated(void* callback_wrapper, void __swift_bridge__$Service$get_principals_this_profile_follows_paginated$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, struct __private__OptionU64 arg0);
void __swift_bridge__$Service$get_profile_details(void* callback_wrapper, void __swift_bridge__$Service$get_profile_details$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_profile_details_v_2(void* callback_wrapper, void __swift_bridge__$Service$get_profile_details_v_2$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_rewarded_for_referral(void* callback_wrapper, void __swift_bridge__$Service$get_rewarded_for_referral$async(void* callback_wrapper, void* ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$get_rewarded_for_signing_up(void* callback_wrapper, void __swift_bridge__$Service$get_rewarded_for_signing_up$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$get_session_type(void* callback_wrapper, void __swift_bridge__$Service$get_session_type$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_stable_memory_size(void* callback_wrapper, void __swift_bridge__$Service$get_stable_memory_size$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_success_history(void* callback_wrapper, void __swift_bridge__$Service$get_success_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_token_roots_of_this_user_with_pagination_cursor(void* callback_wrapper, void __swift_bridge__$Service$get_token_roots_of_this_user_with_pagination_cursor$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_user_caniser_cycle_balance(void* callback_wrapper, void __swift_bridge__$Service$get_user_caniser_cycle_balance$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_user_utility_token_transaction_history_with_pagination(void* callback_wrapper, void __swift_bridge__$Service$get_user_utility_token_transaction_history_with_pagination$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_utility_token_balance(void* callback_wrapper, void __swift_bridge__$Service$get_utility_token_balance$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_version(void* callback_wrapper, void __swift_bridge__$Service$get_version$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_version_number(void* callback_wrapper, void __swift_bridge__$Service$get_version_number$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_watch_history(void* callback_wrapper, void __swift_bridge__$Service$get_watch_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_well_known_principal_value(void* callback_wrapper, void __swift_bridge__$Service$get_well_known_principal_value$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$http_request(void* callback_wrapper, void __swift_bridge__$Service$http_request$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_namespace_keys(void* callback_wrapper, void __swift_bridge__$Service$list_namespace_keys$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$list_namespaces(void* callback_wrapper, void __swift_bridge__$Service$list_namespaces$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$load_snapshot(void* callback_wrapper, void __swift_bridge__$Service$load_snapshot$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$once_reenqueue_timers_for_pending_bet_outcomes(void* callback_wrapper, void __swift_bridge__$Service$once_reenqueue_timers_for_pending_bet_outcomes$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$read_key_value_pair(void* callback_wrapper, void __swift_bridge__$Service$read_key_value_pair$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$receive_and_save_snaphot(void* callback_wrapper, void __swift_bridge__$Service$receive_and_save_snaphot$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$receive_bet_from_bet_makers_canister(void* callback_wrapper, void __swift_bridge__$Service$receive_bet_from_bet_makers_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$receive_bet_winnings_when_distributed(void* callback_wrapper, void __swift_bridge__$Service$receive_bet_winnings_when_distributed$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$receive_data_from_hotornot(void* callback_wrapper, void __swift_bridge__$Service$receive_data_from_hotornot$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1, void* arg2);
void __swift_bridge__$Service$return_cycles_to_user_index_canister(void* callback_wrapper, void __swift_bridge__$Service$return_cycles_to_user_index_canister$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$save_snapshot_json(void* callback_wrapper, void __swift_bridge__$Service$save_snapshot_json$async(void* callback_wrapper, struct __swift_bridge__$ResultU32AndAgentError ret), void* self);
void __swift_bridge__$Service$settle_neurons_fund_participation(void* callback_wrapper, void __swift_bridge__$Service$settle_neurons_fund_participation$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$transfer_token_to_user_canister(void* callback_wrapper, void __swift_bridge__$Service$transfer_token_to_user_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1, void* arg2, void* arg3);
void __swift_bridge__$Service$transfer_tokens_and_posts(void* callback_wrapper, void __swift_bridge__$Service$transfer_tokens_and_posts$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$update_last_access_time(void* callback_wrapper, void __swift_bridge__$Service$update_last_access_time$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$update_last_canister_functionality_access_time(void* callback_wrapper, void __swift_bridge__$Service$update_last_canister_functionality_access_time$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$update_ml_feed_cache(void* callback_wrapper, void __swift_bridge__$Service$update_ml_feed_cache$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_post_add_view_details(void* callback_wrapper, void __swift_bridge__$Service$update_post_add_view_details$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$update_post_as_ready_to_view(void* callback_wrapper, void __swift_bridge__$Service$update_post_as_ready_to_view$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$update_post_increment_share_count(void* callback_wrapper, void __swift_bridge__$Service$update_post_increment_share_count$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$update_post_status(void* callback_wrapper, void __swift_bridge__$Service$update_post_status$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$update_post_toggle_like_status_by_caller(void* callback_wrapper, void __swift_bridge__$Service$update_post_toggle_like_status_by_caller$async(void* callback_wrapper, struct __swift_bridge__$ResultBoolAndAgentError ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$update_profile_display_details(void* callback_wrapper, void __swift_bridge__$Service$update_profile_display_details$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profile_owner(void* callback_wrapper, void __swift_bridge__$Service$update_profile_owner$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profile_set_unique_username_once(void* callback_wrapper, void __swift_bridge__$Service$update_profile_set_unique_username_once$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profiles_i_follow_toggle_list_with_specified_profile(void* callback_wrapper, void __swift_bridge__$Service$update_profiles_i_follow_toggle_list_with_specified_profile$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profiles_that_follow_me_toggle_list_with_specified_profile(void* callback_wrapper, void __swift_bridge__$Service$update_profiles_that_follow_me_toggle_list_with_specified_profile$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_referrer_details(void* callback_wrapper, void __swift_bridge__$Service$update_referrer_details$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_session_type(void* callback_wrapper, void __swift_bridge__$Service$update_session_type$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_success_history(void* callback_wrapper, void __swift_bridge__$Service$update_success_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_watch_history(void* callback_wrapper, void __swift_bridge__$Service$update_watch_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_well_known_principal(void* callback_wrapper, void __swift_bridge__$Service$update_well_known_principal$async(void* callback_wrapper, void* ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$write_key_value_pair(void* callback_wrapper, void __swift_bridge__$Service$write_key_value_pair$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1, void* arg2);
void __swift_bridge__$Service$write_multiple_key_value_pairs(void* callback_wrapper, void __swift_bridge__$Service$write_multiple_key_value_pairs$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
struct __private__ResultPtrAndPtr __swift_bridge__$get_secp256k1_identity(void* jwk_key);
struct __private__ResultPtrAndPtr __swift_bridge__$get_jwk_ec_key(void* json_string);
struct __private__ResultPtrAndPtr __swift_bridge__$delegated_identity_from_bytes(struct __private__FfiSlice data);
struct __private__ResultPtrAndPtr __swift_bridge__$delegated_identity_wire_from_bytes(struct __private__FfiSlice data);
struct __private__ResultPtrAndPtr __swift_bridge__$delegate_identity_with_max_age_public(void* parent_wire, void* new_pub_jwk_json, uint64_t max_age_seconds);
void* __swift_bridge__$delegated_identity_wire_to_json(void* wire);
void __swift_bridge__$authenticate_with_network(void* callback_wrapper, void __swift_bridge__$authenticate_with_network$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* auth);
void* __swift_bridge__$CanistersWrapper$get_canister_principal(void* self);
void* __swift_bridge__$CanistersWrapper$get_canister_principal_string(void* self);
void* __swift_bridge__$CanistersWrapper$get_user_principal(void* self);
void* __swift_bridge__$CanistersWrapper$get_user_principal_string(void* self);
bool __swift_bridge__$CanistersWrapper$is_created_from_service_canister(void* self);
uint64_t __swift_bridge__$CanistersWrapper$expiry_ns(void* self);
struct __private__OptionU64 __swift_bridge__$extract_time_as_double(void* result);
struct __private__ResultPtrAndPtr __swift_bridge__$get_principal(void* text);
void* __swift_bridge__$get_principal_from_identity(void* identity);
bool __swift_bridge__$GetPostsOfUserProfileError$is_reached_end_of_items_list(void* self);
bool __swift_bridge__$GetPostsOfUserProfileError$is_invalid_bounds_passed(void* self);
bool __swift_bridge__$GetPostsOfUserProfileError$is_exceeded_max_number_of_items_allowed_in_one_request(void* self);
bool __swift_bridge__$Result12$is_ok(void* self);
bool __swift_bridge__$Result12$is_err(void* self);
void* __swift_bridge__$Result12$ok_value(void* self);
void* __swift_bridge__$Result12$err_value(void* self);
void* __swift_bridge__$propic_from_principal(void* principal);
struct __private__ResultPtrAndPtr __swift_bridge__$yral_auth_login_hint(struct __private__FfiSlice data);
void __swift_bridge__$register_device(void* callback_wrapper, void __swift_bridge__$register_device$async(void* callback_wrapper, void* ret), void* identity, void* token);
void __swift_bridge__$unregister_device(void* callback_wrapper, void __swift_bridge__$unregister_device$async(void* callback_wrapper, void* ret), void* identity, void* token);
void* __swift_bridge__$RateLimitStatus$principal(void* self);
uint64_t __swift_bridge__$RateLimitStatus$request_count(void* self);
uint64_t __swift_bridge__$RateLimitStatus$window_start(void* self);
bool __swift_bridge__$RateLimitStatus$is_limited(void* self);
void __swift_bridge__$get_rate_limit_status_core(void* callback_wrapper, void __swift_bridge__$get_rate_limit_status_core$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* principal, void* property, bool is_registered, void* identity);
void __swift_bridge__$poll_video_generation_status(void* callback_wrapper, void __swift_bridge__$poll_video_generation_status$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* identity, void* key);
void* __swift_bridge__$get_polling_result_status(void* result);
void* __swift_bridge__$get_status_value(void* status);
void* __swift_bridge__$make_videogen_request_key(void* principal, uint64_t counter);
void* __swift_bridge__$VideoGenRequestKey$principal(void* self);
uint64_t __swift_bridge__$VideoGenRequestKey$counter(void* self);
struct __private__ResultPtrAndPtr __swift_bridge__$UserPostService$new(void* principal, void* identity);
void __swift_bridge__$UserPostService$get_individual_post_details_by_id(void* callback_wrapper, void __swift_bridge__$UserPostService$get_individual_post_details_by_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$UserPostService$get_posts_of_this_user_profile_with_pagination_cursor(void* callback_wrapper, void __swift_bridge__$UserPostService$get_posts_of_this_user_profile_with_pagination_cursor$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1, uint64_t arg2);
struct RustStr __swift_bridge__$PostServicePost$id(void* self);
void* __swift_bridge__$PostServicePost$status(void* self);
uint64_t __swift_bridge__$PostServicePost$share_count(void* self);
void* __swift_bridge__$PostServicePost$hashtags(void* self);
struct RustStr __swift_bridge__$PostServicePost$description(void* self);
struct RustStr __swift_bridge__$PostServicePost$video_uid(void* self);
void* __swift_bridge__$PostServicePost$creator_principal(void* self);
void* __swift_bridge__$PostServicePost$likes(void* self);
void* __swift_bridge__$PostServicePost$view_stats(void* self);
bool __swift_bridge__$is_banned_due_to_user_reporting(void* status);
bool __swift_bridge__$is_post_service_result_ok(void* result);
void* __swift_bridge__$post_service_result_ok_value(void* result);
void* __swift_bridge__$post_service_result_err_value(void* result);
bool __swift_bridge__$is_created_from_service_canister(void* canister_principal);
uint64_t __swift_bridge__$PostServicePostViewStatistics$total_view_count(void* self);
bool __swift_bridge__$is_post_service_result_vec_ok(void* result);
void* __swift_bridge__$post_service_result_vec_ok_value(void* result);
void* __swift_bridge__$post_service_result_vec_err_value(void* result);
bool __swift_bridge__$is_reached_end_of_items_list(void* error);
bool __swift_bridge__$is_invalid_bounds_passed(void* error);
bool __swift_bridge__$is_exceeded_max_number_of_items_allowed_in_one_request(void* error);
typedef enum __swift_bridge__$ResultU32AndAgentError$Tag {__swift_bridge__$ResultU32AndAgentError$ResultOk, __swift_bridge__$ResultU32AndAgentError$ResultErr} __swift_bridge__$ResultU32AndAgentError$Tag;
union __swift_bridge__$ResultU32AndAgentError$Fields {uint32_t ok; void* err;};
typedef struct __swift_bridge__$ResultU32AndAgentError{__swift_bridge__$ResultU32AndAgentError$Tag tag; union __swift_bridge__$ResultU32AndAgentError$Fields payload;} __swift_bridge__$ResultU32AndAgentError;
typedef enum __swift_bridge__$ResultBoolAndAgentError$Tag {__swift_bridge__$ResultBoolAndAgentError$ResultOk, __swift_bridge__$ResultBoolAndAgentError$ResultErr} __swift_bridge__$ResultBoolAndAgentError$Tag;
union __swift_bridge__$ResultBoolAndAgentError$Fields {bool ok; void* err;};
typedef struct __swift_bridge__$ResultBoolAndAgentError{__swift_bridge__$ResultBoolAndAgentError$Tag tag; union __swift_bridge__$ResultBoolAndAgentError$Fields payload;} __swift_bridge__$ResultBoolAndAgentError;


// File automatically generated by swift-bridge.
typedef struct LedgerService LedgerService;
void __swift_bridge__$LedgerService$_free(void* self);

void* __swift_bridge__$Vec_LedgerService$new(void);
void __swift_bridge__$Vec_LedgerService$drop(void* vec_ptr);
void __swift_bridge__$Vec_LedgerService$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_LedgerService$pop(void* vec_ptr);
void* __swift_bridge__$Vec_LedgerService$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_LedgerService$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_LedgerService$len(void* vec_ptr);
void* __swift_bridge__$Vec_LedgerService$as_ptr(void* vec_ptr);

typedef struct Account Account;
void __swift_bridge__$Account$_free(void* self);

void* __swift_bridge__$Vec_Account$new(void);
void __swift_bridge__$Vec_Account$drop(void* vec_ptr);
void __swift_bridge__$Vec_Account$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Account$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Account$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Account$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Account$len(void* vec_ptr);
void* __swift_bridge__$Vec_Account$as_ptr(void* vec_ptr);

typedef struct BalanceError BalanceError;
void __swift_bridge__$BalanceError$_free(void* self);

void* __swift_bridge__$Vec_BalanceError$new(void);
void __swift_bridge__$Vec_BalanceError$drop(void* vec_ptr);
void __swift_bridge__$Vec_BalanceError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BalanceError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BalanceError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BalanceError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BalanceError$len(void* vec_ptr);
void* __swift_bridge__$Vec_BalanceError$as_ptr(void* vec_ptr);

typedef struct Icrc1Tokens Icrc1Tokens;
void __swift_bridge__$Icrc1Tokens$_free(void* self);

void* __swift_bridge__$Vec_Icrc1Tokens$new(void);
void __swift_bridge__$Vec_Icrc1Tokens$drop(void* vec_ptr);
void __swift_bridge__$Vec_Icrc1Tokens$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Icrc1Tokens$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc1Tokens$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Icrc1Tokens$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Icrc1Tokens$len(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc1Tokens$as_ptr(void* vec_ptr);

void* __swift_bridge__$LedgerService$new_from_text(struct RustStr principal_text);
void __swift_bridge__$LedgerService$icrc_1_balance_of(void* callback_wrapper, void __swift_bridge__$LedgerService$icrc_1_balance_of$async(void* callback_wrapper, struct __swift_bridge__$ResultU32AndString ret), void* self, void* arg0);
void* __swift_bridge__$Account$new_from_text(struct RustStr owner_text);
typedef enum __swift_bridge__$ResultU32AndString$Tag {__swift_bridge__$ResultU32AndString$ResultOk, __swift_bridge__$ResultU32AndString$ResultErr} __swift_bridge__$ResultU32AndString$Tag;
union __swift_bridge__$ResultU32AndString$Fields {uint32_t ok; void* err;};
typedef struct __swift_bridge__$ResultU32AndString{__swift_bridge__$ResultU32AndString$Tag tag; union __swift_bridge__$ResultU32AndString$Fields payload;} __swift_bridge__$ResultU32AndString;


