// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
typedef struct VideoGenRequestStatus VideoGenRequestStatus;
void __swift_bridge__$VideoGenRequestStatus$_free(void* self);

void* __swift_bridge__$Vec_VideoGenRequestStatus$new(void);
void __swift_bridge__$Vec_VideoGenRequestStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_VideoGenRequestStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_VideoGenRequestStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_VideoGenRequestStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_VideoGenRequestStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestStatus$as_ptr(void* vec_ptr);

typedef struct RateLimitsResult2 RateLimitsResult2;
void __swift_bridge__$RateLimitsResult2$_free(void* self);

void* __swift_bridge__$Vec_RateLimitsResult2$new(void);
void __swift_bridge__$Vec_RateLimitsResult2$drop(void* vec_ptr);
void __swift_bridge__$Vec_RateLimitsResult2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RateLimitsResult2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitsResult2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RateLimitsResult2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RateLimitsResult2$len(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitsResult2$as_ptr(void* vec_ptr);

typedef struct KeyValuePair KeyValuePair;
void __swift_bridge__$KeyValuePair$_free(void* self);

void* __swift_bridge__$Vec_KeyValuePair$new(void);
void __swift_bridge__$Vec_KeyValuePair$drop(void* vec_ptr);
void __swift_bridge__$Vec_KeyValuePair$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_KeyValuePair$pop(void* vec_ptr);
void* __swift_bridge__$Vec_KeyValuePair$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_KeyValuePair$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_KeyValuePair$len(void* vec_ptr);
void* __swift_bridge__$Vec_KeyValuePair$as_ptr(void* vec_ptr);

typedef struct U64Wrapper U64Wrapper;
void __swift_bridge__$U64Wrapper$_free(void* self);

void* __swift_bridge__$Vec_U64Wrapper$new(void);
void __swift_bridge__$Vec_U64Wrapper$drop(void* vec_ptr);
void __swift_bridge__$Vec_U64Wrapper$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_U64Wrapper$pop(void* vec_ptr);
void* __swift_bridge__$Vec_U64Wrapper$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_U64Wrapper$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_U64Wrapper$len(void* vec_ptr);
void* __swift_bridge__$Vec_U64Wrapper$as_ptr(void* vec_ptr);

typedef struct PrincipalResult PrincipalResult;
void __swift_bridge__$PrincipalResult$_free(void* self);

void* __swift_bridge__$Vec_PrincipalResult$new(void);
void __swift_bridge__$Vec_PrincipalResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_PrincipalResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PrincipalResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PrincipalResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PrincipalResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalResult$as_ptr(void* vec_ptr);

typedef struct Secp256k1Error Secp256k1Error;
void __swift_bridge__$Secp256k1Error$_free(void* self);

void* __swift_bridge__$Vec_Secp256k1Error$new(void);
void __swift_bridge__$Vec_Secp256k1Error$drop(void* vec_ptr);
void __swift_bridge__$Vec_Secp256k1Error$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Secp256k1Error$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Error$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Secp256k1Error$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Secp256k1Error$len(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Error$as_ptr(void* vec_ptr);

typedef struct DelegatedIdentity DelegatedIdentity;
void __swift_bridge__$DelegatedIdentity$_free(void* self);

void* __swift_bridge__$Vec_DelegatedIdentity$new(void);
void __swift_bridge__$Vec_DelegatedIdentity$drop(void* vec_ptr);
void __swift_bridge__$Vec_DelegatedIdentity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DelegatedIdentity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DelegatedIdentity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DelegatedIdentity$len(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentity$as_ptr(void* vec_ptr);

typedef struct Secp256k1Identity Secp256k1Identity;
void __swift_bridge__$Secp256k1Identity$_free(void* self);

void* __swift_bridge__$Vec_Secp256k1Identity$new(void);
void __swift_bridge__$Vec_Secp256k1Identity$drop(void* vec_ptr);
void __swift_bridge__$Vec_Secp256k1Identity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Secp256k1Identity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Identity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Secp256k1Identity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Secp256k1Identity$len(void* vec_ptr);
void* __swift_bridge__$Vec_Secp256k1Identity$as_ptr(void* vec_ptr);

typedef struct JwkEcKey JwkEcKey;
void __swift_bridge__$JwkEcKey$_free(void* self);

void* __swift_bridge__$Vec_JwkEcKey$new(void);
void __swift_bridge__$Vec_JwkEcKey$drop(void* vec_ptr);
void __swift_bridge__$Vec_JwkEcKey$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_JwkEcKey$pop(void* vec_ptr);
void* __swift_bridge__$Vec_JwkEcKey$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_JwkEcKey$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_JwkEcKey$len(void* vec_ptr);
void* __swift_bridge__$Vec_JwkEcKey$as_ptr(void* vec_ptr);

typedef struct Nat Nat;
void __swift_bridge__$Nat$_free(void* self);

void* __swift_bridge__$Vec_Nat$new(void);
void __swift_bridge__$Vec_Nat$drop(void* vec_ptr);
void __swift_bridge__$Vec_Nat$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Nat$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Nat$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Nat$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Nat$len(void* vec_ptr);
void* __swift_bridge__$Vec_Nat$as_ptr(void* vec_ptr);

typedef struct ByteBuf ByteBuf;
void __swift_bridge__$ByteBuf$_free(void* self);

void* __swift_bridge__$Vec_ByteBuf$new(void);
void __swift_bridge__$Vec_ByteBuf$drop(void* vec_ptr);
void __swift_bridge__$Vec_ByteBuf$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ByteBuf$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ByteBuf$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ByteBuf$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ByteBuf$len(void* vec_ptr);
void* __swift_bridge__$Vec_ByteBuf$as_ptr(void* vec_ptr);

typedef struct Principal Principal;
void __swift_bridge__$Principal$_free(void* self);

void* __swift_bridge__$Vec_Principal$new(void);
void __swift_bridge__$Vec_Principal$drop(void* vec_ptr);
void __swift_bridge__$Vec_Principal$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Principal$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Principal$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Principal$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Principal$len(void* vec_ptr);
void* __swift_bridge__$Vec_Principal$as_ptr(void* vec_ptr);

typedef struct PrincipalError PrincipalError;
void __swift_bridge__$PrincipalError$_free(void* self);

void* __swift_bridge__$Vec_PrincipalError$new(void);
void __swift_bridge__$Vec_PrincipalError$drop(void* vec_ptr);
void __swift_bridge__$Vec_PrincipalError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PrincipalError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PrincipalError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PrincipalError$len(void* vec_ptr);
void* __swift_bridge__$Vec_PrincipalError$as_ptr(void* vec_ptr);

typedef struct AgentError AgentError;
void __swift_bridge__$AgentError$_free(void* self);

void* __swift_bridge__$Vec_AgentError$new(void);
void __swift_bridge__$Vec_AgentError$drop(void* vec_ptr);
void __swift_bridge__$Vec_AgentError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AgentError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AgentError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AgentError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AgentError$len(void* vec_ptr);
void* __swift_bridge__$Vec_AgentError$as_ptr(void* vec_ptr);

typedef struct FollowerArg FollowerArg;
void __swift_bridge__$FollowerArg$_free(void* self);

void* __swift_bridge__$Vec_FollowerArg$new(void);
void __swift_bridge__$Vec_FollowerArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowerArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowerArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowerArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowerArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowerArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowerArg$as_ptr(void* vec_ptr);

typedef struct Result27 Result27;
void __swift_bridge__$Result27$_free(void* self);

void* __swift_bridge__$Vec_Result27$new(void);
void __swift_bridge__$Vec_Result27$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result27$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result27$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result27$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result27$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result27$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result27$as_ptr(void* vec_ptr);

typedef struct UpdateProfileSetUniqueUsernameError UpdateProfileSetUniqueUsernameError;
void __swift_bridge__$UpdateProfileSetUniqueUsernameError$_free(void* self);

void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$new(void);
void __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileSetUniqueUsernameError$as_ptr(void* vec_ptr);

typedef struct Result26 Result26;
void __swift_bridge__$Result26$_free(void* self);

void* __swift_bridge__$Vec_Result26$new(void);
void __swift_bridge__$Vec_Result26$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result26$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result26$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result26$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result26$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result26$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result26$as_ptr(void* vec_ptr);

typedef struct Result25 Result25;
void __swift_bridge__$Result25$_free(void* self);

void* __swift_bridge__$Vec_Result25$new(void);
void __swift_bridge__$Vec_Result25$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result25$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result25$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result25$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result25$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result25$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result25$as_ptr(void* vec_ptr);

typedef struct UpdateProfileDetailsError UpdateProfileDetailsError;
void __swift_bridge__$UpdateProfileDetailsError$_free(void* self);

void* __swift_bridge__$Vec_UpdateProfileDetailsError$new(void);
void __swift_bridge__$Vec_UpdateProfileDetailsError$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpdateProfileDetailsError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpdateProfileDetailsError$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpdateProfileDetailsError$as_ptr(void* vec_ptr);

typedef struct UserProfileUpdateDetailsFromFrontend UserProfileUpdateDetailsFromFrontend;
void __swift_bridge__$UserProfileUpdateDetailsFromFrontend$_free(void* self);

void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$new(void);
void __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileUpdateDetailsFromFrontend$as_ptr(void* vec_ptr);

typedef struct PostViewDetailsFromFrontend PostViewDetailsFromFrontend;
void __swift_bridge__$PostViewDetailsFromFrontend$_free(void* self);

void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$new(void);
void __swift_bridge__$Vec_PostViewDetailsFromFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostViewDetailsFromFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostViewDetailsFromFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewDetailsFromFrontend$as_ptr(void* vec_ptr);

typedef struct Result24 Result24;
void __swift_bridge__$Result24$_free(void* self);

void* __swift_bridge__$Vec_Result24$new(void);
void __swift_bridge__$Vec_Result24$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result24$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result24$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result24$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result24$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result24$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result24$as_ptr(void* vec_ptr);

typedef struct Result23 Result23;
void __swift_bridge__$Result23$_free(void* self);

void* __swift_bridge__$Vec_Result23$new(void);
void __swift_bridge__$Vec_Result23$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result23$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result23$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result23$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result23$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result23$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result23$as_ptr(void* vec_ptr);

typedef struct SettleNeuronsFundParticipationResponse SettleNeuronsFundParticipationResponse;
void __swift_bridge__$SettleNeuronsFundParticipationResponse$_free(void* self);

void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$new(void);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResponse$as_ptr(void* vec_ptr);

typedef struct Result22 Result22;
void __swift_bridge__$Result22$_free(void* self);

void* __swift_bridge__$Vec_Result22$new(void);
void __swift_bridge__$Vec_Result22$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result22$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result22$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result22$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result22$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result22$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result22$as_ptr(void* vec_ptr);

typedef struct GovernanceError GovernanceError;
void __swift_bridge__$GovernanceError$_free(void* self);

void* __swift_bridge__$Vec_GovernanceError$new(void);
void __swift_bridge__$Vec_GovernanceError$drop(void* vec_ptr);
void __swift_bridge__$Vec_GovernanceError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GovernanceError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GovernanceError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GovernanceError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GovernanceError$len(void* vec_ptr);
void* __swift_bridge__$Vec_GovernanceError$as_ptr(void* vec_ptr);

typedef struct Ok Ok;
void __swift_bridge__$Ok$_free(void* self);

void* __swift_bridge__$Vec_Ok$new(void);
void __swift_bridge__$Vec_Ok$drop(void* vec_ptr);
void __swift_bridge__$Vec_Ok$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Ok$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Ok$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Ok$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Ok$len(void* vec_ptr);
void* __swift_bridge__$Vec_Ok$as_ptr(void* vec_ptr);

typedef struct NeuronsFundNeuron NeuronsFundNeuron;
void __swift_bridge__$NeuronsFundNeuron$_free(void* self);

void* __swift_bridge__$Vec_NeuronsFundNeuron$new(void);
void __swift_bridge__$Vec_NeuronsFundNeuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronsFundNeuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronsFundNeuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundNeuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronsFundNeuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronsFundNeuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundNeuron$as_ptr(void* vec_ptr);

typedef struct SettleNeuronsFundParticipationRequest SettleNeuronsFundParticipationRequest;
void __swift_bridge__$SettleNeuronsFundParticipationRequest$_free(void* self);

void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$new(void);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationRequest$as_ptr(void* vec_ptr);

typedef struct Result21 Result21;
void __swift_bridge__$Result21$_free(void* self);

void* __swift_bridge__$Vec_Result21$new(void);
void __swift_bridge__$Vec_Result21$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result21$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result21$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result21$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result21$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result21$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result21$as_ptr(void* vec_ptr);

typedef struct Committed Committed;
void __swift_bridge__$Committed$_free(void* self);

void* __swift_bridge__$Vec_Committed$new(void);
void __swift_bridge__$Vec_Committed$drop(void* vec_ptr);
void __swift_bridge__$Vec_Committed$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Committed$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Committed$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Committed$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Committed$len(void* vec_ptr);
void* __swift_bridge__$Vec_Committed$as_ptr(void* vec_ptr);

typedef struct Result20 Result20;
void __swift_bridge__$Result20$_free(void* self);

void* __swift_bridge__$Vec_Result20$new(void);
void __swift_bridge__$Vec_Result20$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result20$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result20$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result20$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result20$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result20$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result20$as_ptr(void* vec_ptr);

typedef struct MigrationErrors MigrationErrors;
void __swift_bridge__$MigrationErrors$_free(void* self);

void* __swift_bridge__$Vec_MigrationErrors$new(void);
void __swift_bridge__$Vec_MigrationErrors$drop(void* vec_ptr);
void __swift_bridge__$Vec_MigrationErrors$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MigrationErrors$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationErrors$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MigrationErrors$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MigrationErrors$len(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationErrors$as_ptr(void* vec_ptr);

typedef struct Result19 Result19;
void __swift_bridge__$Result19$_free(void* self);

void* __swift_bridge__$Vec_Result19$new(void);
void __swift_bridge__$Vec_Result19$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result19$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result19$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result19$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result19$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result19$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result19$as_ptr(void* vec_ptr);

typedef struct Result18 Result18;
void __swift_bridge__$Result18$_free(void* self);

void* __swift_bridge__$Vec_Result18$new(void);
void __swift_bridge__$Vec_Result18$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result18$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result18$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result18$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result18$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result18$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result18$as_ptr(void* vec_ptr);

typedef struct HttpResponse HttpResponse;
void __swift_bridge__$HttpResponse$_free(void* self);

void* __swift_bridge__$Vec_HttpResponse$new(void);
void __swift_bridge__$Vec_HttpResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_HttpResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HttpResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HttpResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HttpResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HttpResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_HttpResponse$as_ptr(void* vec_ptr);

typedef struct HttpRequest HttpRequest;
void __swift_bridge__$HttpRequest$_free(void* self);

void* __swift_bridge__$Vec_HttpRequest$new(void);
void __swift_bridge__$Vec_HttpRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_HttpRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HttpRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HttpRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HttpRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HttpRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_HttpRequest$as_ptr(void* vec_ptr);

typedef struct KnownPrincipalType KnownPrincipalType;
void __swift_bridge__$KnownPrincipalType$_free(void* self);

void* __swift_bridge__$Vec_KnownPrincipalType$new(void);
void __swift_bridge__$Vec_KnownPrincipalType$drop(void* vec_ptr);
void __swift_bridge__$Vec_KnownPrincipalType$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_KnownPrincipalType$pop(void* vec_ptr);
void* __swift_bridge__$Vec_KnownPrincipalType$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_KnownPrincipalType$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_KnownPrincipalType$len(void* vec_ptr);
void* __swift_bridge__$Vec_KnownPrincipalType$as_ptr(void* vec_ptr);

typedef struct Result17 Result17;
void __swift_bridge__$Result17$_free(void* self);

void* __swift_bridge__$Vec_Result17$new(void);
void __swift_bridge__$Vec_Result17$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result17$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result17$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result17$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result17$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result17$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result17$as_ptr(void* vec_ptr);

typedef struct WatchHistoryItem WatchHistoryItem;
void __swift_bridge__$WatchHistoryItem$_free(void* self);

void* __swift_bridge__$Vec_WatchHistoryItem$new(void);
void __swift_bridge__$Vec_WatchHistoryItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_WatchHistoryItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_WatchHistoryItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_WatchHistoryItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_WatchHistoryItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_WatchHistoryItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_WatchHistoryItem$as_ptr(void* vec_ptr);

typedef struct Result16 Result16;
void __swift_bridge__$Result16$_free(void* self);

void* __swift_bridge__$Vec_Result16$new(void);
void __swift_bridge__$Vec_Result16$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result16$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result16$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result16$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result16$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result16$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result16$as_ptr(void* vec_ptr);

typedef struct TokenEvent TokenEvent;
void __swift_bridge__$TokenEvent$_free(void* self);

void* __swift_bridge__$Vec_TokenEvent$new(void);
void __swift_bridge__$Vec_TokenEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_TokenEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TokenEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TokenEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TokenEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TokenEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_TokenEvent$as_ptr(void* vec_ptr);

typedef struct HotOrNotOutcomePayoutEvent HotOrNotOutcomePayoutEvent;
void __swift_bridge__$HotOrNotOutcomePayoutEvent$_free(void* self);

void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$new(void);
void __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotOutcomePayoutEvent$as_ptr(void* vec_ptr);

typedef struct MintEvent MintEvent;
void __swift_bridge__$MintEvent$_free(void* self);

void* __swift_bridge__$Vec_MintEvent$new(void);
void __swift_bridge__$Vec_MintEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_MintEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MintEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MintEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MintEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MintEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_MintEvent$as_ptr(void* vec_ptr);

typedef struct StakeEvent StakeEvent;
void __swift_bridge__$StakeEvent$_free(void* self);

void* __swift_bridge__$Vec_StakeEvent$new(void);
void __swift_bridge__$Vec_StakeEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_StakeEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_StakeEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_StakeEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_StakeEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_StakeEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_StakeEvent$as_ptr(void* vec_ptr);

typedef struct Result15 Result15;
void __swift_bridge__$Result15$_free(void* self);

void* __swift_bridge__$Vec_Result15$new(void);
void __swift_bridge__$Vec_Result15$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result15$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result15$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result15$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result15$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result15$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result15$as_ptr(void* vec_ptr);

typedef struct PaginationError PaginationError;
void __swift_bridge__$PaginationError$_free(void* self);

void* __swift_bridge__$Vec_PaginationError$new(void);
void __swift_bridge__$Vec_PaginationError$drop(void* vec_ptr);
void __swift_bridge__$Vec_PaginationError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PaginationError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PaginationError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PaginationError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PaginationError$len(void* vec_ptr);
void* __swift_bridge__$Vec_PaginationError$as_ptr(void* vec_ptr);

typedef struct Result14 Result14;
void __swift_bridge__$Result14$_free(void* self);

void* __swift_bridge__$Vec_Result14$new(void);
void __swift_bridge__$Vec_Result14$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result14$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result14$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result14$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result14$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result14$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result14$as_ptr(void* vec_ptr);

typedef struct SuccessHistoryItemV1 SuccessHistoryItemV1;
void __swift_bridge__$SuccessHistoryItemV1$_free(void* self);

void* __swift_bridge__$Vec_SuccessHistoryItemV1$new(void);
void __swift_bridge__$Vec_SuccessHistoryItemV1$drop(void* vec_ptr);
void __swift_bridge__$Vec_SuccessHistoryItemV1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SuccessHistoryItemV1$len(void* vec_ptr);
void* __swift_bridge__$Vec_SuccessHistoryItemV1$as_ptr(void* vec_ptr);

typedef struct Result13 Result13;
void __swift_bridge__$Result13$_free(void* self);

void* __swift_bridge__$Vec_Result13$new(void);
void __swift_bridge__$Vec_Result13$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result13$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result13$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result13$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result13$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result13$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result13$as_ptr(void* vec_ptr);

typedef struct SessionType SessionType;
void __swift_bridge__$SessionType$_free(void* self);

void* __swift_bridge__$Vec_SessionType$new(void);
void __swift_bridge__$Vec_SessionType$drop(void* vec_ptr);
void __swift_bridge__$Vec_SessionType$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SessionType$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SessionType$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SessionType$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SessionType$len(void* vec_ptr);
void* __swift_bridge__$Vec_SessionType$as_ptr(void* vec_ptr);

typedef struct UserProfileDetailsForFrontendV2 UserProfileDetailsForFrontendV2;
void __swift_bridge__$UserProfileDetailsForFrontendV2$_free(void* self);

void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$new(void);
void __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontendV2$as_ptr(void* vec_ptr);

typedef struct MigrationInfo MigrationInfo;
void __swift_bridge__$MigrationInfo$_free(void* self);

void* __swift_bridge__$Vec_MigrationInfo$new(void);
void __swift_bridge__$Vec_MigrationInfo$drop(void* vec_ptr);
void __swift_bridge__$Vec_MigrationInfo$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MigrationInfo$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationInfo$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MigrationInfo$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MigrationInfo$len(void* vec_ptr);
void* __swift_bridge__$Vec_MigrationInfo$as_ptr(void* vec_ptr);

typedef struct UserProfileDetailsForFrontend UserProfileDetailsForFrontend;
void __swift_bridge__$UserProfileDetailsForFrontend$_free(void* self);

void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$new(void);
void __swift_bridge__$Vec_UserProfileDetailsForFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileDetailsForFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileDetailsForFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileDetailsForFrontend$as_ptr(void* vec_ptr);

typedef struct UserCanisterDetails UserCanisterDetails;
void __swift_bridge__$UserCanisterDetails$_free(void* self);

void* __swift_bridge__$Vec_UserCanisterDetails$new(void);
void __swift_bridge__$Vec_UserCanisterDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserCanisterDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserCanisterDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserCanisterDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserCanisterDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserCanisterDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserCanisterDetails$as_ptr(void* vec_ptr);

typedef struct UserProfileGlobalStats UserProfileGlobalStats;
void __swift_bridge__$UserProfileGlobalStats$_free(void* self);

void* __swift_bridge__$Vec_UserProfileGlobalStats$new(void);
void __swift_bridge__$Vec_UserProfileGlobalStats$drop(void* vec_ptr);
void __swift_bridge__$Vec_UserProfileGlobalStats$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UserProfileGlobalStats$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileGlobalStats$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UserProfileGlobalStats$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UserProfileGlobalStats$len(void* vec_ptr);
void* __swift_bridge__$Vec_UserProfileGlobalStats$as_ptr(void* vec_ptr);

typedef struct FollowEntry FollowEntry;
void __swift_bridge__$FollowEntry$_free(void* self);

void* __swift_bridge__$Vec_FollowEntry$new(void);
void __swift_bridge__$Vec_FollowEntry$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowEntry$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowEntry$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntry$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowEntry$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowEntry$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntry$as_ptr(void* vec_ptr);

typedef struct FollowEntryDetail FollowEntryDetail;
void __swift_bridge__$FollowEntryDetail$_free(void* self);

void* __swift_bridge__$Vec_FollowEntryDetail$new(void);
void __swift_bridge__$Vec_FollowEntryDetail$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowEntryDetail$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowEntryDetail$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntryDetail$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowEntryDetail$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowEntryDetail$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowEntryDetail$as_ptr(void* vec_ptr);

typedef struct MlFeedCacheItem MlFeedCacheItem;
void __swift_bridge__$MlFeedCacheItem$_free(void* self);

void* __swift_bridge__$Vec_MlFeedCacheItem$new(void);
void __swift_bridge__$Vec_MlFeedCacheItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_MlFeedCacheItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MlFeedCacheItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MlFeedCacheItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MlFeedCacheItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MlFeedCacheItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_MlFeedCacheItem$as_ptr(void* vec_ptr);

typedef struct Result11 Result11;
void __swift_bridge__$Result11$_free(void* self);

void* __swift_bridge__$Vec_Result11$new(void);
void __swift_bridge__$Vec_Result11$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result11$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result11$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result11$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result11$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result11$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result11$as_ptr(void* vec_ptr);

typedef struct PlacedBetDetailResult PlacedBetDetailResult;
void __swift_bridge__$PlacedBetDetailResult$_free(void* self);

void* __swift_bridge__$Vec_PlacedBetDetailResult$new(void);
void __swift_bridge__$Vec_PlacedBetDetailResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlacedBetDetailResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlacedBetDetailResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetailResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlacedBetDetailResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlacedBetDetailResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetailResult$as_ptr(void* vec_ptr);

typedef struct PlacedBetDetail PlacedBetDetail;
void __swift_bridge__$PlacedBetDetail$_free(void* self);

void* __swift_bridge__$Vec_PlacedBetDetail$new(void);
void __swift_bridge__$Vec_PlacedBetDetail$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlacedBetDetail$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlacedBetDetail$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetail$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlacedBetDetail$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlacedBetDetail$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlacedBetDetail$as_ptr(void* vec_ptr);

typedef struct BetOutcomeForBetMaker BetOutcomeForBetMaker;
void __swift_bridge__$BetOutcomeForBetMaker$_free(void* self);

void* __swift_bridge__$Vec_BetOutcomeForBetMaker$new(void);
void __swift_bridge__$Vec_BetOutcomeForBetMaker$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetOutcomeForBetMaker$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetOutcomeForBetMaker$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetOutcomeForBetMaker$as_ptr(void* vec_ptr);

typedef struct Result10 Result10;
void __swift_bridge__$Result10$_free(void* self);

void* __swift_bridge__$Vec_Result10$new(void);
void __swift_bridge__$Vec_Result10$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result10$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result10$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result10$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result10$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result10$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result10$as_ptr(void* vec_ptr);

typedef struct Post Post;
void __swift_bridge__$Post$_free(void* self);

void* __swift_bridge__$Vec_Post$new(void);
void __swift_bridge__$Vec_Post$drop(void* vec_ptr);
void __swift_bridge__$Vec_Post$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Post$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Post$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Post$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Post$len(void* vec_ptr);
void* __swift_bridge__$Vec_Post$as_ptr(void* vec_ptr);

typedef struct HotOrNotDetails HotOrNotDetails;
void __swift_bridge__$HotOrNotDetails$_free(void* self);

void* __swift_bridge__$Vec_HotOrNotDetails$new(void);
void __swift_bridge__$Vec_HotOrNotDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_HotOrNotDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_HotOrNotDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_HotOrNotDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_HotOrNotDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_HotOrNotDetails$as_ptr(void* vec_ptr);

typedef struct SlotDetails SlotDetails;
void __swift_bridge__$SlotDetails$_free(void* self);

void* __swift_bridge__$Vec_SlotDetails$new(void);
void __swift_bridge__$Vec_SlotDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_SlotDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SlotDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SlotDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SlotDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SlotDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_SlotDetails$as_ptr(void* vec_ptr);

typedef struct RoomDetails RoomDetails;
void __swift_bridge__$RoomDetails$_free(void* self);

void* __swift_bridge__$Vec_RoomDetails$new(void);
void __swift_bridge__$Vec_RoomDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_RoomDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RoomDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RoomDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RoomDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RoomDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_RoomDetails$as_ptr(void* vec_ptr);

typedef struct RoomBetPossibleOutcomes RoomBetPossibleOutcomes;
void __swift_bridge__$RoomBetPossibleOutcomes$_free(void* self);

void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$new(void);
void __swift_bridge__$Vec_RoomBetPossibleOutcomes$drop(void* vec_ptr);
void __swift_bridge__$Vec_RoomBetPossibleOutcomes$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RoomBetPossibleOutcomes$len(void* vec_ptr);
void* __swift_bridge__$Vec_RoomBetPossibleOutcomes$as_ptr(void* vec_ptr);

typedef struct AggregateStats AggregateStats;
void __swift_bridge__$AggregateStats$_free(void* self);

void* __swift_bridge__$Vec_AggregateStats$new(void);
void __swift_bridge__$Vec_AggregateStats$drop(void* vec_ptr);
void __swift_bridge__$Vec_AggregateStats$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AggregateStats$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AggregateStats$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AggregateStats$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AggregateStats$len(void* vec_ptr);
void* __swift_bridge__$Vec_AggregateStats$as_ptr(void* vec_ptr);

typedef struct PostViewStatistics PostViewStatistics;
void __swift_bridge__$PostViewStatistics$_free(void* self);

void* __swift_bridge__$Vec_PostViewStatistics$new(void);
void __swift_bridge__$Vec_PostViewStatistics$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostViewStatistics$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostViewStatistics$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewStatistics$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostViewStatistics$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostViewStatistics$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostViewStatistics$as_ptr(void* vec_ptr);

typedef struct FeedScore FeedScore;
void __swift_bridge__$FeedScore$_free(void* self);

void* __swift_bridge__$Vec_FeedScore$new(void);
void __swift_bridge__$Vec_FeedScore$drop(void* vec_ptr);
void __swift_bridge__$Vec_FeedScore$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FeedScore$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FeedScore$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FeedScore$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FeedScore$len(void* vec_ptr);
void* __swift_bridge__$Vec_FeedScore$as_ptr(void* vec_ptr);

typedef struct DeviceIdentity DeviceIdentity;
void __swift_bridge__$DeviceIdentity$_free(void* self);

void* __swift_bridge__$Vec_DeviceIdentity$new(void);
void __swift_bridge__$Vec_DeviceIdentity$drop(void* vec_ptr);
void __swift_bridge__$Vec_DeviceIdentity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DeviceIdentity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DeviceIdentity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DeviceIdentity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DeviceIdentity$len(void* vec_ptr);
void* __swift_bridge__$Vec_DeviceIdentity$as_ptr(void* vec_ptr);

typedef struct Result9 Result9;
void __swift_bridge__$Result9$_free(void* self);

void* __swift_bridge__$Vec_Result9$new(void);
void __swift_bridge__$Vec_Result9$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result9$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result9$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result9$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result9$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result9$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result9$as_ptr(void* vec_ptr);

typedef struct BetDetails BetDetails;
void __swift_bridge__$BetDetails$_free(void* self);

void* __swift_bridge__$Vec_BetDetails$new(void);
void __swift_bridge__$Vec_BetDetails$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetDetails$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetDetails$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetDetails$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetDetails$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetDetails$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetDetails$as_ptr(void* vec_ptr);

typedef struct BetPayout BetPayout;
void __swift_bridge__$BetPayout$_free(void* self);

void* __swift_bridge__$Vec_BetPayout$new(void);
void __swift_bridge__$Vec_BetPayout$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetPayout$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetPayout$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetPayout$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetPayout$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetPayout$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetPayout$as_ptr(void* vec_ptr);

typedef struct BetMakerInformedStatus BetMakerInformedStatus;
void __swift_bridge__$BetMakerInformedStatus$_free(void* self);

void* __swift_bridge__$Vec_BetMakerInformedStatus$new(void);
void __swift_bridge__$Vec_BetMakerInformedStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetMakerInformedStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetMakerInformedStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetMakerInformedStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetMakerInformedStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetMakerInformedStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetMakerInformedStatus$as_ptr(void* vec_ptr);

typedef struct Result8 Result8;
void __swift_bridge__$Result8$_free(void* self);

void* __swift_bridge__$Vec_Result8$new(void);
void __swift_bridge__$Vec_Result8$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result8$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result8$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result8$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result8$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result8$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result8$as_ptr(void* vec_ptr);

typedef struct FollowAnotherUserProfileError FollowAnotherUserProfileError;
void __swift_bridge__$FollowAnotherUserProfileError$_free(void* self);

void* __swift_bridge__$Vec_FollowAnotherUserProfileError$new(void);
void __swift_bridge__$Vec_FollowAnotherUserProfileError$drop(void* vec_ptr);
void __swift_bridge__$Vec_FollowAnotherUserProfileError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FollowAnotherUserProfileError$len(void* vec_ptr);
void* __swift_bridge__$Vec_FollowAnotherUserProfileError$as_ptr(void* vec_ptr);

typedef struct FolloweeArg FolloweeArg;
void __swift_bridge__$FolloweeArg$_free(void* self);

void* __swift_bridge__$Vec_FolloweeArg$new(void);
void __swift_bridge__$Vec_FolloweeArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_FolloweeArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FolloweeArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FolloweeArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FolloweeArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FolloweeArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_FolloweeArg$as_ptr(void* vec_ptr);

typedef struct Result7 Result7;
void __swift_bridge__$Result7$_free(void* self);

void* __swift_bridge__$Vec_Result7$new(void);
void __swift_bridge__$Vec_Result7$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result7$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result7$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result7$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result7$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result7$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result7$as_ptr(void* vec_ptr);

typedef struct CdaoDeployError CdaoDeployError;
void __swift_bridge__$CdaoDeployError$_free(void* self);

void* __swift_bridge__$Vec_CdaoDeployError$new(void);
void __swift_bridge__$Vec_CdaoDeployError$drop(void* vec_ptr);
void __swift_bridge__$Vec_CdaoDeployError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CdaoDeployError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoDeployError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CdaoDeployError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CdaoDeployError$len(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoDeployError$as_ptr(void* vec_ptr);

typedef struct DeployedCdaoCanisters DeployedCdaoCanisters;
void __swift_bridge__$DeployedCdaoCanisters$_free(void* self);

void* __swift_bridge__$Vec_DeployedCdaoCanisters$new(void);
void __swift_bridge__$Vec_DeployedCdaoCanisters$drop(void* vec_ptr);
void __swift_bridge__$Vec_DeployedCdaoCanisters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DeployedCdaoCanisters$len(void* vec_ptr);
void* __swift_bridge__$Vec_DeployedCdaoCanisters$as_ptr(void* vec_ptr);

typedef struct SnsInitPayload SnsInitPayload;
void __swift_bridge__$SnsInitPayload$_free(void* self);

void* __swift_bridge__$Vec_SnsInitPayload$new(void);
void __swift_bridge__$Vec_SnsInitPayload$drop(void* vec_ptr);
void __swift_bridge__$Vec_SnsInitPayload$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SnsInitPayload$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SnsInitPayload$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SnsInitPayload$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SnsInitPayload$len(void* vec_ptr);
void* __swift_bridge__$Vec_SnsInitPayload$as_ptr(void* vec_ptr);

typedef struct Countries Countries;
void __swift_bridge__$Countries$_free(void* self);

void* __swift_bridge__$Vec_Countries$new(void);
void __swift_bridge__$Vec_Countries$drop(void* vec_ptr);
void __swift_bridge__$Vec_Countries$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Countries$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Countries$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Countries$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Countries$len(void* vec_ptr);
void* __swift_bridge__$Vec_Countries$as_ptr(void* vec_ptr);

typedef struct InitialTokenDistribution InitialTokenDistribution;
void __swift_bridge__$InitialTokenDistribution$_free(void* self);

void* __swift_bridge__$Vec_InitialTokenDistribution$new(void);
void __swift_bridge__$Vec_InitialTokenDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_InitialTokenDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_InitialTokenDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_InitialTokenDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_InitialTokenDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_InitialTokenDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_InitialTokenDistribution$as_ptr(void* vec_ptr);

typedef struct FractionalDeveloperVotingPower FractionalDeveloperVotingPower;
void __swift_bridge__$FractionalDeveloperVotingPower$_free(void* self);

void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$new(void);
void __swift_bridge__$Vec_FractionalDeveloperVotingPower$drop(void* vec_ptr);
void __swift_bridge__$Vec_FractionalDeveloperVotingPower$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FractionalDeveloperVotingPower$len(void* vec_ptr);
void* __swift_bridge__$Vec_FractionalDeveloperVotingPower$as_ptr(void* vec_ptr);

typedef struct SwapDistribution SwapDistribution;
void __swift_bridge__$SwapDistribution$_free(void* self);

void* __swift_bridge__$Vec_SwapDistribution$new(void);
void __swift_bridge__$Vec_SwapDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_SwapDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SwapDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SwapDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SwapDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SwapDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_SwapDistribution$as_ptr(void* vec_ptr);

typedef struct AirdropDistribution AirdropDistribution;
void __swift_bridge__$AirdropDistribution$_free(void* self);

void* __swift_bridge__$Vec_AirdropDistribution$new(void);
void __swift_bridge__$Vec_AirdropDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_AirdropDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AirdropDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AirdropDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AirdropDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AirdropDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_AirdropDistribution$as_ptr(void* vec_ptr);

typedef struct DeveloperDistribution DeveloperDistribution;
void __swift_bridge__$DeveloperDistribution$_free(void* self);

void* __swift_bridge__$Vec_DeveloperDistribution$new(void);
void __swift_bridge__$Vec_DeveloperDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_DeveloperDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DeveloperDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DeveloperDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DeveloperDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DeveloperDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_DeveloperDistribution$as_ptr(void* vec_ptr);

typedef struct NeuronDistribution NeuronDistribution;
void __swift_bridge__$NeuronDistribution$_free(void* self);

void* __swift_bridge__$Vec_NeuronDistribution$new(void);
void __swift_bridge__$Vec_NeuronDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronDistribution$as_ptr(void* vec_ptr);

typedef struct TreasuryDistribution TreasuryDistribution;
void __swift_bridge__$TreasuryDistribution$_free(void* self);

void* __swift_bridge__$Vec_TreasuryDistribution$new(void);
void __swift_bridge__$Vec_TreasuryDistribution$drop(void* vec_ptr);
void __swift_bridge__$Vec_TreasuryDistribution$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TreasuryDistribution$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TreasuryDistribution$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TreasuryDistribution$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TreasuryDistribution$len(void* vec_ptr);
void* __swift_bridge__$Vec_TreasuryDistribution$as_ptr(void* vec_ptr);

typedef struct NeuronsFundParticipants NeuronsFundParticipants;
void __swift_bridge__$NeuronsFundParticipants$_free(void* self);

void* __swift_bridge__$Vec_NeuronsFundParticipants$new(void);
void __swift_bridge__$Vec_NeuronsFundParticipants$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronsFundParticipants$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipants$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipants$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronsFundParticipants$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronsFundParticipants$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipants$as_ptr(void* vec_ptr);

typedef struct CfParticipant CfParticipant;
void __swift_bridge__$CfParticipant$_free(void* self);

void* __swift_bridge__$Vec_CfParticipant$new(void);
void __swift_bridge__$Vec_CfParticipant$drop(void* vec_ptr);
void __swift_bridge__$Vec_CfParticipant$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CfParticipant$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CfParticipant$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CfParticipant$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CfParticipant$len(void* vec_ptr);
void* __swift_bridge__$Vec_CfParticipant$as_ptr(void* vec_ptr);

typedef struct CfNeuron CfNeuron;
void __swift_bridge__$CfNeuron$_free(void* self);

void* __swift_bridge__$Vec_CfNeuron$new(void);
void __swift_bridge__$Vec_CfNeuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_CfNeuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CfNeuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CfNeuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CfNeuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CfNeuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_CfNeuron$as_ptr(void* vec_ptr);

typedef struct NeuronsFundParticipationConstraints NeuronsFundParticipationConstraints;
void __swift_bridge__$NeuronsFundParticipationConstraints$_free(void* self);

void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$new(void);
void __swift_bridge__$Vec_NeuronsFundParticipationConstraints$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronsFundParticipationConstraints$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronsFundParticipationConstraints$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronsFundParticipationConstraints$as_ptr(void* vec_ptr);

typedef struct IdealMatchedParticipationFunction IdealMatchedParticipationFunction;
void __swift_bridge__$IdealMatchedParticipationFunction$_free(void* self);

void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$new(void);
void __swift_bridge__$Vec_IdealMatchedParticipationFunction$drop(void* vec_ptr);
void __swift_bridge__$Vec_IdealMatchedParticipationFunction$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$pop(void* vec_ptr);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_IdealMatchedParticipationFunction$len(void* vec_ptr);
void* __swift_bridge__$Vec_IdealMatchedParticipationFunction$as_ptr(void* vec_ptr);

typedef struct LinearScalingCoefficient LinearScalingCoefficient;
void __swift_bridge__$LinearScalingCoefficient$_free(void* self);

void* __swift_bridge__$Vec_LinearScalingCoefficient$new(void);
void __swift_bridge__$Vec_LinearScalingCoefficient$drop(void* vec_ptr);
void __swift_bridge__$Vec_LinearScalingCoefficient$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_LinearScalingCoefficient$pop(void* vec_ptr);
void* __swift_bridge__$Vec_LinearScalingCoefficient$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_LinearScalingCoefficient$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_LinearScalingCoefficient$len(void* vec_ptr);
void* __swift_bridge__$Vec_LinearScalingCoefficient$as_ptr(void* vec_ptr);

typedef struct DappCanisters DappCanisters;
void __swift_bridge__$DappCanisters$_free(void* self);

void* __swift_bridge__$Vec_DappCanisters$new(void);
void __swift_bridge__$Vec_DappCanisters$drop(void* vec_ptr);
void __swift_bridge__$Vec_DappCanisters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DappCanisters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DappCanisters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DappCanisters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DappCanisters$len(void* vec_ptr);
void* __swift_bridge__$Vec_DappCanisters$as_ptr(void* vec_ptr);

typedef struct Canister Canister;
void __swift_bridge__$Canister$_free(void* self);

void* __swift_bridge__$Vec_Canister$new(void);
void __swift_bridge__$Vec_Canister$drop(void* vec_ptr);
void __swift_bridge__$Vec_Canister$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Canister$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Canister$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Canister$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Canister$len(void* vec_ptr);
void* __swift_bridge__$Vec_Canister$as_ptr(void* vec_ptr);

typedef struct NeuronBasketConstructionParameters NeuronBasketConstructionParameters;
void __swift_bridge__$NeuronBasketConstructionParameters$_free(void* self);

void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$new(void);
void __swift_bridge__$Vec_NeuronBasketConstructionParameters$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronBasketConstructionParameters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronBasketConstructionParameters$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronBasketConstructionParameters$as_ptr(void* vec_ptr);

typedef struct Result6 Result6;
void __swift_bridge__$Result6$_free(void* self);

void* __swift_bridge__$Vec_Result6$new(void);
void __swift_bridge__$Vec_Result6$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result6$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result6$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result6$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result6$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result6$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result6$as_ptr(void* vec_ptr);

typedef struct Result5 Result5;
void __swift_bridge__$Result5$_free(void* self);

void* __swift_bridge__$Vec_Result5$new(void);
void __swift_bridge__$Vec_Result5$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result5$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result5$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result5$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result5$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result5$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result5$as_ptr(void* vec_ptr);

typedef struct Result4 Result4;
void __swift_bridge__$Result4$_free(void* self);

void* __swift_bridge__$Vec_Result4$new(void);
void __swift_bridge__$Vec_Result4$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result4$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result4$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result4$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result4$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result4$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result4$as_ptr(void* vec_ptr);

typedef struct NamespaceErrors NamespaceErrors;
void __swift_bridge__$NamespaceErrors$_free(void* self);

void* __swift_bridge__$Vec_NamespaceErrors$new(void);
void __swift_bridge__$Vec_NamespaceErrors$drop(void* vec_ptr);
void __swift_bridge__$Vec_NamespaceErrors$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NamespaceErrors$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceErrors$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NamespaceErrors$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NamespaceErrors$len(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceErrors$as_ptr(void* vec_ptr);

typedef struct NamespaceForFrontend NamespaceForFrontend;
void __swift_bridge__$NamespaceForFrontend$_free(void* self);

void* __swift_bridge__$Vec_NamespaceForFrontend$new(void);
void __swift_bridge__$Vec_NamespaceForFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_NamespaceForFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NamespaceForFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceForFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NamespaceForFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NamespaceForFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_NamespaceForFrontend$as_ptr(void* vec_ptr);

typedef struct Result3 Result3;
void __swift_bridge__$Result3$_free(void* self);

void* __swift_bridge__$Vec_Result3$new(void);
void __swift_bridge__$Vec_Result3$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result3$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result3$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result3$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result3$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result3$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result3$as_ptr(void* vec_ptr);

typedef struct BetOnCurrentlyViewingPostError BetOnCurrentlyViewingPostError;
void __swift_bridge__$BetOnCurrentlyViewingPostError$_free(void* self);

void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$new(void);
void __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetOnCurrentlyViewingPostError$as_ptr(void* vec_ptr);

typedef struct BettingStatus BettingStatus;
void __swift_bridge__$BettingStatus$_free(void* self);

void* __swift_bridge__$Vec_BettingStatus$new(void);
void __swift_bridge__$Vec_BettingStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_BettingStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BettingStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BettingStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BettingStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BettingStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_BettingStatus$as_ptr(void* vec_ptr);

typedef struct SystemTime SystemTime;
void __swift_bridge__$SystemTime$_free(void* self);

void* __swift_bridge__$Vec_SystemTime$new(void);
void __swift_bridge__$Vec_SystemTime$drop(void* vec_ptr);
void __swift_bridge__$Vec_SystemTime$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SystemTime$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SystemTime$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SystemTime$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SystemTime$len(void* vec_ptr);
void* __swift_bridge__$Vec_SystemTime$as_ptr(void* vec_ptr);

typedef struct PlaceBetArg PlaceBetArg;
void __swift_bridge__$PlaceBetArg$_free(void* self);

void* __swift_bridge__$Vec_PlaceBetArg$new(void);
void __swift_bridge__$Vec_PlaceBetArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlaceBetArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlaceBetArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlaceBetArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlaceBetArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlaceBetArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlaceBetArg$as_ptr(void* vec_ptr);

typedef struct BetDirection BetDirection;
void __swift_bridge__$BetDirection$_free(void* self);

void* __swift_bridge__$Vec_BetDirection$new(void);
void __swift_bridge__$Vec_BetDirection$drop(void* vec_ptr);
void __swift_bridge__$Vec_BetDirection$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BetDirection$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BetDirection$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BetDirection$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BetDirection$len(void* vec_ptr);
void* __swift_bridge__$Vec_BetDirection$as_ptr(void* vec_ptr);

typedef struct Result2 Result2;
void __swift_bridge__$Result2$_free(void* self);

void* __swift_bridge__$Vec_Result2$new(void);
void __swift_bridge__$Vec_Result2$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result2$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result2$as_ptr(void* vec_ptr);

typedef struct Result1 Result1;
void __swift_bridge__$Result1$_free(void* self);

void* __swift_bridge__$Vec_Result1$new(void);
void __swift_bridge__$Vec_Result1$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result1$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result1$as_ptr(void* vec_ptr);

typedef struct CdaoTokenError CdaoTokenError;
void __swift_bridge__$CdaoTokenError$_free(void* self);

void* __swift_bridge__$Vec_CdaoTokenError$new(void);
void __swift_bridge__$Vec_CdaoTokenError$drop(void* vec_ptr);
void __swift_bridge__$Vec_CdaoTokenError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CdaoTokenError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoTokenError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CdaoTokenError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CdaoTokenError$len(void* vec_ptr);
void* __swift_bridge__$Vec_CdaoTokenError$as_ptr(void* vec_ptr);

typedef struct TransferError TransferError;
void __swift_bridge__$TransferError$_free(void* self);

void* __swift_bridge__$Vec_TransferError$new(void);
void __swift_bridge__$Vec_TransferError$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferError$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferError$as_ptr(void* vec_ptr);

typedef struct RejectionCode RejectionCode;
void __swift_bridge__$RejectionCode$_free(void* self);

void* __swift_bridge__$Vec_RejectionCode$new(void);
void __swift_bridge__$Vec_RejectionCode$drop(void* vec_ptr);
void __swift_bridge__$Vec_RejectionCode$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RejectionCode$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RejectionCode$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RejectionCode$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RejectionCode$len(void* vec_ptr);
void* __swift_bridge__$Vec_RejectionCode$as_ptr(void* vec_ptr);

typedef struct Result_ Result_;
void __swift_bridge__$Result_$_free(void* self);

void* __swift_bridge__$Vec_Result_$new(void);
void __swift_bridge__$Vec_Result_$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result_$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result_$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result_$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result_$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result_$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result_$as_ptr(void* vec_ptr);

typedef struct PostDetailsForFrontend PostDetailsForFrontend;
void __swift_bridge__$PostDetailsForFrontend$_free(void* self);

void* __swift_bridge__$Vec_PostDetailsForFrontend$new(void);
void __swift_bridge__$Vec_PostDetailsForFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostDetailsForFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostDetailsForFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsForFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostDetailsForFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostDetailsForFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsForFrontend$as_ptr(void* vec_ptr);

typedef struct PostStatus PostStatus;
void __swift_bridge__$PostStatus$_free(void* self);

void* __swift_bridge__$Vec_PostStatus$new(void);
void __swift_bridge__$Vec_PostStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostStatus$as_ptr(void* vec_ptr);

typedef struct PostDetailsFromFrontend PostDetailsFromFrontend;
void __swift_bridge__$PostDetailsFromFrontend$_free(void* self);

void* __swift_bridge__$Vec_PostDetailsFromFrontend$new(void);
void __swift_bridge__$Vec_PostDetailsFromFrontend$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostDetailsFromFrontend$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostDetailsFromFrontend$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostDetailsFromFrontend$as_ptr(void* vec_ptr);

typedef struct Service Service;
void __swift_bridge__$Service$_free(void* self);

void* __swift_bridge__$Vec_Service$new(void);
void __swift_bridge__$Vec_Service$drop(void* vec_ptr);
void __swift_bridge__$Vec_Service$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Service$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Service$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Service$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Service$len(void* vec_ptr);
void* __swift_bridge__$Vec_Service$as_ptr(void* vec_ptr);

typedef struct DelegatedIdentityWire DelegatedIdentityWire;
void __swift_bridge__$DelegatedIdentityWire$_free(void* self);

void* __swift_bridge__$Vec_DelegatedIdentityWire$new(void);
void __swift_bridge__$Vec_DelegatedIdentityWire$drop(void* vec_ptr);
void __swift_bridge__$Vec_DelegatedIdentityWire$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DelegatedIdentityWire$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentityWire$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DelegatedIdentityWire$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DelegatedIdentityWire$len(void* vec_ptr);
void* __swift_bridge__$Vec_DelegatedIdentityWire$as_ptr(void* vec_ptr);

typedef struct CanistersWrapper CanistersWrapper;
void __swift_bridge__$CanistersWrapper$_free(void* self);

void* __swift_bridge__$Vec_CanistersWrapper$new(void);
void __swift_bridge__$Vec_CanistersWrapper$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanistersWrapper$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanistersWrapper$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanistersWrapper$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanistersWrapper$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanistersWrapper$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanistersWrapper$as_ptr(void* vec_ptr);

typedef struct GetPostsOfUserProfileError GetPostsOfUserProfileError;
void __swift_bridge__$GetPostsOfUserProfileError$_free(void* self);

void* __swift_bridge__$Vec_GetPostsOfUserProfileError$new(void);
void __swift_bridge__$Vec_GetPostsOfUserProfileError$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetPostsOfUserProfileError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetPostsOfUserProfileError$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetPostsOfUserProfileError$as_ptr(void* vec_ptr);

typedef struct Result12 Result12;
void __swift_bridge__$Result12$_free(void* self);

void* __swift_bridge__$Vec_Result12$new(void);
void __swift_bridge__$Vec_Result12$drop(void* vec_ptr);
void __swift_bridge__$Vec_Result12$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Result12$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Result12$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Result12$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Result12$len(void* vec_ptr);
void* __swift_bridge__$Vec_Result12$as_ptr(void* vec_ptr);

typedef struct RateLimitStatus RateLimitStatus;
void __swift_bridge__$RateLimitStatus$_free(void* self);

void* __swift_bridge__$Vec_RateLimitStatus$new(void);
void __swift_bridge__$Vec_RateLimitStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_RateLimitStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RateLimitStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RateLimitStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RateLimitStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_RateLimitStatus$as_ptr(void* vec_ptr);

typedef struct VideoGenRequestKey VideoGenRequestKey;
void __swift_bridge__$VideoGenRequestKey$_free(void* self);

void* __swift_bridge__$Vec_VideoGenRequestKey$new(void);
void __swift_bridge__$Vec_VideoGenRequestKey$drop(void* vec_ptr);
void __swift_bridge__$Vec_VideoGenRequestKey$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_VideoGenRequestKey$pop(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestKey$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_VideoGenRequestKey$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_VideoGenRequestKey$len(void* vec_ptr);
void* __swift_bridge__$Vec_VideoGenRequestKey$as_ptr(void* vec_ptr);

uint64_t __swift_bridge__$PostDetailsForFrontend$id(void* self);
bool __swift_bridge__$PostDetailsForFrontend$is_nsfw(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$video_uid(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$description(void* self);
uint64_t __swift_bridge__$PostDetailsForFrontend$like_count(void* self);
bool __swift_bridge__$PostDetailsForFrontend$liked_by_me(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$created_by_profile_photo_url(void* self);
void* __swift_bridge__$PostDetailsForFrontend$created_by_user_principal_id(void* self);
void* __swift_bridge__$PostDetailsForFrontend$status(void* self);
void* __swift_bridge__$PostDetailsForFrontend$hashtags(void* self);
struct RustStr __swift_bridge__$PostDetailsForFrontend$created_by_display_name(void* self);
uint64_t __swift_bridge__$PostDetailsForFrontend$total_view_count(void* self);
bool __swift_bridge__$PostStatus$is_banned_due_to_user_reporting(void* self);
bool __swift_bridge__$PostDetailsFromFrontend$is_nsfw(void* self);
void* __swift_bridge__$PostDetailsFromFrontend$hashtags(void* self);
struct RustStr __swift_bridge__$PostDetailsFromFrontend$description(void* self);
struct RustStr __swift_bridge__$PostDetailsFromFrontend$video_uid(void* self);
bool __swift_bridge__$PostDetailsFromFrontend$creator_consent_for_inclusion_in_hot_or_not(void* self);
struct __private__ResultPtrAndPtr __swift_bridge__$Service$new(void* principal, void* identity);
void __swift_bridge__$Service$add_device_id(void* callback_wrapper, void __swift_bridge__$Service$add_device_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$add_post_v_2(void* callback_wrapper, void __swift_bridge__$Service$add_post_v_2$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$add_token(void* callback_wrapper, void __swift_bridge__$Service$add_token$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$bet_on_currently_viewing_post(void* callback_wrapper, void __swift_bridge__$Service$bet_on_currently_viewing_post$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$check_and_update_scores_and_share_with_post_cache_if_difference_beyond_threshold(void* callback_wrapper, void __swift_bridge__$Service$check_and_update_scores_and_share_with_post_cache_if_difference_beyond_threshold$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$clear_snapshot(void* callback_wrapper, void __swift_bridge__$Service$clear_snapshot$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$create_a_namespace(void* callback_wrapper, void __swift_bridge__$Service$create_a_namespace$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$delete_key_value_pair(void* callback_wrapper, void __swift_bridge__$Service$delete_key_value_pair$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$delete_multiple_key_value_pairs(void* callback_wrapper, void __swift_bridge__$Service$delete_multiple_key_value_pairs$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$deploy_cdao_sns(void* callback_wrapper, void __swift_bridge__$Service$deploy_cdao_sns$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1);
void __swift_bridge__$Service$deployed_cdao_canisters(void* callback_wrapper, void __swift_bridge__$Service$deployed_cdao_canisters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$do_i_follow_this_user(void* callback_wrapper, void __swift_bridge__$Service$do_i_follow_this_user$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$download_snapshot(void* callback_wrapper, void __swift_bridge__$Service$download_snapshot$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_bet_details_for_a_user_on_a_post(void* callback_wrapper, void __swift_bridge__$Service$get_bet_details_for_a_user_on_a_post$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1);
void __swift_bridge__$Service$get_device_identities(void* callback_wrapper, void __swift_bridge__$Service$get_device_identities$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_entire_individual_post_detail_by_id(void* callback_wrapper, void __swift_bridge__$Service$get_entire_individual_post_detail_by_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_hot_or_not_bet_details_for_this_post(void* callback_wrapper, void __swift_bridge__$Service$get_hot_or_not_bet_details_for_this_post$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_hot_or_not_bets_placed_by_this_profile_with_pagination(void* callback_wrapper, void __swift_bridge__$Service$get_hot_or_not_bets_placed_by_this_profile_with_pagination$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_individual_post_details_by_id(void* callback_wrapper, void __swift_bridge__$Service$get_individual_post_details_by_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$get_individual_hot_or_not_bet_placed_by_this_profile(void* callback_wrapper, void __swift_bridge__$Service$get_individual_hot_or_not_bet_placed_by_this_profile$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1);
void __swift_bridge__$Service$get_last_access_time(void* callback_wrapper, void __swift_bridge__$Service$get_last_access_time$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_last_canister_functionality_access_time(void* callback_wrapper, void __swift_bridge__$Service$get_last_canister_functionality_access_time$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_ml_feed_cache_paginated(void* callback_wrapper, void __swift_bridge__$Service$get_ml_feed_cache_paginated$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination(void* callback_wrapper, void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination_cursor(void* callback_wrapper, void __swift_bridge__$Service$get_posts_of_this_user_profile_with_pagination_cursor$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_principals_that_follow_this_profile_paginated(void* callback_wrapper, void __swift_bridge__$Service$get_principals_that_follow_this_profile_paginated$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, struct __private__OptionU64 arg0);
void __swift_bridge__$Service$get_principals_this_profile_follows_paginated(void* callback_wrapper, void __swift_bridge__$Service$get_principals_this_profile_follows_paginated$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, struct __private__OptionU64 arg0);
void __swift_bridge__$Service$get_profile_details(void* callback_wrapper, void __swift_bridge__$Service$get_profile_details$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_profile_details_v_2(void* callback_wrapper, void __swift_bridge__$Service$get_profile_details_v_2$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_rewarded_for_referral(void* callback_wrapper, void __swift_bridge__$Service$get_rewarded_for_referral$async(void* callback_wrapper, void* ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$get_rewarded_for_signing_up(void* callback_wrapper, void __swift_bridge__$Service$get_rewarded_for_signing_up$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$get_session_type(void* callback_wrapper, void __swift_bridge__$Service$get_session_type$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_stable_memory_size(void* callback_wrapper, void __swift_bridge__$Service$get_stable_memory_size$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_success_history(void* callback_wrapper, void __swift_bridge__$Service$get_success_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_token_roots_of_this_user_with_pagination_cursor(void* callback_wrapper, void __swift_bridge__$Service$get_token_roots_of_this_user_with_pagination_cursor$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_user_caniser_cycle_balance(void* callback_wrapper, void __swift_bridge__$Service$get_user_caniser_cycle_balance$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_user_utility_token_transaction_history_with_pagination(void* callback_wrapper, void __swift_bridge__$Service$get_user_utility_token_transaction_history_with_pagination$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$get_utility_token_balance(void* callback_wrapper, void __swift_bridge__$Service$get_utility_token_balance$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_version(void* callback_wrapper, void __swift_bridge__$Service$get_version$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_version_number(void* callback_wrapper, void __swift_bridge__$Service$get_version_number$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_watch_history(void* callback_wrapper, void __swift_bridge__$Service$get_watch_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_well_known_principal_value(void* callback_wrapper, void __swift_bridge__$Service$get_well_known_principal_value$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$http_request(void* callback_wrapper, void __swift_bridge__$Service$http_request$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_namespace_keys(void* callback_wrapper, void __swift_bridge__$Service$list_namespace_keys$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$list_namespaces(void* callback_wrapper, void __swift_bridge__$Service$list_namespaces$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1);
void __swift_bridge__$Service$load_snapshot(void* callback_wrapper, void __swift_bridge__$Service$load_snapshot$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$once_reenqueue_timers_for_pending_bet_outcomes(void* callback_wrapper, void __swift_bridge__$Service$once_reenqueue_timers_for_pending_bet_outcomes$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$read_key_value_pair(void* callback_wrapper, void __swift_bridge__$Service$read_key_value_pair$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$receive_and_save_snaphot(void* callback_wrapper, void __swift_bridge__$Service$receive_and_save_snaphot$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$receive_bet_from_bet_makers_canister(void* callback_wrapper, void __swift_bridge__$Service$receive_bet_from_bet_makers_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$receive_bet_winnings_when_distributed(void* callback_wrapper, void __swift_bridge__$Service$receive_bet_winnings_when_distributed$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$receive_data_from_hotornot(void* callback_wrapper, void __swift_bridge__$Service$receive_data_from_hotornot$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, uint64_t arg1, void* arg2);
void __swift_bridge__$Service$return_cycles_to_user_index_canister(void* callback_wrapper, void __swift_bridge__$Service$return_cycles_to_user_index_canister$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$save_snapshot_json(void* callback_wrapper, void __swift_bridge__$Service$save_snapshot_json$async(void* callback_wrapper, struct __swift_bridge__$ResultU32AndAgentError ret), void* self);
void __swift_bridge__$Service$settle_neurons_fund_participation(void* callback_wrapper, void __swift_bridge__$Service$settle_neurons_fund_participation$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$transfer_token_to_user_canister(void* callback_wrapper, void __swift_bridge__$Service$transfer_token_to_user_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1, void* arg2, void* arg3);
void __swift_bridge__$Service$transfer_tokens_and_posts(void* callback_wrapper, void __swift_bridge__$Service$transfer_tokens_and_posts$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$update_last_access_time(void* callback_wrapper, void __swift_bridge__$Service$update_last_access_time$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$update_last_canister_functionality_access_time(void* callback_wrapper, void __swift_bridge__$Service$update_last_canister_functionality_access_time$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$update_ml_feed_cache(void* callback_wrapper, void __swift_bridge__$Service$update_ml_feed_cache$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_post_add_view_details(void* callback_wrapper, void __swift_bridge__$Service$update_post_add_view_details$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$update_post_as_ready_to_view(void* callback_wrapper, void __swift_bridge__$Service$update_post_as_ready_to_view$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$update_post_increment_share_count(void* callback_wrapper, void __swift_bridge__$Service$update_post_increment_share_count$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$update_post_status(void* callback_wrapper, void __swift_bridge__$Service$update_post_status$async(void* callback_wrapper, void* ret), void* self, uint64_t arg0, void* arg1);
void __swift_bridge__$Service$update_post_toggle_like_status_by_caller(void* callback_wrapper, void __swift_bridge__$Service$update_post_toggle_like_status_by_caller$async(void* callback_wrapper, struct __swift_bridge__$ResultBoolAndAgentError ret), void* self, uint64_t arg0);
void __swift_bridge__$Service$update_profile_display_details(void* callback_wrapper, void __swift_bridge__$Service$update_profile_display_details$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profile_owner(void* callback_wrapper, void __swift_bridge__$Service$update_profile_owner$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profile_set_unique_username_once(void* callback_wrapper, void __swift_bridge__$Service$update_profile_set_unique_username_once$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profiles_i_follow_toggle_list_with_specified_profile(void* callback_wrapper, void __swift_bridge__$Service$update_profiles_i_follow_toggle_list_with_specified_profile$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_profiles_that_follow_me_toggle_list_with_specified_profile(void* callback_wrapper, void __swift_bridge__$Service$update_profiles_that_follow_me_toggle_list_with_specified_profile$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_referrer_details(void* callback_wrapper, void __swift_bridge__$Service$update_referrer_details$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_session_type(void* callback_wrapper, void __swift_bridge__$Service$update_session_type$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_success_history(void* callback_wrapper, void __swift_bridge__$Service$update_success_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_watch_history(void* callback_wrapper, void __swift_bridge__$Service$update_watch_history$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$update_well_known_principal(void* callback_wrapper, void __swift_bridge__$Service$update_well_known_principal$async(void* callback_wrapper, void* ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$write_key_value_pair(void* callback_wrapper, void __swift_bridge__$Service$write_key_value_pair$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1, void* arg2);
void __swift_bridge__$Service$write_multiple_key_value_pairs(void* callback_wrapper, void __swift_bridge__$Service$write_multiple_key_value_pairs$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, void* arg1);
struct __private__ResultPtrAndPtr __swift_bridge__$get_secp256k1_identity(void* jwk_key);
struct __private__ResultPtrAndPtr __swift_bridge__$get_jwk_ec_key(void* json_string);
struct __private__ResultPtrAndPtr __swift_bridge__$delegated_identity_from_bytes(struct __private__FfiSlice data);
struct __private__ResultPtrAndPtr __swift_bridge__$delegated_identity_wire_from_bytes(struct __private__FfiSlice data);
struct __private__ResultPtrAndPtr __swift_bridge__$delegate_identity_with_max_age_public(void* parent_wire, void* new_pub_jwk_json, uint64_t max_age_seconds);
void* __swift_bridge__$delegated_identity_wire_to_json(void* wire);
void __swift_bridge__$authenticate_with_network(void* callback_wrapper, void __swift_bridge__$authenticate_with_network$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* auth, void* referrer);
void* __swift_bridge__$CanistersWrapper$get_canister_principal(void* self);
void* __swift_bridge__$CanistersWrapper$get_canister_principal_string(void* self);
void* __swift_bridge__$CanistersWrapper$get_user_principal(void* self);
void* __swift_bridge__$CanistersWrapper$get_user_principal_string(void* self);
uint64_t __swift_bridge__$CanistersWrapper$expiry_ns(void* self);
struct __private__OptionU64 __swift_bridge__$extract_time_as_double(void* result);
struct __private__ResultPtrAndPtr __swift_bridge__$get_principal(void* text);
void* __swift_bridge__$get_principal_from_identity(void* identity);
bool __swift_bridge__$GetPostsOfUserProfileError$is_reached_end_of_items_list(void* self);
bool __swift_bridge__$GetPostsOfUserProfileError$is_invalid_bounds_passed(void* self);
bool __swift_bridge__$GetPostsOfUserProfileError$is_exceeded_max_number_of_items_allowed_in_one_request(void* self);
bool __swift_bridge__$Result12$is_ok(void* self);
bool __swift_bridge__$Result12$is_err(void* self);
void* __swift_bridge__$Result12$ok_value(void* self);
void* __swift_bridge__$Result12$err_value(void* self);
void* __swift_bridge__$propic_from_principal(void* principal);
struct __private__ResultPtrAndPtr __swift_bridge__$yral_auth_login_hint(struct __private__FfiSlice data);
void __swift_bridge__$register_device(void* callback_wrapper, void __swift_bridge__$register_device$async(void* callback_wrapper, void* ret), void* identity, void* token);
void __swift_bridge__$unregister_device(void* callback_wrapper, void __swift_bridge__$unregister_device$async(void* callback_wrapper, void* ret), void* identity, void* token);
void* __swift_bridge__$RateLimitStatus$principal(void* self);
uint64_t __swift_bridge__$RateLimitStatus$request_count(void* self);
uint64_t __swift_bridge__$RateLimitStatus$window_start(void* self);
bool __swift_bridge__$RateLimitStatus$is_limited(void* self);
void __swift_bridge__$get_rate_limit_status_core(void* callback_wrapper, void __swift_bridge__$get_rate_limit_status_core$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* principal, void* property, bool is_registered, void* identity);
void __swift_bridge__$poll_video_generation_status(void* callback_wrapper, void __swift_bridge__$poll_video_generation_status$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* identity, void* key);
void* __swift_bridge__$get_polling_result_status(void* result);
void* __swift_bridge__$get_status_value(void* status);
void* __swift_bridge__$VideoGenRequestKey$principal(void* self);
uint64_t __swift_bridge__$VideoGenRequestKey$counter(void* self);
typedef enum __swift_bridge__$ResultU32AndAgentError$Tag {__swift_bridge__$ResultU32AndAgentError$ResultOk, __swift_bridge__$ResultU32AndAgentError$ResultErr} __swift_bridge__$ResultU32AndAgentError$Tag;
union __swift_bridge__$ResultU32AndAgentError$Fields {uint32_t ok; void* err;};
typedef struct __swift_bridge__$ResultU32AndAgentError{__swift_bridge__$ResultU32AndAgentError$Tag tag; union __swift_bridge__$ResultU32AndAgentError$Fields payload;} __swift_bridge__$ResultU32AndAgentError;
typedef enum __swift_bridge__$ResultBoolAndAgentError$Tag {__swift_bridge__$ResultBoolAndAgentError$ResultOk, __swift_bridge__$ResultBoolAndAgentError$ResultErr} __swift_bridge__$ResultBoolAndAgentError$Tag;
union __swift_bridge__$ResultBoolAndAgentError$Fields {bool ok; void* err;};
typedef struct __swift_bridge__$ResultBoolAndAgentError{__swift_bridge__$ResultBoolAndAgentError$Tag tag; union __swift_bridge__$ResultBoolAndAgentError$Fields payload;} __swift_bridge__$ResultBoolAndAgentError;


// File automatically generated by swift-bridge.
typedef struct PlatformOrchestratorResult1 PlatformOrchestratorResult1;
void __swift_bridge__$PlatformOrchestratorResult1$_free(void* self);

void* __swift_bridge__$Vec_PlatformOrchestratorResult1$new(void);
void __swift_bridge__$Vec_PlatformOrchestratorResult1$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlatformOrchestratorResult1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorResult1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorResult1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlatformOrchestratorResult1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlatformOrchestratorResult1$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorResult1$as_ptr(void* vec_ptr);

typedef struct CanisterUpgradeStatus CanisterUpgradeStatus;
void __swift_bridge__$CanisterUpgradeStatus$_free(void* self);

void* __swift_bridge__$Vec_CanisterUpgradeStatus$new(void);
void __swift_bridge__$Vec_CanisterUpgradeStatus$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterUpgradeStatus$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterUpgradeStatus$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterUpgradeStatus$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterUpgradeStatus$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterUpgradeStatus$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterUpgradeStatus$as_ptr(void* vec_ptr);

typedef struct UpgradeCanisterArg UpgradeCanisterArg;
void __swift_bridge__$UpgradeCanisterArg$_free(void* self);

void* __swift_bridge__$Vec_UpgradeCanisterArg$new(void);
void __swift_bridge__$Vec_UpgradeCanisterArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpgradeCanisterArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpgradeCanisterArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeCanisterArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpgradeCanisterArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpgradeCanisterArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeCanisterArg$as_ptr(void* vec_ptr);

typedef struct WasmType WasmType;
void __swift_bridge__$WasmType$_free(void* self);

void* __swift_bridge__$Vec_WasmType$new(void);
void __swift_bridge__$Vec_WasmType$drop(void* vec_ptr);
void __swift_bridge__$Vec_WasmType$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_WasmType$pop(void* vec_ptr);
void* __swift_bridge__$Vec_WasmType$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_WasmType$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_WasmType$len(void* vec_ptr);
void* __swift_bridge__$Vec_WasmType$as_ptr(void* vec_ptr);

typedef struct PlatformOrchestratorResult_ PlatformOrchestratorResult_;
void __swift_bridge__$PlatformOrchestratorResult_$_free(void* self);

void* __swift_bridge__$Vec_PlatformOrchestratorResult_$new(void);
void __swift_bridge__$Vec_PlatformOrchestratorResult_$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlatformOrchestratorResult_$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorResult_$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorResult_$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlatformOrchestratorResult_$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlatformOrchestratorResult_$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorResult_$as_ptr(void* vec_ptr);

typedef struct PlatformOrchestratorInitArgs PlatformOrchestratorInitArgs;
void __swift_bridge__$PlatformOrchestratorInitArgs$_free(void* self);

void* __swift_bridge__$Vec_PlatformOrchestratorInitArgs$new(void);
void __swift_bridge__$Vec_PlatformOrchestratorInitArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_PlatformOrchestratorInitArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorInitArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorInitArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PlatformOrchestratorInitArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PlatformOrchestratorInitArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_PlatformOrchestratorInitArgs$as_ptr(void* vec_ptr);

void __swift_bridge__$Service$deposit_cycles_to_canister(void* callback_wrapper, void __swift_bridge__$Service$deposit_cycles_to_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1);
void __swift_bridge__$Service$get_all_available_subnet_orchestrators(void* callback_wrapper, void __swift_bridge__$Service$get_all_available_subnet_orchestrators$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_all_subnet_orchestrators(void* callback_wrapper, void __swift_bridge__$Service$get_all_subnet_orchestrators$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_subnet_last_upgrade_status(void* callback_wrapper, void __swift_bridge__$Service$get_subnet_last_upgrade_status$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$provision_subnet_orchestrator_canister(void* callback_wrapper, void __swift_bridge__$Service$provision_subnet_orchestrator_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$start_reclaiming_cycles_from_individual_canisters(void* callback_wrapper, void __swift_bridge__$Service$start_reclaiming_cycles_from_individual_canisters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$start_reclaiming_cycles_from_subnet_orchestrator_canister(void* callback_wrapper, void __swift_bridge__$Service$start_reclaiming_cycles_from_subnet_orchestrator_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$stop_upgrades_for_individual_user_canisters(void* callback_wrapper, void __swift_bridge__$Service$stop_upgrades_for_individual_user_canisters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$subnet_orchestrator_maxed_out(void* callback_wrapper, void __swift_bridge__$Service$subnet_orchestrator_maxed_out$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$update_profile_owner_for_individual_canisters(void* callback_wrapper, void __swift_bridge__$Service$update_profile_owner_for_individual_canisters$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$upgrade_canister(void* callback_wrapper, void __swift_bridge__$Service$upgrade_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$upgrade_specific_individual_canister(void* callback_wrapper, void __swift_bridge__$Service$upgrade_specific_individual_canister$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$upload_wasms(void* callback_wrapper, void __swift_bridge__$Service$upload_wasms$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0, void* arg1);


// File automatically generated by swift-bridge.
#include <stdint.h>
typedef struct PostCacheResult_ PostCacheResult_;
void __swift_bridge__$PostCacheResult_$_free(void* self);

void* __swift_bridge__$Vec_PostCacheResult_$new(void);
void __swift_bridge__$Vec_PostCacheResult_$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostCacheResult_$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostCacheResult_$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostCacheResult_$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostCacheResult_$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostCacheResult_$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostCacheResult_$as_ptr(void* vec_ptr);

typedef struct TopPostsFetchError TopPostsFetchError;
void __swift_bridge__$TopPostsFetchError$_free(void* self);

void* __swift_bridge__$Vec_TopPostsFetchError$new(void);
void __swift_bridge__$Vec_TopPostsFetchError$drop(void* vec_ptr);
void __swift_bridge__$Vec_TopPostsFetchError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TopPostsFetchError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TopPostsFetchError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TopPostsFetchError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TopPostsFetchError$len(void* vec_ptr);
void* __swift_bridge__$Vec_TopPostsFetchError$as_ptr(void* vec_ptr);

typedef struct PostScoreIndexItemV1 PostScoreIndexItemV1;
void __swift_bridge__$PostScoreIndexItemV1$_free(void* self);

void* __swift_bridge__$Vec_PostScoreIndexItemV1$new(void);
void __swift_bridge__$Vec_PostScoreIndexItemV1$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostScoreIndexItemV1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostScoreIndexItemV1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostScoreIndexItemV1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostScoreIndexItemV1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostScoreIndexItemV1$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostScoreIndexItemV1$as_ptr(void* vec_ptr);

typedef struct NsfwFilter NsfwFilter;
void __swift_bridge__$NsfwFilter$_free(void* self);

void* __swift_bridge__$Vec_NsfwFilter$new(void);
void __swift_bridge__$Vec_NsfwFilter$drop(void* vec_ptr);
void __swift_bridge__$Vec_NsfwFilter$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NsfwFilter$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NsfwFilter$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NsfwFilter$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NsfwFilter$len(void* vec_ptr);
void* __swift_bridge__$Vec_NsfwFilter$as_ptr(void* vec_ptr);

typedef struct PostCacheInitArgs PostCacheInitArgs;
void __swift_bridge__$PostCacheInitArgs$_free(void* self);

void* __swift_bridge__$Vec_PostCacheInitArgs$new(void);
void __swift_bridge__$Vec_PostCacheInitArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_PostCacheInitArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_PostCacheInitArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_PostCacheInitArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_PostCacheInitArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_PostCacheInitArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_PostCacheInitArgs$as_ptr(void* vec_ptr);

void __swift_bridge__$Service$get_top_posts_aggregated_from_canisters_on_this_network_for_home_feed_cursor(void* callback_wrapper, void __swift_bridge__$Service$get_top_posts_aggregated_from_canisters_on_this_network_for_home_feed_cursor$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1, struct __private__OptionBool arg2, void* arg3, void* arg4);
void __swift_bridge__$Service$get_top_posts_aggregated_from_canisters_on_this_network_for_hot_or_not_feed_cursor(void* callback_wrapper, void __swift_bridge__$Service$get_top_posts_aggregated_from_canisters_on_this_network_for_hot_or_not_feed_cursor$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, uint64_t arg0, uint64_t arg1, struct __private__OptionBool arg2, void* arg3, void* arg4);
void __swift_bridge__$Service$receive_top_home_feed_posts_from_publishing_canister(void* callback_wrapper, void __swift_bridge__$Service$receive_top_home_feed_posts_from_publishing_canister$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$receive_top_hot_or_not_feed_posts_from_publishing_canister(void* callback_wrapper, void __swift_bridge__$Service$receive_top_hot_or_not_feed_posts_from_publishing_canister$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$remove_all_feed_entries(void* callback_wrapper, void __swift_bridge__$Service$remove_all_feed_entries$async(void* callback_wrapper, void* ret), void* self);
void __swift_bridge__$Service$update_post_home_feed(void* callback_wrapper, void __swift_bridge__$Service$update_post_home_feed$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$update_post_hot_or_not_feed(void* callback_wrapper, void __swift_bridge__$Service$update_post_hot_or_not_feed$async(void* callback_wrapper, void* ret), void* self, void* arg0);


// File automatically generated by swift-bridge.
typedef struct SetModeRet SetModeRet;
void __swift_bridge__$SetModeRet$_free(void* self);

void* __swift_bridge__$Vec_SetModeRet$new(void);
void __swift_bridge__$Vec_SetModeRet$drop(void* vec_ptr);
void __swift_bridge__$Vec_SetModeRet$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SetModeRet$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SetModeRet$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SetModeRet$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SetModeRet$len(void* vec_ptr);
void* __swift_bridge__$Vec_SetModeRet$as_ptr(void* vec_ptr);

typedef struct SetMode SetMode;
void __swift_bridge__$SetMode$_free(void* self);

void* __swift_bridge__$Vec_SetMode$new(void);
void __swift_bridge__$Vec_SetMode$drop(void* vec_ptr);
void __swift_bridge__$Vec_SetMode$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SetMode$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SetMode$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SetMode$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SetMode$len(void* vec_ptr);
void* __swift_bridge__$Vec_SetMode$as_ptr(void* vec_ptr);

typedef struct ManageNeuronResponse ManageNeuronResponse;
void __swift_bridge__$ManageNeuronResponse$_free(void* self);

void* __swift_bridge__$Vec_ManageNeuronResponse$new(void);
void __swift_bridge__$Vec_ManageNeuronResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ManageNeuronResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ManageNeuronResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ManageNeuronResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ManageNeuronResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ManageNeuronResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ManageNeuronResponse$as_ptr(void* vec_ptr);

typedef struct Command1 Command1;
void __swift_bridge__$Command1$_free(void* self);

void* __swift_bridge__$Vec_Command1$new(void);
void __swift_bridge__$Vec_Command1$drop(void* vec_ptr);
void __swift_bridge__$Vec_Command1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Command1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Command1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Command1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Command1$len(void* vec_ptr);
void* __swift_bridge__$Vec_Command1$as_ptr(void* vec_ptr);

typedef struct DisburseResponse DisburseResponse;
void __swift_bridge__$DisburseResponse$_free(void* self);

void* __swift_bridge__$Vec_DisburseResponse$new(void);
void __swift_bridge__$Vec_DisburseResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_DisburseResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DisburseResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DisburseResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DisburseResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseResponse$as_ptr(void* vec_ptr);

typedef struct MergeMaturityResponse MergeMaturityResponse;
void __swift_bridge__$MergeMaturityResponse$_free(void* self);

void* __swift_bridge__$Vec_MergeMaturityResponse$new(void);
void __swift_bridge__$Vec_MergeMaturityResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_MergeMaturityResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MergeMaturityResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MergeMaturityResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MergeMaturityResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MergeMaturityResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_MergeMaturityResponse$as_ptr(void* vec_ptr);

typedef struct StakeMaturityResponse StakeMaturityResponse;
void __swift_bridge__$StakeMaturityResponse$_free(void* self);

void* __swift_bridge__$Vec_StakeMaturityResponse$new(void);
void __swift_bridge__$Vec_StakeMaturityResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_StakeMaturityResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_StakeMaturityResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_StakeMaturityResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_StakeMaturityResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_StakeMaturityResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_StakeMaturityResponse$as_ptr(void* vec_ptr);

typedef struct ClaimOrRefreshResponse ClaimOrRefreshResponse;
void __swift_bridge__$ClaimOrRefreshResponse$_free(void* self);

void* __swift_bridge__$Vec_ClaimOrRefreshResponse$new(void);
void __swift_bridge__$Vec_ClaimOrRefreshResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ClaimOrRefreshResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ClaimOrRefreshResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimOrRefreshResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ClaimOrRefreshResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ClaimOrRefreshResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimOrRefreshResponse$as_ptr(void* vec_ptr);

typedef struct DisburseMaturityResponse DisburseMaturityResponse;
void __swift_bridge__$DisburseMaturityResponse$_free(void* self);

void* __swift_bridge__$Vec_DisburseMaturityResponse$new(void);
void __swift_bridge__$Vec_DisburseMaturityResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_DisburseMaturityResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DisburseMaturityResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseMaturityResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DisburseMaturityResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DisburseMaturityResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseMaturityResponse$as_ptr(void* vec_ptr);

typedef struct SplitResponse SplitResponse;
void __swift_bridge__$SplitResponse$_free(void* self);

void* __swift_bridge__$Vec_SplitResponse$new(void);
void __swift_bridge__$Vec_SplitResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_SplitResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SplitResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SplitResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SplitResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SplitResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_SplitResponse$as_ptr(void* vec_ptr);

typedef struct ManageNeuron ManageNeuron;
void __swift_bridge__$ManageNeuron$_free(void* self);

void* __swift_bridge__$Vec_ManageNeuron$new(void);
void __swift_bridge__$Vec_ManageNeuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_ManageNeuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ManageNeuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ManageNeuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ManageNeuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ManageNeuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_ManageNeuron$as_ptr(void* vec_ptr);

typedef struct Command Command;
void __swift_bridge__$Command$_free(void* self);

void* __swift_bridge__$Vec_Command$new(void);
void __swift_bridge__$Vec_Command$drop(void* vec_ptr);
void __swift_bridge__$Vec_Command$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Command$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Command$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Command$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Command$len(void* vec_ptr);
void* __swift_bridge__$Vec_Command$as_ptr(void* vec_ptr);

typedef struct StakeMaturity StakeMaturity;
void __swift_bridge__$StakeMaturity$_free(void* self);

void* __swift_bridge__$Vec_StakeMaturity$new(void);
void __swift_bridge__$Vec_StakeMaturity$drop(void* vec_ptr);
void __swift_bridge__$Vec_StakeMaturity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_StakeMaturity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_StakeMaturity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_StakeMaturity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_StakeMaturity$len(void* vec_ptr);
void* __swift_bridge__$Vec_StakeMaturity$as_ptr(void* vec_ptr);

typedef struct ListProposalsResponse ListProposalsResponse;
void __swift_bridge__$ListProposalsResponse$_free(void* self);

void* __swift_bridge__$Vec_ListProposalsResponse$new(void);
void __swift_bridge__$Vec_ListProposalsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListProposalsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListProposalsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListProposalsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListProposalsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListProposalsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListProposalsResponse$as_ptr(void* vec_ptr);

typedef struct ListProposals ListProposals;
void __swift_bridge__$ListProposals$_free(void* self);

void* __swift_bridge__$Vec_ListProposals$new(void);
void __swift_bridge__$Vec_ListProposals$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListProposals$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListProposals$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListProposals$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListProposals$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListProposals$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListProposals$as_ptr(void* vec_ptr);

typedef struct ListNeuronsResponse ListNeuronsResponse;
void __swift_bridge__$ListNeuronsResponse$_free(void* self);

void* __swift_bridge__$Vec_ListNeuronsResponse$new(void);
void __swift_bridge__$Vec_ListNeuronsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListNeuronsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListNeuronsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListNeuronsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListNeuronsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListNeuronsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListNeuronsResponse$as_ptr(void* vec_ptr);

typedef struct ListNeurons ListNeurons;
void __swift_bridge__$ListNeurons$_free(void* self);

void* __swift_bridge__$Vec_ListNeurons$new(void);
void __swift_bridge__$Vec_ListNeurons$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListNeurons$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListNeurons$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListNeurons$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListNeurons$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListNeurons$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListNeurons$as_ptr(void* vec_ptr);

typedef struct ListNervousSystemFunctionsResponse ListNervousSystemFunctionsResponse;
void __swift_bridge__$ListNervousSystemFunctionsResponse$_free(void* self);

void* __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$new(void);
void __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListNervousSystemFunctionsResponse$as_ptr(void* vec_ptr);

typedef struct GetSnsInitializationParametersResponse GetSnsInitializationParametersResponse;
void __swift_bridge__$GetSnsInitializationParametersResponse$_free(void* self);

void* __swift_bridge__$Vec_GetSnsInitializationParametersResponse$new(void);
void __swift_bridge__$Vec_GetSnsInitializationParametersResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetSnsInitializationParametersResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetSnsInitializationParametersResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsInitializationParametersResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetSnsInitializationParametersResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetSnsInitializationParametersResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsInitializationParametersResponse$as_ptr(void* vec_ptr);

typedef struct GetSnsInitializationParametersArg GetSnsInitializationParametersArg;
void __swift_bridge__$GetSnsInitializationParametersArg$_free(void* self);

void* __swift_bridge__$Vec_GetSnsInitializationParametersArg$new(void);
void __swift_bridge__$Vec_GetSnsInitializationParametersArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetSnsInitializationParametersArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetSnsInitializationParametersArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsInitializationParametersArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetSnsInitializationParametersArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetSnsInitializationParametersArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsInitializationParametersArg$as_ptr(void* vec_ptr);

typedef struct GetRunningSnsVersionResponse GetRunningSnsVersionResponse;
void __swift_bridge__$GetRunningSnsVersionResponse$_free(void* self);

void* __swift_bridge__$Vec_GetRunningSnsVersionResponse$new(void);
void __swift_bridge__$Vec_GetRunningSnsVersionResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetRunningSnsVersionResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetRunningSnsVersionResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetRunningSnsVersionResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetRunningSnsVersionResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetRunningSnsVersionResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetRunningSnsVersionResponse$as_ptr(void* vec_ptr);

typedef struct GetRunningSnsVersionArg GetRunningSnsVersionArg;
void __swift_bridge__$GetRunningSnsVersionArg$_free(void* self);

void* __swift_bridge__$Vec_GetRunningSnsVersionArg$new(void);
void __swift_bridge__$Vec_GetRunningSnsVersionArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetRunningSnsVersionArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetRunningSnsVersionArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetRunningSnsVersionArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetRunningSnsVersionArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetRunningSnsVersionArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetRunningSnsVersionArg$as_ptr(void* vec_ptr);

typedef struct CanisterStatusResultV2 CanisterStatusResultV2;
void __swift_bridge__$CanisterStatusResultV2$_free(void* self);

void* __swift_bridge__$Vec_CanisterStatusResultV2$new(void);
void __swift_bridge__$Vec_CanisterStatusResultV2$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterStatusResultV2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterStatusResultV2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterStatusResultV2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterStatusResultV2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterStatusResultV2$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterStatusResultV2$as_ptr(void* vec_ptr);

typedef struct DefiniteCanisterSettingsArgs DefiniteCanisterSettingsArgs;
void __swift_bridge__$DefiniteCanisterSettingsArgs$_free(void* self);

void* __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$new(void);
void __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_DefiniteCanisterSettingsArgs$as_ptr(void* vec_ptr);

typedef struct CanisterStatusType CanisterStatusType;
void __swift_bridge__$CanisterStatusType$_free(void* self);

void* __swift_bridge__$Vec_CanisterStatusType$new(void);
void __swift_bridge__$Vec_CanisterStatusType$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterStatusType$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterStatusType$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterStatusType$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterStatusType$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterStatusType$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterStatusType$as_ptr(void* vec_ptr);

typedef struct GetProposalResponse GetProposalResponse;
void __swift_bridge__$GetProposalResponse$_free(void* self);

void* __swift_bridge__$Vec_GetProposalResponse$new(void);
void __swift_bridge__$Vec_GetProposalResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetProposalResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetProposalResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetProposalResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetProposalResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetProposalResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetProposalResponse$as_ptr(void* vec_ptr);

typedef struct SNSGovernanceResult1 SNSGovernanceResult1;
void __swift_bridge__$SNSGovernanceResult1$_free(void* self);

void* __swift_bridge__$Vec_SNSGovernanceResult1$new(void);
void __swift_bridge__$Vec_SNSGovernanceResult1$drop(void* vec_ptr);
void __swift_bridge__$Vec_SNSGovernanceResult1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SNSGovernanceResult1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SNSGovernanceResult1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SNSGovernanceResult1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SNSGovernanceResult1$len(void* vec_ptr);
void* __swift_bridge__$Vec_SNSGovernanceResult1$as_ptr(void* vec_ptr);

typedef struct GetProposal GetProposal;
void __swift_bridge__$GetProposal$_free(void* self);

void* __swift_bridge__$Vec_GetProposal$new(void);
void __swift_bridge__$Vec_GetProposal$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetProposal$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetProposal$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetProposal$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetProposal$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetProposal$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetProposal$as_ptr(void* vec_ptr);

typedef struct GetNeuronResponse GetNeuronResponse;
void __swift_bridge__$GetNeuronResponse$_free(void* self);

void* __swift_bridge__$Vec_GetNeuronResponse$new(void);
void __swift_bridge__$Vec_GetNeuronResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetNeuronResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetNeuronResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetNeuronResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetNeuronResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetNeuronResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetNeuronResponse$as_ptr(void* vec_ptr);

typedef struct SNSGovernanceResult_ SNSGovernanceResult_;
void __swift_bridge__$SNSGovernanceResult_$_free(void* self);

void* __swift_bridge__$Vec_SNSGovernanceResult_$new(void);
void __swift_bridge__$Vec_SNSGovernanceResult_$drop(void* vec_ptr);
void __swift_bridge__$Vec_SNSGovernanceResult_$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SNSGovernanceResult_$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SNSGovernanceResult_$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SNSGovernanceResult_$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SNSGovernanceResult_$len(void* vec_ptr);
void* __swift_bridge__$Vec_SNSGovernanceResult_$as_ptr(void* vec_ptr);

typedef struct GetNeuron GetNeuron;
void __swift_bridge__$GetNeuron$_free(void* self);

void* __swift_bridge__$Vec_GetNeuron$new(void);
void __swift_bridge__$Vec_GetNeuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetNeuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetNeuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetNeuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetNeuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetNeuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetNeuron$as_ptr(void* vec_ptr);

typedef struct GetModeResponse GetModeResponse;
void __swift_bridge__$GetModeResponse$_free(void* self);

void* __swift_bridge__$Vec_GetModeResponse$new(void);
void __swift_bridge__$Vec_GetModeResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetModeResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetModeResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetModeResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetModeResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetModeResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetModeResponse$as_ptr(void* vec_ptr);

typedef struct GetModeArg GetModeArg;
void __swift_bridge__$GetModeArg$_free(void* self);

void* __swift_bridge__$Vec_GetModeArg$new(void);
void __swift_bridge__$Vec_GetModeArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetModeArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetModeArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetModeArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetModeArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetModeArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetModeArg$as_ptr(void* vec_ptr);

typedef struct GetMetadataResponse GetMetadataResponse;
void __swift_bridge__$GetMetadataResponse$_free(void* self);

void* __swift_bridge__$Vec_GetMetadataResponse$new(void);
void __swift_bridge__$Vec_GetMetadataResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetMetadataResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetMetadataResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetMetadataResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetMetadataResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetMetadataResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetMetadataResponse$as_ptr(void* vec_ptr);

typedef struct GetMetadataArg GetMetadataArg;
void __swift_bridge__$GetMetadataArg$_free(void* self);

void* __swift_bridge__$Vec_GetMetadataArg$new(void);
void __swift_bridge__$Vec_GetMetadataArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetMetadataArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetMetadataArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetMetadataArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetMetadataArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetMetadataArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetMetadataArg$as_ptr(void* vec_ptr);

typedef struct GetMaturityModulationResponse GetMaturityModulationResponse;
void __swift_bridge__$GetMaturityModulationResponse$_free(void* self);

void* __swift_bridge__$Vec_GetMaturityModulationResponse$new(void);
void __swift_bridge__$Vec_GetMaturityModulationResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetMaturityModulationResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetMaturityModulationResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetMaturityModulationResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetMaturityModulationResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetMaturityModulationResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetMaturityModulationResponse$as_ptr(void* vec_ptr);

typedef struct GetMaturityModulationArg GetMaturityModulationArg;
void __swift_bridge__$GetMaturityModulationArg$_free(void* self);

void* __swift_bridge__$Vec_GetMaturityModulationArg$new(void);
void __swift_bridge__$Vec_GetMaturityModulationArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetMaturityModulationArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetMaturityModulationArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetMaturityModulationArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetMaturityModulationArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetMaturityModulationArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetMaturityModulationArg$as_ptr(void* vec_ptr);

typedef struct FailStuckUpgradeInProgressRet FailStuckUpgradeInProgressRet;
void __swift_bridge__$FailStuckUpgradeInProgressRet$_free(void* self);

void* __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$new(void);
void __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$drop(void* vec_ptr);
void __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$len(void* vec_ptr);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressRet$as_ptr(void* vec_ptr);

typedef struct FailStuckUpgradeInProgressArg FailStuckUpgradeInProgressArg;
void __swift_bridge__$FailStuckUpgradeInProgressArg$_free(void* self);

void* __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$new(void);
void __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_FailStuckUpgradeInProgressArg$as_ptr(void* vec_ptr);

typedef struct ClaimSwapNeuronsResponse ClaimSwapNeuronsResponse;
void __swift_bridge__$ClaimSwapNeuronsResponse$_free(void* self);

void* __swift_bridge__$Vec_ClaimSwapNeuronsResponse$new(void);
void __swift_bridge__$Vec_ClaimSwapNeuronsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ClaimSwapNeuronsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ClaimSwapNeuronsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResponse$as_ptr(void* vec_ptr);

typedef struct ClaimSwapNeuronsResult ClaimSwapNeuronsResult;
void __swift_bridge__$ClaimSwapNeuronsResult$_free(void* self);

void* __swift_bridge__$Vec_ClaimSwapNeuronsResult$new(void);
void __swift_bridge__$Vec_ClaimSwapNeuronsResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_ClaimSwapNeuronsResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ClaimSwapNeuronsResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsResult$as_ptr(void* vec_ptr);

typedef struct ClaimedSwapNeurons ClaimedSwapNeurons;
void __swift_bridge__$ClaimedSwapNeurons$_free(void* self);

void* __swift_bridge__$Vec_ClaimedSwapNeurons$new(void);
void __swift_bridge__$Vec_ClaimedSwapNeurons$drop(void* vec_ptr);
void __swift_bridge__$Vec_ClaimedSwapNeurons$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ClaimedSwapNeurons$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimedSwapNeurons$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ClaimedSwapNeurons$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ClaimedSwapNeurons$len(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimedSwapNeurons$as_ptr(void* vec_ptr);

typedef struct SwapNeuron SwapNeuron;
void __swift_bridge__$SwapNeuron$_free(void* self);

void* __swift_bridge__$Vec_SwapNeuron$new(void);
void __swift_bridge__$Vec_SwapNeuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_SwapNeuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SwapNeuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SwapNeuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SwapNeuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SwapNeuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_SwapNeuron$as_ptr(void* vec_ptr);

typedef struct ClaimSwapNeuronsRequest ClaimSwapNeuronsRequest;
void __swift_bridge__$ClaimSwapNeuronsRequest$_free(void* self);

void* __swift_bridge__$Vec_ClaimSwapNeuronsRequest$new(void);
void __swift_bridge__$Vec_ClaimSwapNeuronsRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_ClaimSwapNeuronsRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ClaimSwapNeuronsRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ClaimSwapNeuronsRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimSwapNeuronsRequest$as_ptr(void* vec_ptr);

typedef struct NeuronParameters NeuronParameters;
void __swift_bridge__$NeuronParameters$_free(void* self);

void* __swift_bridge__$Vec_NeuronParameters$new(void);
void __swift_bridge__$Vec_NeuronParameters$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronParameters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronParameters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronParameters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronParameters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronParameters$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronParameters$as_ptr(void* vec_ptr);

typedef struct Governance Governance;
void __swift_bridge__$Governance$_free(void* self);

void* __swift_bridge__$Vec_Governance$new(void);
void __swift_bridge__$Vec_Governance$drop(void* vec_ptr);
void __swift_bridge__$Vec_Governance$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Governance$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Governance$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Governance$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Governance$len(void* vec_ptr);
void* __swift_bridge__$Vec_Governance$as_ptr(void* vec_ptr);

typedef struct Neuron Neuron;
void __swift_bridge__$Neuron$_free(void* self);

void* __swift_bridge__$Vec_Neuron$new(void);
void __swift_bridge__$Vec_Neuron$drop(void* vec_ptr);
void __swift_bridge__$Vec_Neuron$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Neuron$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Neuron$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Neuron$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Neuron$len(void* vec_ptr);
void* __swift_bridge__$Vec_Neuron$as_ptr(void* vec_ptr);

typedef struct DisburseMaturityInProgress DisburseMaturityInProgress;
void __swift_bridge__$DisburseMaturityInProgress$_free(void* self);

void* __swift_bridge__$Vec_DisburseMaturityInProgress$new(void);
void __swift_bridge__$Vec_DisburseMaturityInProgress$drop(void* vec_ptr);
void __swift_bridge__$Vec_DisburseMaturityInProgress$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DisburseMaturityInProgress$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseMaturityInProgress$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DisburseMaturityInProgress$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DisburseMaturityInProgress$len(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseMaturityInProgress$as_ptr(void* vec_ptr);

typedef struct DissolveState DissolveState;
void __swift_bridge__$DissolveState$_free(void* self);

void* __swift_bridge__$Vec_DissolveState$new(void);
void __swift_bridge__$Vec_DissolveState$drop(void* vec_ptr);
void __swift_bridge__$Vec_DissolveState$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DissolveState$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DissolveState$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DissolveState$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DissolveState$len(void* vec_ptr);
void* __swift_bridge__$Vec_DissolveState$as_ptr(void* vec_ptr);

typedef struct NeuronPermission NeuronPermission;
void __swift_bridge__$NeuronPermission$_free(void* self);

void* __swift_bridge__$Vec_NeuronPermission$new(void);
void __swift_bridge__$Vec_NeuronPermission$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronPermission$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronPermission$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronPermission$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronPermission$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronPermission$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronPermission$as_ptr(void* vec_ptr);

typedef struct NeuronInFlightCommand NeuronInFlightCommand;
void __swift_bridge__$NeuronInFlightCommand$_free(void* self);

void* __swift_bridge__$Vec_NeuronInFlightCommand$new(void);
void __swift_bridge__$Vec_NeuronInFlightCommand$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronInFlightCommand$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronInFlightCommand$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronInFlightCommand$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronInFlightCommand$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronInFlightCommand$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronInFlightCommand$as_ptr(void* vec_ptr);

typedef struct Command2 Command2;
void __swift_bridge__$Command2$_free(void* self);

void* __swift_bridge__$Vec_Command2$new(void);
void __swift_bridge__$Vec_Command2$drop(void* vec_ptr);
void __swift_bridge__$Vec_Command2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Command2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Command2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Command2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Command2$len(void* vec_ptr);
void* __swift_bridge__$Vec_Command2$as_ptr(void* vec_ptr);

typedef struct Disburse Disburse;
void __swift_bridge__$Disburse$_free(void* self);

void* __swift_bridge__$Vec_Disburse$new(void);
void __swift_bridge__$Vec_Disburse$drop(void* vec_ptr);
void __swift_bridge__$Vec_Disburse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Disburse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Disburse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Disburse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Disburse$len(void* vec_ptr);
void* __swift_bridge__$Vec_Disburse$as_ptr(void* vec_ptr);

typedef struct Amount Amount;
void __swift_bridge__$Amount$_free(void* self);

void* __swift_bridge__$Vec_Amount$new(void);
void __swift_bridge__$Vec_Amount$drop(void* vec_ptr);
void __swift_bridge__$Vec_Amount$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Amount$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Amount$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Amount$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Amount$len(void* vec_ptr);
void* __swift_bridge__$Vec_Amount$as_ptr(void* vec_ptr);

typedef struct MergeMaturity MergeMaturity;
void __swift_bridge__$MergeMaturity$_free(void* self);

void* __swift_bridge__$Vec_MergeMaturity$new(void);
void __swift_bridge__$Vec_MergeMaturity$drop(void* vec_ptr);
void __swift_bridge__$Vec_MergeMaturity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MergeMaturity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MergeMaturity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MergeMaturity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MergeMaturity$len(void* vec_ptr);
void* __swift_bridge__$Vec_MergeMaturity$as_ptr(void* vec_ptr);

typedef struct AddNeuronPermissions AddNeuronPermissions;
void __swift_bridge__$AddNeuronPermissions$_free(void* self);

void* __swift_bridge__$Vec_AddNeuronPermissions$new(void);
void __swift_bridge__$Vec_AddNeuronPermissions$drop(void* vec_ptr);
void __swift_bridge__$Vec_AddNeuronPermissions$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AddNeuronPermissions$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AddNeuronPermissions$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AddNeuronPermissions$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AddNeuronPermissions$len(void* vec_ptr);
void* __swift_bridge__$Vec_AddNeuronPermissions$as_ptr(void* vec_ptr);

typedef struct RemoveNeuronPermissions RemoveNeuronPermissions;
void __swift_bridge__$RemoveNeuronPermissions$_free(void* self);

void* __swift_bridge__$Vec_RemoveNeuronPermissions$new(void);
void __swift_bridge__$Vec_RemoveNeuronPermissions$drop(void* vec_ptr);
void __swift_bridge__$Vec_RemoveNeuronPermissions$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RemoveNeuronPermissions$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RemoveNeuronPermissions$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RemoveNeuronPermissions$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RemoveNeuronPermissions$len(void* vec_ptr);
void* __swift_bridge__$Vec_RemoveNeuronPermissions$as_ptr(void* vec_ptr);

typedef struct ClaimOrRefresh ClaimOrRefresh;
void __swift_bridge__$ClaimOrRefresh$_free(void* self);

void* __swift_bridge__$Vec_ClaimOrRefresh$new(void);
void __swift_bridge__$Vec_ClaimOrRefresh$drop(void* vec_ptr);
void __swift_bridge__$Vec_ClaimOrRefresh$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ClaimOrRefresh$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimOrRefresh$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ClaimOrRefresh$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ClaimOrRefresh$len(void* vec_ptr);
void* __swift_bridge__$Vec_ClaimOrRefresh$as_ptr(void* vec_ptr);

typedef struct By By;
void __swift_bridge__$By$_free(void* self);

void* __swift_bridge__$Vec_By$new(void);
void __swift_bridge__$Vec_By$drop(void* vec_ptr);
void __swift_bridge__$Vec_By$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_By$pop(void* vec_ptr);
void* __swift_bridge__$Vec_By$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_By$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_By$len(void* vec_ptr);
void* __swift_bridge__$Vec_By$as_ptr(void* vec_ptr);

typedef struct MemoAndController MemoAndController;
void __swift_bridge__$MemoAndController$_free(void* self);

void* __swift_bridge__$Vec_MemoAndController$new(void);
void __swift_bridge__$Vec_MemoAndController$drop(void* vec_ptr);
void __swift_bridge__$Vec_MemoAndController$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MemoAndController$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MemoAndController$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MemoAndController$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MemoAndController$len(void* vec_ptr);
void* __swift_bridge__$Vec_MemoAndController$as_ptr(void* vec_ptr);

typedef struct FinalizeDisburseMaturity FinalizeDisburseMaturity;
void __swift_bridge__$FinalizeDisburseMaturity$_free(void* self);

void* __swift_bridge__$Vec_FinalizeDisburseMaturity$new(void);
void __swift_bridge__$Vec_FinalizeDisburseMaturity$drop(void* vec_ptr);
void __swift_bridge__$Vec_FinalizeDisburseMaturity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FinalizeDisburseMaturity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FinalizeDisburseMaturity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FinalizeDisburseMaturity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FinalizeDisburseMaturity$len(void* vec_ptr);
void* __swift_bridge__$Vec_FinalizeDisburseMaturity$as_ptr(void* vec_ptr);

typedef struct RegisterVote RegisterVote;
void __swift_bridge__$RegisterVote$_free(void* self);

void* __swift_bridge__$Vec_RegisterVote$new(void);
void __swift_bridge__$Vec_RegisterVote$drop(void* vec_ptr);
void __swift_bridge__$Vec_RegisterVote$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RegisterVote$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterVote$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RegisterVote$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RegisterVote$len(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterVote$as_ptr(void* vec_ptr);

typedef struct Configure Configure;
void __swift_bridge__$Configure$_free(void* self);

void* __swift_bridge__$Vec_Configure$new(void);
void __swift_bridge__$Vec_Configure$drop(void* vec_ptr);
void __swift_bridge__$Vec_Configure$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Configure$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Configure$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Configure$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Configure$len(void* vec_ptr);
void* __swift_bridge__$Vec_Configure$as_ptr(void* vec_ptr);

typedef struct Operation Operation;
void __swift_bridge__$Operation$_free(void* self);

void* __swift_bridge__$Vec_Operation$new(void);
void __swift_bridge__$Vec_Operation$drop(void* vec_ptr);
void __swift_bridge__$Vec_Operation$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Operation$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Operation$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Operation$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Operation$len(void* vec_ptr);
void* __swift_bridge__$Vec_Operation$as_ptr(void* vec_ptr);

typedef struct SetDissolveTimestamp SetDissolveTimestamp;
void __swift_bridge__$SetDissolveTimestamp$_free(void* self);

void* __swift_bridge__$Vec_SetDissolveTimestamp$new(void);
void __swift_bridge__$Vec_SetDissolveTimestamp$drop(void* vec_ptr);
void __swift_bridge__$Vec_SetDissolveTimestamp$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SetDissolveTimestamp$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SetDissolveTimestamp$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SetDissolveTimestamp$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SetDissolveTimestamp$len(void* vec_ptr);
void* __swift_bridge__$Vec_SetDissolveTimestamp$as_ptr(void* vec_ptr);

typedef struct IncreaseDissolveDelay IncreaseDissolveDelay;
void __swift_bridge__$IncreaseDissolveDelay$_free(void* self);

void* __swift_bridge__$Vec_IncreaseDissolveDelay$new(void);
void __swift_bridge__$Vec_IncreaseDissolveDelay$drop(void* vec_ptr);
void __swift_bridge__$Vec_IncreaseDissolveDelay$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_IncreaseDissolveDelay$pop(void* vec_ptr);
void* __swift_bridge__$Vec_IncreaseDissolveDelay$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_IncreaseDissolveDelay$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_IncreaseDissolveDelay$len(void* vec_ptr);
void* __swift_bridge__$Vec_IncreaseDissolveDelay$as_ptr(void* vec_ptr);

typedef struct ChangeAutoStakeMaturity ChangeAutoStakeMaturity;
void __swift_bridge__$ChangeAutoStakeMaturity$_free(void* self);

void* __swift_bridge__$Vec_ChangeAutoStakeMaturity$new(void);
void __swift_bridge__$Vec_ChangeAutoStakeMaturity$drop(void* vec_ptr);
void __swift_bridge__$Vec_ChangeAutoStakeMaturity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ChangeAutoStakeMaturity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeAutoStakeMaturity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ChangeAutoStakeMaturity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ChangeAutoStakeMaturity$len(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeAutoStakeMaturity$as_ptr(void* vec_ptr);

typedef struct DisburseMaturity DisburseMaturity;
void __swift_bridge__$DisburseMaturity$_free(void* self);

void* __swift_bridge__$Vec_DisburseMaturity$new(void);
void __swift_bridge__$Vec_DisburseMaturity$drop(void* vec_ptr);
void __swift_bridge__$Vec_DisburseMaturity$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DisburseMaturity$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseMaturity$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DisburseMaturity$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DisburseMaturity$len(void* vec_ptr);
void* __swift_bridge__$Vec_DisburseMaturity$as_ptr(void* vec_ptr);

typedef struct Follow Follow;
void __swift_bridge__$Follow$_free(void* self);

void* __swift_bridge__$Vec_Follow$new(void);
void __swift_bridge__$Vec_Follow$drop(void* vec_ptr);
void __swift_bridge__$Vec_Follow$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Follow$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Follow$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Follow$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Follow$len(void* vec_ptr);
void* __swift_bridge__$Vec_Follow$as_ptr(void* vec_ptr);

typedef struct Split Split;
void __swift_bridge__$Split$_free(void* self);

void* __swift_bridge__$Vec_Split$new(void);
void __swift_bridge__$Vec_Split$drop(void* vec_ptr);
void __swift_bridge__$Vec_Split$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Split$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Split$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Split$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Split$len(void* vec_ptr);
void* __swift_bridge__$Vec_Split$as_ptr(void* vec_ptr);

typedef struct ProposalData ProposalData;
void __swift_bridge__$ProposalData$_free(void* self);

void* __swift_bridge__$Vec_ProposalData$new(void);
void __swift_bridge__$Vec_ProposalData$drop(void* vec_ptr);
void __swift_bridge__$Vec_ProposalData$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ProposalData$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ProposalData$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ProposalData$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ProposalData$len(void* vec_ptr);
void* __swift_bridge__$Vec_ProposalData$as_ptr(void* vec_ptr);

typedef struct WaitForQuietState WaitForQuietState;
void __swift_bridge__$WaitForQuietState$_free(void* self);

void* __swift_bridge__$Vec_WaitForQuietState$new(void);
void __swift_bridge__$Vec_WaitForQuietState$drop(void* vec_ptr);
void __swift_bridge__$Vec_WaitForQuietState$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_WaitForQuietState$pop(void* vec_ptr);
void* __swift_bridge__$Vec_WaitForQuietState$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_WaitForQuietState$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_WaitForQuietState$len(void* vec_ptr);
void* __swift_bridge__$Vec_WaitForQuietState$as_ptr(void* vec_ptr);

typedef struct Proposal Proposal;
void __swift_bridge__$Proposal$_free(void* self);

void* __swift_bridge__$Vec_Proposal$new(void);
void __swift_bridge__$Vec_Proposal$drop(void* vec_ptr);
void __swift_bridge__$Vec_Proposal$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Proposal$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Proposal$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Proposal$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Proposal$len(void* vec_ptr);
void* __swift_bridge__$Vec_Proposal$as_ptr(void* vec_ptr);

typedef struct Action Action;
void __swift_bridge__$Action$_free(void* self);

void* __swift_bridge__$Vec_Action$new(void);
void __swift_bridge__$Vec_Action$drop(void* vec_ptr);
void __swift_bridge__$Vec_Action$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Action$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Action$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Action$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Action$len(void* vec_ptr);
void* __swift_bridge__$Vec_Action$as_ptr(void* vec_ptr);

typedef struct Motion Motion;
void __swift_bridge__$Motion$_free(void* self);

void* __swift_bridge__$Vec_Motion$new(void);
void __swift_bridge__$Vec_Motion$drop(void* vec_ptr);
void __swift_bridge__$Vec_Motion$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Motion$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Motion$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Motion$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Motion$len(void* vec_ptr);
void* __swift_bridge__$Vec_Motion$as_ptr(void* vec_ptr);

typedef struct ManageLedgerParameters ManageLedgerParameters;
void __swift_bridge__$ManageLedgerParameters$_free(void* self);

void* __swift_bridge__$Vec_ManageLedgerParameters$new(void);
void __swift_bridge__$Vec_ManageLedgerParameters$drop(void* vec_ptr);
void __swift_bridge__$Vec_ManageLedgerParameters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ManageLedgerParameters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ManageLedgerParameters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ManageLedgerParameters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ManageLedgerParameters$len(void* vec_ptr);
void* __swift_bridge__$Vec_ManageLedgerParameters$as_ptr(void* vec_ptr);

typedef struct ExecuteGenericNervousSystemFunction ExecuteGenericNervousSystemFunction;
void __swift_bridge__$ExecuteGenericNervousSystemFunction$_free(void* self);

void* __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$new(void);
void __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$drop(void* vec_ptr);
void __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$len(void* vec_ptr);
void* __swift_bridge__$Vec_ExecuteGenericNervousSystemFunction$as_ptr(void* vec_ptr);

typedef struct ManageSnsMetadata ManageSnsMetadata;
void __swift_bridge__$ManageSnsMetadata$_free(void* self);

void* __swift_bridge__$Vec_ManageSnsMetadata$new(void);
void __swift_bridge__$Vec_ManageSnsMetadata$drop(void* vec_ptr);
void __swift_bridge__$Vec_ManageSnsMetadata$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ManageSnsMetadata$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ManageSnsMetadata$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ManageSnsMetadata$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ManageSnsMetadata$len(void* vec_ptr);
void* __swift_bridge__$Vec_ManageSnsMetadata$as_ptr(void* vec_ptr);

typedef struct MintSnsTokens MintSnsTokens;
void __swift_bridge__$MintSnsTokens$_free(void* self);

void* __swift_bridge__$Vec_MintSnsTokens$new(void);
void __swift_bridge__$Vec_MintSnsTokens$drop(void* vec_ptr);
void __swift_bridge__$Vec_MintSnsTokens$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MintSnsTokens$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MintSnsTokens$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MintSnsTokens$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MintSnsTokens$len(void* vec_ptr);
void* __swift_bridge__$Vec_MintSnsTokens$as_ptr(void* vec_ptr);

typedef struct DeregisterDappCanisters DeregisterDappCanisters;
void __swift_bridge__$DeregisterDappCanisters$_free(void* self);

void* __swift_bridge__$Vec_DeregisterDappCanisters$new(void);
void __swift_bridge__$Vec_DeregisterDappCanisters$drop(void* vec_ptr);
void __swift_bridge__$Vec_DeregisterDappCanisters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DeregisterDappCanisters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DeregisterDappCanisters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DeregisterDappCanisters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DeregisterDappCanisters$len(void* vec_ptr);
void* __swift_bridge__$Vec_DeregisterDappCanisters$as_ptr(void* vec_ptr);

typedef struct UpgradeSnsControlledCanister UpgradeSnsControlledCanister;
void __swift_bridge__$UpgradeSnsControlledCanister$_free(void* self);

void* __swift_bridge__$Vec_UpgradeSnsControlledCanister$new(void);
void __swift_bridge__$Vec_UpgradeSnsControlledCanister$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpgradeSnsControlledCanister$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpgradeSnsControlledCanister$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeSnsControlledCanister$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpgradeSnsControlledCanister$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpgradeSnsControlledCanister$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeSnsControlledCanister$as_ptr(void* vec_ptr);

typedef struct TransferSnsTreasuryFunds TransferSnsTreasuryFunds;
void __swift_bridge__$TransferSnsTreasuryFunds$_free(void* self);

void* __swift_bridge__$Vec_TransferSnsTreasuryFunds$new(void);
void __swift_bridge__$Vec_TransferSnsTreasuryFunds$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferSnsTreasuryFunds$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferSnsTreasuryFunds$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferSnsTreasuryFunds$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferSnsTreasuryFunds$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferSnsTreasuryFunds$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferSnsTreasuryFunds$as_ptr(void* vec_ptr);

typedef struct RegisterDappCanisters RegisterDappCanisters;
void __swift_bridge__$RegisterDappCanisters$_free(void* self);

void* __swift_bridge__$Vec_RegisterDappCanisters$new(void);
void __swift_bridge__$Vec_RegisterDappCanisters$drop(void* vec_ptr);
void __swift_bridge__$Vec_RegisterDappCanisters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RegisterDappCanisters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RegisterDappCanisters$len(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisters$as_ptr(void* vec_ptr);

typedef struct ManageDappCanisterSettings ManageDappCanisterSettings;
void __swift_bridge__$ManageDappCanisterSettings$_free(void* self);

void* __swift_bridge__$Vec_ManageDappCanisterSettings$new(void);
void __swift_bridge__$Vec_ManageDappCanisterSettings$drop(void* vec_ptr);
void __swift_bridge__$Vec_ManageDappCanisterSettings$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettings$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettings$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ManageDappCanisterSettings$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ManageDappCanisterSettings$len(void* vec_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettings$as_ptr(void* vec_ptr);

typedef struct Tally Tally;
void __swift_bridge__$Tally$_free(void* self);

void* __swift_bridge__$Vec_Tally$new(void);
void __swift_bridge__$Vec_Tally$drop(void* vec_ptr);
void __swift_bridge__$Vec_Tally$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Tally$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Tally$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Tally$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Tally$len(void* vec_ptr);
void* __swift_bridge__$Vec_Tally$as_ptr(void* vec_ptr);

typedef struct Percentage Percentage;
void __swift_bridge__$Percentage$_free(void* self);

void* __swift_bridge__$Vec_Percentage$new(void);
void __swift_bridge__$Vec_Percentage$drop(void* vec_ptr);
void __swift_bridge__$Vec_Percentage$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Percentage$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Percentage$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Percentage$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Percentage$len(void* vec_ptr);
void* __swift_bridge__$Vec_Percentage$as_ptr(void* vec_ptr);

typedef struct Ballot Ballot;
void __swift_bridge__$Ballot$_free(void* self);

void* __swift_bridge__$Vec_Ballot$new(void);
void __swift_bridge__$Vec_Ballot$drop(void* vec_ptr);
void __swift_bridge__$Vec_Ballot$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Ballot$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Ballot$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Ballot$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Ballot$len(void* vec_ptr);
void* __swift_bridge__$Vec_Ballot$as_ptr(void* vec_ptr);

typedef struct ActionAuxiliary ActionAuxiliary;
void __swift_bridge__$ActionAuxiliary$_free(void* self);

void* __swift_bridge__$Vec_ActionAuxiliary$new(void);
void __swift_bridge__$Vec_ActionAuxiliary$drop(void* vec_ptr);
void __swift_bridge__$Vec_ActionAuxiliary$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ActionAuxiliary$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ActionAuxiliary$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ActionAuxiliary$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ActionAuxiliary$len(void* vec_ptr);
void* __swift_bridge__$Vec_ActionAuxiliary$as_ptr(void* vec_ptr);

typedef struct MintSnsTokensActionAuxiliary MintSnsTokensActionAuxiliary;
void __swift_bridge__$MintSnsTokensActionAuxiliary$_free(void* self);

void* __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$new(void);
void __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$drop(void* vec_ptr);
void __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$len(void* vec_ptr);
void* __swift_bridge__$Vec_MintSnsTokensActionAuxiliary$as_ptr(void* vec_ptr);

typedef struct Valuation Valuation;
void __swift_bridge__$Valuation$_free(void* self);

void* __swift_bridge__$Vec_Valuation$new(void);
void __swift_bridge__$Vec_Valuation$drop(void* vec_ptr);
void __swift_bridge__$Vec_Valuation$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Valuation$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Valuation$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Valuation$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Valuation$len(void* vec_ptr);
void* __swift_bridge__$Vec_Valuation$as_ptr(void* vec_ptr);

typedef struct ValuationFactors ValuationFactors;
void __swift_bridge__$ValuationFactors$_free(void* self);

void* __swift_bridge__$Vec_ValuationFactors$new(void);
void __swift_bridge__$Vec_ValuationFactors$drop(void* vec_ptr);
void __swift_bridge__$Vec_ValuationFactors$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ValuationFactors$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ValuationFactors$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ValuationFactors$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ValuationFactors$len(void* vec_ptr);
void* __swift_bridge__$Vec_ValuationFactors$as_ptr(void* vec_ptr);

typedef struct Tokens Tokens;
void __swift_bridge__$Tokens$_free(void* self);

void* __swift_bridge__$Vec_Tokens$new(void);
void __swift_bridge__$Vec_Tokens$drop(void* vec_ptr);
void __swift_bridge__$Vec_Tokens$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Tokens$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Tokens$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Tokens$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Tokens$len(void* vec_ptr);
void* __swift_bridge__$Vec_Tokens$as_ptr(void* vec_ptr);

typedef struct Decimal Decimal;
void __swift_bridge__$Decimal$_free(void* self);

void* __swift_bridge__$Vec_Decimal$new(void);
void __swift_bridge__$Vec_Decimal$drop(void* vec_ptr);
void __swift_bridge__$Vec_Decimal$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Decimal$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Decimal$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Decimal$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Decimal$len(void* vec_ptr);
void* __swift_bridge__$Vec_Decimal$as_ptr(void* vec_ptr);

typedef struct Account Account;
void __swift_bridge__$Account$_free(void* self);

void* __swift_bridge__$Vec_Account$new(void);
void __swift_bridge__$Vec_Account$drop(void* vec_ptr);
void __swift_bridge__$Vec_Account$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Account$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Account$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Account$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Account$len(void* vec_ptr);
void* __swift_bridge__$Vec_Account$as_ptr(void* vec_ptr);

typedef struct Subaccount Subaccount;
void __swift_bridge__$Subaccount$_free(void* self);

void* __swift_bridge__$Vec_Subaccount$new(void);
void __swift_bridge__$Vec_Subaccount$drop(void* vec_ptr);
void __swift_bridge__$Vec_Subaccount$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Subaccount$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Subaccount$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Subaccount$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Subaccount$len(void* vec_ptr);
void* __swift_bridge__$Vec_Subaccount$as_ptr(void* vec_ptr);

typedef struct UpgradeInProgress UpgradeInProgress;
void __swift_bridge__$UpgradeInProgress$_free(void* self);

void* __swift_bridge__$Vec_UpgradeInProgress$new(void);
void __swift_bridge__$Vec_UpgradeInProgress$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpgradeInProgress$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpgradeInProgress$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeInProgress$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpgradeInProgress$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpgradeInProgress$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeInProgress$as_ptr(void* vec_ptr);

typedef struct RewardEvent RewardEvent;
void __swift_bridge__$RewardEvent$_free(void* self);

void* __swift_bridge__$Vec_RewardEvent$new(void);
void __swift_bridge__$Vec_RewardEvent$drop(void* vec_ptr);
void __swift_bridge__$Vec_RewardEvent$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RewardEvent$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RewardEvent$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RewardEvent$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RewardEvent$len(void* vec_ptr);
void* __swift_bridge__$Vec_RewardEvent$as_ptr(void* vec_ptr);

typedef struct ProposalId ProposalId;
void __swift_bridge__$ProposalId$_free(void* self);

void* __swift_bridge__$Vec_ProposalId$new(void);
void __swift_bridge__$Vec_ProposalId$drop(void* vec_ptr);
void __swift_bridge__$Vec_ProposalId$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ProposalId$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ProposalId$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ProposalId$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ProposalId$len(void* vec_ptr);
void* __swift_bridge__$Vec_ProposalId$as_ptr(void* vec_ptr);

typedef struct Version Version;
void __swift_bridge__$Version$_free(void* self);

void* __swift_bridge__$Vec_Version$new(void);
void __swift_bridge__$Vec_Version$drop(void* vec_ptr);
void __swift_bridge__$Vec_Version$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Version$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Version$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Version$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Version$len(void* vec_ptr);
void* __swift_bridge__$Vec_Version$as_ptr(void* vec_ptr);

typedef struct NervousSystemParameters NervousSystemParameters;
void __swift_bridge__$NervousSystemParameters$_free(void* self);

void* __swift_bridge__$Vec_NervousSystemParameters$new(void);
void __swift_bridge__$Vec_NervousSystemParameters$drop(void* vec_ptr);
void __swift_bridge__$Vec_NervousSystemParameters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NervousSystemParameters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NervousSystemParameters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NervousSystemParameters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NervousSystemParameters$len(void* vec_ptr);
void* __swift_bridge__$Vec_NervousSystemParameters$as_ptr(void* vec_ptr);

typedef struct VotingRewardsParameters VotingRewardsParameters;
void __swift_bridge__$VotingRewardsParameters$_free(void* self);

void* __swift_bridge__$Vec_VotingRewardsParameters$new(void);
void __swift_bridge__$Vec_VotingRewardsParameters$drop(void* vec_ptr);
void __swift_bridge__$Vec_VotingRewardsParameters$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_VotingRewardsParameters$pop(void* vec_ptr);
void* __swift_bridge__$Vec_VotingRewardsParameters$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_VotingRewardsParameters$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_VotingRewardsParameters$len(void* vec_ptr);
void* __swift_bridge__$Vec_VotingRewardsParameters$as_ptr(void* vec_ptr);

typedef struct NeuronPermissionList NeuronPermissionList;
void __swift_bridge__$NeuronPermissionList$_free(void* self);

void* __swift_bridge__$Vec_NeuronPermissionList$new(void);
void __swift_bridge__$Vec_NeuronPermissionList$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronPermissionList$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronPermissionList$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronPermissionList$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronPermissionList$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronPermissionList$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronPermissionList$as_ptr(void* vec_ptr);

typedef struct DefaultFollowees DefaultFollowees;
void __swift_bridge__$DefaultFollowees$_free(void* self);

void* __swift_bridge__$Vec_DefaultFollowees$new(void);
void __swift_bridge__$Vec_DefaultFollowees$drop(void* vec_ptr);
void __swift_bridge__$Vec_DefaultFollowees$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DefaultFollowees$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DefaultFollowees$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DefaultFollowees$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DefaultFollowees$len(void* vec_ptr);
void* __swift_bridge__$Vec_DefaultFollowees$as_ptr(void* vec_ptr);

typedef struct Followees Followees;
void __swift_bridge__$Followees$_free(void* self);

void* __swift_bridge__$Vec_Followees$new(void);
void __swift_bridge__$Vec_Followees$drop(void* vec_ptr);
void __swift_bridge__$Vec_Followees$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Followees$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Followees$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Followees$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Followees$len(void* vec_ptr);
void* __swift_bridge__$Vec_Followees$as_ptr(void* vec_ptr);

typedef struct NeuronId NeuronId;
void __swift_bridge__$NeuronId$_free(void* self);

void* __swift_bridge__$Vec_NeuronId$new(void);
void __swift_bridge__$Vec_NeuronId$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronId$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronId$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronId$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronId$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronId$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronId$as_ptr(void* vec_ptr);

typedef struct MaturityModulation MaturityModulation;
void __swift_bridge__$MaturityModulation$_free(void* self);

void* __swift_bridge__$Vec_MaturityModulation$new(void);
void __swift_bridge__$Vec_MaturityModulation$drop(void* vec_ptr);
void __swift_bridge__$Vec_MaturityModulation$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MaturityModulation$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MaturityModulation$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MaturityModulation$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MaturityModulation$len(void* vec_ptr);
void* __swift_bridge__$Vec_MaturityModulation$as_ptr(void* vec_ptr);

typedef struct GovernanceCachedMetrics GovernanceCachedMetrics;
void __swift_bridge__$GovernanceCachedMetrics$_free(void* self);

void* __swift_bridge__$Vec_GovernanceCachedMetrics$new(void);
void __swift_bridge__$Vec_GovernanceCachedMetrics$drop(void* vec_ptr);
void __swift_bridge__$Vec_GovernanceCachedMetrics$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GovernanceCachedMetrics$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GovernanceCachedMetrics$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GovernanceCachedMetrics$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GovernanceCachedMetrics$len(void* vec_ptr);
void* __swift_bridge__$Vec_GovernanceCachedMetrics$as_ptr(void* vec_ptr);

typedef struct NervousSystemFunction NervousSystemFunction;
void __swift_bridge__$NervousSystemFunction$_free(void* self);

void* __swift_bridge__$Vec_NervousSystemFunction$new(void);
void __swift_bridge__$Vec_NervousSystemFunction$drop(void* vec_ptr);
void __swift_bridge__$Vec_NervousSystemFunction$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NervousSystemFunction$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NervousSystemFunction$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NervousSystemFunction$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NervousSystemFunction$len(void* vec_ptr);
void* __swift_bridge__$Vec_NervousSystemFunction$as_ptr(void* vec_ptr);

typedef struct FunctionType FunctionType;
void __swift_bridge__$FunctionType$_free(void* self);

void* __swift_bridge__$Vec_FunctionType$new(void);
void __swift_bridge__$Vec_FunctionType$drop(void* vec_ptr);
void __swift_bridge__$Vec_FunctionType$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FunctionType$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FunctionType$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FunctionType$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FunctionType$len(void* vec_ptr);
void* __swift_bridge__$Vec_FunctionType$as_ptr(void* vec_ptr);

typedef struct GenericNervousSystemFunction GenericNervousSystemFunction;
void __swift_bridge__$GenericNervousSystemFunction$_free(void* self);

void* __swift_bridge__$Vec_GenericNervousSystemFunction$new(void);
void __swift_bridge__$Vec_GenericNervousSystemFunction$drop(void* vec_ptr);
void __swift_bridge__$Vec_GenericNervousSystemFunction$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GenericNervousSystemFunction$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GenericNervousSystemFunction$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GenericNervousSystemFunction$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GenericNervousSystemFunction$len(void* vec_ptr);
void* __swift_bridge__$Vec_GenericNervousSystemFunction$as_ptr(void* vec_ptr);

void __swift_bridge__$Service$claim_swap_neurons(void* callback_wrapper, void __swift_bridge__$Service$claim_swap_neurons$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$fail_stuck_upgrade_in_progress(void* callback_wrapper, void __swift_bridge__$Service$fail_stuck_upgrade_in_progress$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_build_metadata(void* callback_wrapper, void __swift_bridge__$Service$get_build_metadata$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_latest_reward_event(void* callback_wrapper, void __swift_bridge__$Service$get_latest_reward_event$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_maturity_modulation(void* callback_wrapper, void __swift_bridge__$Service$get_maturity_modulation$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_metadata(void* callback_wrapper, void __swift_bridge__$Service$get_metadata$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_mode(void* callback_wrapper, void __swift_bridge__$Service$get_mode$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_nervous_system_parameters(void* callback_wrapper, void __swift_bridge__$Service$get_nervous_system_parameters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_neuron(void* callback_wrapper, void __swift_bridge__$Service$get_neuron$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_proposal(void* callback_wrapper, void __swift_bridge__$Service$get_proposal$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_root_canister_status(void* callback_wrapper, void __swift_bridge__$Service$get_root_canister_status$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_running_sns_version(void* callback_wrapper, void __swift_bridge__$Service$get_running_sns_version$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_sns_initialization_parameters(void* callback_wrapper, void __swift_bridge__$Service$get_sns_initialization_parameters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_nervous_system_functions(void* callback_wrapper, void __swift_bridge__$Service$list_nervous_system_functions$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$list_neurons(void* callback_wrapper, void __swift_bridge__$Service$list_neurons$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_proposals(void* callback_wrapper, void __swift_bridge__$Service$list_proposals$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$manage_neuron(void* callback_wrapper, void __swift_bridge__$Service$manage_neuron$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$set_mode(void* callback_wrapper, void __swift_bridge__$Service$set_mode$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);


// File automatically generated by swift-bridge.
typedef struct ListSubaccountsArgs ListSubaccountsArgs;
void __swift_bridge__$ListSubaccountsArgs$_free(void* self);

void* __swift_bridge__$Vec_ListSubaccountsArgs$new(void);
void __swift_bridge__$Vec_ListSubaccountsArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListSubaccountsArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListSubaccountsArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListSubaccountsArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListSubaccountsArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListSubaccountsArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListSubaccountsArgs$as_ptr(void* vec_ptr);

typedef struct SubAccount SubAccount;
void __swift_bridge__$SubAccount$_free(void* self);

void* __swift_bridge__$Vec_SubAccount$new(void);
void __swift_bridge__$Vec_SubAccount$drop(void* vec_ptr);
void __swift_bridge__$Vec_SubAccount$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SubAccount$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SubAccount$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SubAccount$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SubAccount$len(void* vec_ptr);
void* __swift_bridge__$Vec_SubAccount$as_ptr(void* vec_ptr);

typedef struct GetTransactionsResult GetTransactionsResult;
void __swift_bridge__$GetTransactionsResult$_free(void* self);

void* __swift_bridge__$Vec_GetTransactionsResult$new(void);
void __swift_bridge__$Vec_GetTransactionsResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetTransactionsResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetTransactionsResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetTransactionsResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetTransactionsResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsResult$as_ptr(void* vec_ptr);

typedef struct GetTransactionsErr GetTransactionsErr;
void __swift_bridge__$GetTransactionsErr$_free(void* self);

void* __swift_bridge__$Vec_GetTransactionsErr$new(void);
void __swift_bridge__$Vec_GetTransactionsErr$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetTransactionsErr$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetTransactionsErr$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsErr$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetTransactionsErr$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetTransactionsErr$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsErr$as_ptr(void* vec_ptr);

typedef struct GetTransactions GetTransactions;
void __swift_bridge__$GetTransactions$_free(void* self);

void* __swift_bridge__$Vec_GetTransactions$new(void);
void __swift_bridge__$Vec_GetTransactions$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetTransactions$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetTransactions$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactions$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetTransactions$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetTransactions$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactions$as_ptr(void* vec_ptr);

typedef struct TransactionWithId TransactionWithId;
void __swift_bridge__$TransactionWithId$_free(void* self);

void* __swift_bridge__$Vec_TransactionWithId$new(void);
void __swift_bridge__$Vec_TransactionWithId$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransactionWithId$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransactionWithId$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransactionWithId$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransactionWithId$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransactionWithId$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransactionWithId$as_ptr(void* vec_ptr);

typedef struct Transaction Transaction;
void __swift_bridge__$Transaction$_free(void* self);

void* __swift_bridge__$Vec_Transaction$new(void);
void __swift_bridge__$Vec_Transaction$drop(void* vec_ptr);
void __swift_bridge__$Vec_Transaction$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Transaction$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Transaction$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Transaction$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Transaction$len(void* vec_ptr);
void* __swift_bridge__$Vec_Transaction$as_ptr(void* vec_ptr);

typedef struct Transfer Transfer;
void __swift_bridge__$Transfer$_free(void* self);

void* __swift_bridge__$Vec_Transfer$new(void);
void __swift_bridge__$Vec_Transfer$drop(void* vec_ptr);
void __swift_bridge__$Vec_Transfer$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Transfer$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Transfer$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Transfer$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Transfer$len(void* vec_ptr);
void* __swift_bridge__$Vec_Transfer$as_ptr(void* vec_ptr);

typedef struct Approve Approve;
void __swift_bridge__$Approve$_free(void* self);

void* __swift_bridge__$Vec_Approve$new(void);
void __swift_bridge__$Vec_Approve$drop(void* vec_ptr);
void __swift_bridge__$Vec_Approve$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Approve$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Approve$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Approve$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Approve$len(void* vec_ptr);
void* __swift_bridge__$Vec_Approve$as_ptr(void* vec_ptr);

typedef struct Mint Mint;
void __swift_bridge__$Mint$_free(void* self);

void* __swift_bridge__$Vec_Mint$new(void);
void __swift_bridge__$Vec_Mint$drop(void* vec_ptr);
void __swift_bridge__$Vec_Mint$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Mint$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Mint$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Mint$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Mint$len(void* vec_ptr);
void* __swift_bridge__$Vec_Mint$as_ptr(void* vec_ptr);

typedef struct Burn Burn;
void __swift_bridge__$Burn$_free(void* self);

void* __swift_bridge__$Vec_Burn$new(void);
void __swift_bridge__$Vec_Burn$drop(void* vec_ptr);
void __swift_bridge__$Vec_Burn$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Burn$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Burn$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Burn$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Burn$len(void* vec_ptr);
void* __swift_bridge__$Vec_Burn$as_ptr(void* vec_ptr);

typedef struct GetAccountTransactionsArgs GetAccountTransactionsArgs;
void __swift_bridge__$GetAccountTransactionsArgs$_free(void* self);

void* __swift_bridge__$Vec_GetAccountTransactionsArgs$new(void);
void __swift_bridge__$Vec_GetAccountTransactionsArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetAccountTransactionsArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetAccountTransactionsArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetAccountTransactionsArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetAccountTransactionsArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetAccountTransactionsArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetAccountTransactionsArgs$as_ptr(void* vec_ptr);

typedef struct TxId TxId;
void __swift_bridge__$TxId$_free(void* self);

void* __swift_bridge__$Vec_TxId$new(void);
void __swift_bridge__$Vec_TxId$drop(void* vec_ptr);
void __swift_bridge__$Vec_TxId$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TxId$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TxId$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TxId$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TxId$len(void* vec_ptr);
void* __swift_bridge__$Vec_TxId$as_ptr(void* vec_ptr);

typedef struct InitArgs InitArgs;
void __swift_bridge__$InitArgs$_free(void* self);

void* __swift_bridge__$Vec_InitArgs$new(void);
void __swift_bridge__$Vec_InitArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_InitArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_InitArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_InitArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_InitArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_InitArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_InitArgs$as_ptr(void* vec_ptr);

void __swift_bridge__$Service$get_account_transactions(void* callback_wrapper, void __swift_bridge__$Service$get_account_transactions$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$ledger_id(void* callback_wrapper, void __swift_bridge__$Service$ledger_id$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$list_subaccounts(void* callback_wrapper, void __swift_bridge__$Service$list_subaccounts$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);


// File automatically generated by swift-bridge.
#include <stdint.h>
typedef struct Icrc3DataCertificateResult Icrc3DataCertificateResult;
void __swift_bridge__$Icrc3DataCertificateResult$_free(void* self);

void* __swift_bridge__$Vec_Icrc3DataCertificateResult$new(void);
void __swift_bridge__$Vec_Icrc3DataCertificateResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_Icrc3DataCertificateResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Icrc3DataCertificateResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3DataCertificateResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Icrc3DataCertificateResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Icrc3DataCertificateResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3DataCertificateResult$as_ptr(void* vec_ptr);

typedef struct AccountResult AccountResult;
void __swift_bridge__$AccountResult$_free(void* self);

void* __swift_bridge__$Vec_AccountResult$new(void);
void __swift_bridge__$Vec_AccountResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_AccountResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AccountResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AccountResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AccountResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AccountResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_AccountResult$as_ptr(void* vec_ptr);

typedef struct MetadataEntry MetadataEntry;
void __swift_bridge__$MetadataEntry$_free(void* self);

void* __swift_bridge__$Vec_MetadataEntry$new(void);
void __swift_bridge__$Vec_MetadataEntry$drop(void* vec_ptr);
void __swift_bridge__$Vec_MetadataEntry$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MetadataEntry$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MetadataEntry$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MetadataEntry$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MetadataEntry$len(void* vec_ptr);
void* __swift_bridge__$Vec_MetadataEntry$as_ptr(void* vec_ptr);

typedef struct Icrc3SupportedBlockTypesRetItem Icrc3SupportedBlockTypesRetItem;
void __swift_bridge__$Icrc3SupportedBlockTypesRetItem$_free(void* self);

void* __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$new(void);
void __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3SupportedBlockTypesRetItem$as_ptr(void* vec_ptr);

typedef struct Icrc3DataCertificate Icrc3DataCertificate;
void __swift_bridge__$Icrc3DataCertificate$_free(void* self);

void* __swift_bridge__$Vec_Icrc3DataCertificate$new(void);
void __swift_bridge__$Vec_Icrc3DataCertificate$drop(void* vec_ptr);
void __swift_bridge__$Vec_Icrc3DataCertificate$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Icrc3DataCertificate$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3DataCertificate$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Icrc3DataCertificate$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Icrc3DataCertificate$len(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3DataCertificate$as_ptr(void* vec_ptr);

typedef struct GetBlocksResult GetBlocksResult;
void __swift_bridge__$GetBlocksResult$_free(void* self);

void* __swift_bridge__$Vec_GetBlocksResult$new(void);
void __swift_bridge__$Vec_GetBlocksResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBlocksResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBlocksResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBlocksResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBlocksResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResult$as_ptr(void* vec_ptr);

typedef struct GetBlocksResultArchivedBlocksItem GetBlocksResultArchivedBlocksItem;
void __swift_bridge__$GetBlocksResultArchivedBlocksItem$_free(void* self);

void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$new(void);
void __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItem$as_ptr(void* vec_ptr);

typedef struct GetBlocksResultArchivedBlocksItemCallback GetBlocksResultArchivedBlocksItemCallback;
void __swift_bridge__$GetBlocksResultArchivedBlocksItemCallback$_free(void* self);

void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$new(void);
void __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResultArchivedBlocksItemCallback$as_ptr(void* vec_ptr);

typedef struct GetBlocksResultBlocksItem GetBlocksResultBlocksItem;
void __swift_bridge__$GetBlocksResultBlocksItem$_free(void* self);

void* __swift_bridge__$Vec_GetBlocksResultBlocksItem$new(void);
void __swift_bridge__$Vec_GetBlocksResultBlocksItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBlocksResultBlocksItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBlocksResultBlocksItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResultBlocksItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBlocksResultBlocksItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBlocksResultBlocksItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResultBlocksItem$as_ptr(void* vec_ptr);

typedef struct Icrc3Value Icrc3Value;
void __swift_bridge__$Icrc3Value$_free(void* self);

void* __swift_bridge__$Vec_Icrc3Value$new(void);
void __swift_bridge__$Vec_Icrc3Value$drop(void* vec_ptr);
void __swift_bridge__$Vec_Icrc3Value$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Icrc3Value$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3Value$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Icrc3Value$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Icrc3Value$len(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc3Value$as_ptr(void* vec_ptr);

typedef struct GetArchivesResult GetArchivesResult;
void __swift_bridge__$GetArchivesResult$_free(void* self);

void* __swift_bridge__$Vec_GetArchivesResult$new(void);
void __swift_bridge__$Vec_GetArchivesResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetArchivesResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetArchivesResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetArchivesResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetArchivesResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetArchivesResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetArchivesResult$as_ptr(void* vec_ptr);

typedef struct GetArchivesResultItem GetArchivesResultItem;
void __swift_bridge__$GetArchivesResultItem$_free(void* self);

void* __swift_bridge__$Vec_GetArchivesResultItem$new(void);
void __swift_bridge__$Vec_GetArchivesResultItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetArchivesResultItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetArchivesResultItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetArchivesResultItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetArchivesResultItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetArchivesResultItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetArchivesResultItem$as_ptr(void* vec_ptr);

typedef struct GetArchivesArgs GetArchivesArgs;
void __swift_bridge__$GetArchivesArgs$_free(void* self);

void* __swift_bridge__$Vec_GetArchivesArgs$new(void);
void __swift_bridge__$Vec_GetArchivesArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetArchivesArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetArchivesArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetArchivesArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetArchivesArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetArchivesArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetArchivesArgs$as_ptr(void* vec_ptr);

typedef struct TransferFromResult TransferFromResult;
void __swift_bridge__$TransferFromResult$_free(void* self);

void* __swift_bridge__$Vec_TransferFromResult$new(void);
void __swift_bridge__$Vec_TransferFromResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferFromResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferFromResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferFromResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferFromResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferFromResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferFromResult$as_ptr(void* vec_ptr);

typedef struct TransferFromError TransferFromError;
void __swift_bridge__$TransferFromError$_free(void* self);

void* __swift_bridge__$Vec_TransferFromError$new(void);
void __swift_bridge__$Vec_TransferFromError$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferFromError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferFromError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferFromError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferFromError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferFromError$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferFromError$as_ptr(void* vec_ptr);

typedef struct TransferFromArgs TransferFromArgs;
void __swift_bridge__$TransferFromArgs$_free(void* self);

void* __swift_bridge__$Vec_TransferFromArgs$new(void);
void __swift_bridge__$Vec_TransferFromArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferFromArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferFromArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferFromArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferFromArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferFromArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferFromArgs$as_ptr(void* vec_ptr);

typedef struct ApproveResult ApproveResult;
void __swift_bridge__$ApproveResult$_free(void* self);

void* __swift_bridge__$Vec_ApproveResult$new(void);
void __swift_bridge__$Vec_ApproveResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_ApproveResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ApproveResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ApproveResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ApproveResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ApproveResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_ApproveResult$as_ptr(void* vec_ptr);

typedef struct ApproveError ApproveError;
void __swift_bridge__$ApproveError$_free(void* self);

void* __swift_bridge__$Vec_ApproveError$new(void);
void __swift_bridge__$Vec_ApproveError$drop(void* vec_ptr);
void __swift_bridge__$Vec_ApproveError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ApproveError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ApproveError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ApproveError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ApproveError$len(void* vec_ptr);
void* __swift_bridge__$Vec_ApproveError$as_ptr(void* vec_ptr);

typedef struct ApproveArgs ApproveArgs;
void __swift_bridge__$ApproveArgs$_free(void* self);

void* __swift_bridge__$Vec_ApproveArgs$new(void);
void __swift_bridge__$Vec_ApproveArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_ApproveArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ApproveArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ApproveArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ApproveArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ApproveArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_ApproveArgs$as_ptr(void* vec_ptr);

typedef struct Allowance Allowance;
void __swift_bridge__$Allowance$_free(void* self);

void* __swift_bridge__$Vec_Allowance$new(void);
void __swift_bridge__$Vec_Allowance$drop(void* vec_ptr);
void __swift_bridge__$Vec_Allowance$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Allowance$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Allowance$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Allowance$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Allowance$len(void* vec_ptr);
void* __swift_bridge__$Vec_Allowance$as_ptr(void* vec_ptr);

typedef struct AllowanceArgs AllowanceArgs;
void __swift_bridge__$AllowanceArgs$_free(void* self);

void* __swift_bridge__$Vec_AllowanceArgs$new(void);
void __swift_bridge__$Vec_AllowanceArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_AllowanceArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_AllowanceArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_AllowanceArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_AllowanceArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_AllowanceArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_AllowanceArgs$as_ptr(void* vec_ptr);

typedef struct TransferResult TransferResult;
void __swift_bridge__$TransferResult$_free(void* self);

void* __swift_bridge__$Vec_TransferResult$new(void);
void __swift_bridge__$Vec_TransferResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferResult$as_ptr(void* vec_ptr);

typedef struct TransferArg TransferArg;
void __swift_bridge__$TransferArg$_free(void* self);

void* __swift_bridge__$Vec_TransferArg$new(void);
void __swift_bridge__$Vec_TransferArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferArg$as_ptr(void* vec_ptr);

typedef struct StandardRecord StandardRecord;
void __swift_bridge__$StandardRecord$_free(void* self);

void* __swift_bridge__$Vec_StandardRecord$new(void);
void __swift_bridge__$Vec_StandardRecord$drop(void* vec_ptr);
void __swift_bridge__$Vec_StandardRecord$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_StandardRecord$pop(void* vec_ptr);
void* __swift_bridge__$Vec_StandardRecord$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_StandardRecord$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_StandardRecord$len(void* vec_ptr);
void* __swift_bridge__$Vec_StandardRecord$as_ptr(void* vec_ptr);

typedef struct GetTransactionsResponse GetTransactionsResponse;
void __swift_bridge__$GetTransactionsResponse$_free(void* self);

void* __swift_bridge__$Vec_GetTransactionsResponse$new(void);
void __swift_bridge__$Vec_GetTransactionsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetTransactionsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetTransactionsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetTransactionsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetTransactionsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsResponse$as_ptr(void* vec_ptr);

typedef struct GetTransactionsResponseArchivedTransactionsItem GetTransactionsResponseArchivedTransactionsItem;
void __swift_bridge__$GetTransactionsResponseArchivedTransactionsItem$_free(void* self);

void* __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$new(void);
void __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsResponseArchivedTransactionsItem$as_ptr(void* vec_ptr);

typedef struct QueryArchiveFn QueryArchiveFn;
void __swift_bridge__$QueryArchiveFn$_free(void* self);

void* __swift_bridge__$Vec_QueryArchiveFn$new(void);
void __swift_bridge__$Vec_QueryArchiveFn$drop(void* vec_ptr);
void __swift_bridge__$Vec_QueryArchiveFn$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_QueryArchiveFn$pop(void* vec_ptr);
void* __swift_bridge__$Vec_QueryArchiveFn$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_QueryArchiveFn$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_QueryArchiveFn$len(void* vec_ptr);
void* __swift_bridge__$Vec_QueryArchiveFn$as_ptr(void* vec_ptr);

typedef struct TransactionRange TransactionRange;
void __swift_bridge__$TransactionRange$_free(void* self);

void* __swift_bridge__$Vec_TransactionRange$new(void);
void __swift_bridge__$Vec_TransactionRange$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransactionRange$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransactionRange$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransactionRange$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransactionRange$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransactionRange$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransactionRange$as_ptr(void* vec_ptr);

typedef struct Timestamp Timestamp;
void __swift_bridge__$Timestamp$_free(void* self);

void* __swift_bridge__$Vec_Timestamp$new(void);
void __swift_bridge__$Vec_Timestamp$drop(void* vec_ptr);
void __swift_bridge__$Vec_Timestamp$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Timestamp$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Timestamp$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Timestamp$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Timestamp$len(void* vec_ptr);
void* __swift_bridge__$Vec_Timestamp$as_ptr(void* vec_ptr);

typedef struct GetTransactionsRequest GetTransactionsRequest;
void __swift_bridge__$GetTransactionsRequest$_free(void* self);

void* __swift_bridge__$Vec_GetTransactionsRequest$new(void);
void __swift_bridge__$Vec_GetTransactionsRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetTransactionsRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetTransactionsRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetTransactionsRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetTransactionsRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetTransactionsRequest$as_ptr(void* vec_ptr);

typedef struct TxIndex TxIndex;
void __swift_bridge__$TxIndex$_free(void* self);

void* __swift_bridge__$Vec_TxIndex$new(void);
void __swift_bridge__$Vec_TxIndex$drop(void* vec_ptr);
void __swift_bridge__$Vec_TxIndex$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TxIndex$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TxIndex$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TxIndex$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TxIndex$len(void* vec_ptr);
void* __swift_bridge__$Vec_TxIndex$as_ptr(void* vec_ptr);

typedef struct DataCertificate DataCertificate;
void __swift_bridge__$DataCertificate$_free(void* self);

void* __swift_bridge__$Vec_DataCertificate$new(void);
void __swift_bridge__$Vec_DataCertificate$drop(void* vec_ptr);
void __swift_bridge__$Vec_DataCertificate$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DataCertificate$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DataCertificate$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DataCertificate$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DataCertificate$len(void* vec_ptr);
void* __swift_bridge__$Vec_DataCertificate$as_ptr(void* vec_ptr);

typedef struct GetBlocksResponse GetBlocksResponse;
void __swift_bridge__$GetBlocksResponse$_free(void* self);

void* __swift_bridge__$Vec_GetBlocksResponse$new(void);
void __swift_bridge__$Vec_GetBlocksResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBlocksResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBlocksResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBlocksResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBlocksResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResponse$as_ptr(void* vec_ptr);

typedef struct GetBlocksResponseArchivedBlocksItem GetBlocksResponseArchivedBlocksItem;
void __swift_bridge__$GetBlocksResponseArchivedBlocksItem$_free(void* self);

void* __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$new(void);
void __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksResponseArchivedBlocksItem$as_ptr(void* vec_ptr);

typedef struct QueryBlockArchiveFn QueryBlockArchiveFn;
void __swift_bridge__$QueryBlockArchiveFn$_free(void* self);

void* __swift_bridge__$Vec_QueryBlockArchiveFn$new(void);
void __swift_bridge__$Vec_QueryBlockArchiveFn$drop(void* vec_ptr);
void __swift_bridge__$Vec_QueryBlockArchiveFn$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_QueryBlockArchiveFn$pop(void* vec_ptr);
void* __swift_bridge__$Vec_QueryBlockArchiveFn$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_QueryBlockArchiveFn$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_QueryBlockArchiveFn$len(void* vec_ptr);
void* __swift_bridge__$Vec_QueryBlockArchiveFn$as_ptr(void* vec_ptr);

typedef struct BlockRange BlockRange;
void __swift_bridge__$BlockRange$_free(void* self);

void* __swift_bridge__$Vec_BlockRange$new(void);
void __swift_bridge__$Vec_BlockRange$drop(void* vec_ptr);
void __swift_bridge__$Vec_BlockRange$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BlockRange$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BlockRange$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BlockRange$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BlockRange$len(void* vec_ptr);
void* __swift_bridge__$Vec_BlockRange$as_ptr(void* vec_ptr);

typedef struct Block Block;
void __swift_bridge__$Block$_free(void* self);

void* __swift_bridge__$Vec_Block$new(void);
void __swift_bridge__$Vec_Block$drop(void* vec_ptr);
void __swift_bridge__$Vec_Block$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Block$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Block$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Block$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Block$len(void* vec_ptr);
void* __swift_bridge__$Vec_Block$as_ptr(void* vec_ptr);

typedef struct Value Value;
void __swift_bridge__$Value$_free(void* self);

void* __swift_bridge__$Vec_Value$new(void);
void __swift_bridge__$Vec_Value$drop(void* vec_ptr);
void __swift_bridge__$Vec_Value$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Value$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Value$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Value$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Value$len(void* vec_ptr);
void* __swift_bridge__$Vec_Value$as_ptr(void* vec_ptr);

typedef struct Map Map;
void __swift_bridge__$Map$_free(void* self);

void* __swift_bridge__$Vec_Map$new(void);
void __swift_bridge__$Vec_Map$drop(void* vec_ptr);
void __swift_bridge__$Vec_Map$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Map$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Map$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Map$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Map$len(void* vec_ptr);
void* __swift_bridge__$Vec_Map$as_ptr(void* vec_ptr);

typedef struct GetBlocksArgs GetBlocksArgs;
void __swift_bridge__$GetBlocksArgs$_free(void* self);

void* __swift_bridge__$Vec_GetBlocksArgs$new(void);
void __swift_bridge__$Vec_GetBlocksArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBlocksArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBlocksArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBlocksArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBlocksArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBlocksArgs$as_ptr(void* vec_ptr);

typedef struct ArchiveInfo ArchiveInfo;
void __swift_bridge__$ArchiveInfo$_free(void* self);

void* __swift_bridge__$Vec_ArchiveInfo$new(void);
void __swift_bridge__$Vec_ArchiveInfo$drop(void* vec_ptr);
void __swift_bridge__$Vec_ArchiveInfo$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ArchiveInfo$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ArchiveInfo$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ArchiveInfo$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ArchiveInfo$len(void* vec_ptr);
void* __swift_bridge__$Vec_ArchiveInfo$as_ptr(void* vec_ptr);

typedef struct BlockIndex BlockIndex;
void __swift_bridge__$BlockIndex$_free(void* self);

void* __swift_bridge__$Vec_BlockIndex$new(void);
void __swift_bridge__$Vec_BlockIndex$drop(void* vec_ptr);
void __swift_bridge__$Vec_BlockIndex$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BlockIndex$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BlockIndex$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BlockIndex$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BlockIndex$len(void* vec_ptr);
void* __swift_bridge__$Vec_BlockIndex$as_ptr(void* vec_ptr);

typedef struct LedgerArg LedgerArg;
void __swift_bridge__$LedgerArg$_free(void* self);

void* __swift_bridge__$Vec_LedgerArg$new(void);
void __swift_bridge__$Vec_LedgerArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_LedgerArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_LedgerArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_LedgerArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_LedgerArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_LedgerArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_LedgerArg$as_ptr(void* vec_ptr);

typedef struct InitArgsArchiveOptions InitArgsArchiveOptions;
void __swift_bridge__$InitArgsArchiveOptions$_free(void* self);

void* __swift_bridge__$Vec_InitArgsArchiveOptions$new(void);
void __swift_bridge__$Vec_InitArgsArchiveOptions$drop(void* vec_ptr);
void __swift_bridge__$Vec_InitArgsArchiveOptions$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_InitArgsArchiveOptions$pop(void* vec_ptr);
void* __swift_bridge__$Vec_InitArgsArchiveOptions$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_InitArgsArchiveOptions$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_InitArgsArchiveOptions$len(void* vec_ptr);
void* __swift_bridge__$Vec_InitArgsArchiveOptions$as_ptr(void* vec_ptr);

typedef struct UpgradeArgs UpgradeArgs;
void __swift_bridge__$UpgradeArgs$_free(void* self);

void* __swift_bridge__$Vec_UpgradeArgs$new(void);
void __swift_bridge__$Vec_UpgradeArgs$drop(void* vec_ptr);
void __swift_bridge__$Vec_UpgradeArgs$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_UpgradeArgs$pop(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeArgs$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_UpgradeArgs$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_UpgradeArgs$len(void* vec_ptr);
void* __swift_bridge__$Vec_UpgradeArgs$as_ptr(void* vec_ptr);

typedef struct FeatureFlags FeatureFlags;
void __swift_bridge__$FeatureFlags$_free(void* self);

void* __swift_bridge__$Vec_FeatureFlags$new(void);
void __swift_bridge__$Vec_FeatureFlags$drop(void* vec_ptr);
void __swift_bridge__$Vec_FeatureFlags$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FeatureFlags$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FeatureFlags$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FeatureFlags$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FeatureFlags$len(void* vec_ptr);
void* __swift_bridge__$Vec_FeatureFlags$as_ptr(void* vec_ptr);

typedef struct ChangeFeeCollector ChangeFeeCollector;
void __swift_bridge__$ChangeFeeCollector$_free(void* self);

void* __swift_bridge__$Vec_ChangeFeeCollector$new(void);
void __swift_bridge__$Vec_ChangeFeeCollector$drop(void* vec_ptr);
void __swift_bridge__$Vec_ChangeFeeCollector$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ChangeFeeCollector$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeFeeCollector$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ChangeFeeCollector$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ChangeFeeCollector$len(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeFeeCollector$as_ptr(void* vec_ptr);

typedef struct MetadataValue MetadataValue;
void __swift_bridge__$MetadataValue$_free(void* self);

void* __swift_bridge__$Vec_MetadataValue$new(void);
void __swift_bridge__$Vec_MetadataValue$drop(void* vec_ptr);
void __swift_bridge__$Vec_MetadataValue$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_MetadataValue$pop(void* vec_ptr);
void* __swift_bridge__$Vec_MetadataValue$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_MetadataValue$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_MetadataValue$len(void* vec_ptr);
void* __swift_bridge__$Vec_MetadataValue$as_ptr(void* vec_ptr);

typedef struct ChangeArchiveOptions ChangeArchiveOptions;
void __swift_bridge__$ChangeArchiveOptions$_free(void* self);

void* __swift_bridge__$Vec_ChangeArchiveOptions$new(void);
void __swift_bridge__$Vec_ChangeArchiveOptions$drop(void* vec_ptr);
void __swift_bridge__$Vec_ChangeArchiveOptions$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ChangeArchiveOptions$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeArchiveOptions$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ChangeArchiveOptions$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ChangeArchiveOptions$len(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeArchiveOptions$as_ptr(void* vec_ptr);

void __swift_bridge__$Service$archives(void* callback_wrapper, void __swift_bridge__$Service$archives$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_blocks(void* callback_wrapper, void __swift_bridge__$Service$get_blocks$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_data_certificate(void* callback_wrapper, void __swift_bridge__$Service$get_data_certificate$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$get_transactions(void* callback_wrapper, void __swift_bridge__$Service$get_transactions$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_1_balance_of(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_balance_of$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_1_decimals(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_decimals$async(void* callback_wrapper, struct __swift_bridge__$ResultU8AndAgentError ret), void* self);
void __swift_bridge__$Service$icrc_1_fee(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_fee$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_1_metadata(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_metadata$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_1_minting_account(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_minting_account$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_1_name(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_name$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_1_supported_standards(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_supported_standards$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_1_symbol(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_symbol$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_1_total_supply(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_total_supply$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_1_transfer(void* callback_wrapper, void __swift_bridge__$Service$icrc_1_transfer$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_2_allowance(void* callback_wrapper, void __swift_bridge__$Service$icrc_2_allowance$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_2_approve(void* callback_wrapper, void __swift_bridge__$Service$icrc_2_approve$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_2_transfer_from(void* callback_wrapper, void __swift_bridge__$Service$icrc_2_transfer_from$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_3_get_archives(void* callback_wrapper, void __swift_bridge__$Service$icrc_3_get_archives$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_3_get_blocks(void* callback_wrapper, void __swift_bridge__$Service$icrc_3_get_blocks$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$icrc_3_get_tip_certificate(void* callback_wrapper, void __swift_bridge__$Service$icrc_3_get_tip_certificate$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
void __swift_bridge__$Service$icrc_3_supported_block_types(void* callback_wrapper, void __swift_bridge__$Service$icrc_3_supported_block_types$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self);
typedef enum __swift_bridge__$ResultU8AndAgentError$Tag {__swift_bridge__$ResultU8AndAgentError$ResultOk, __swift_bridge__$ResultU8AndAgentError$ResultErr} __swift_bridge__$ResultU8AndAgentError$Tag;
union __swift_bridge__$ResultU8AndAgentError$Fields {uint8_t ok; void* err;};
typedef struct __swift_bridge__$ResultU8AndAgentError{__swift_bridge__$ResultU8AndAgentError$Tag tag; union __swift_bridge__$ResultU8AndAgentError$Fields payload;} __swift_bridge__$ResultU8AndAgentError;


// File automatically generated by swift-bridge.
typedef struct SetDappControllersResponse SetDappControllersResponse;
void __swift_bridge__$SetDappControllersResponse$_free(void* self);

void* __swift_bridge__$Vec_SetDappControllersResponse$new(void);
void __swift_bridge__$Vec_SetDappControllersResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_SetDappControllersResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SetDappControllersResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SetDappControllersResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SetDappControllersResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SetDappControllersResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_SetDappControllersResponse$as_ptr(void* vec_ptr);

typedef struct FailedUpdate FailedUpdate;
void __swift_bridge__$FailedUpdate$_free(void* self);

void* __swift_bridge__$Vec_FailedUpdate$new(void);
void __swift_bridge__$Vec_FailedUpdate$drop(void* vec_ptr);
void __swift_bridge__$Vec_FailedUpdate$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FailedUpdate$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FailedUpdate$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FailedUpdate$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FailedUpdate$len(void* vec_ptr);
void* __swift_bridge__$Vec_FailedUpdate$as_ptr(void* vec_ptr);

typedef struct CanisterCallError CanisterCallError;
void __swift_bridge__$CanisterCallError$_free(void* self);

void* __swift_bridge__$Vec_CanisterCallError$new(void);
void __swift_bridge__$Vec_CanisterCallError$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterCallError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterCallError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterCallError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterCallError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterCallError$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterCallError$as_ptr(void* vec_ptr);

typedef struct SetDappControllersRequest SetDappControllersRequest;
void __swift_bridge__$SetDappControllersRequest$_free(void* self);

void* __swift_bridge__$Vec_SetDappControllersRequest$new(void);
void __swift_bridge__$Vec_SetDappControllersRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_SetDappControllersRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SetDappControllersRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SetDappControllersRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SetDappControllersRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SetDappControllersRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_SetDappControllersRequest$as_ptr(void* vec_ptr);

typedef struct RegisterDappCanistersRet RegisterDappCanistersRet;
void __swift_bridge__$RegisterDappCanistersRet$_free(void* self);

void* __swift_bridge__$Vec_RegisterDappCanistersRet$new(void);
void __swift_bridge__$Vec_RegisterDappCanistersRet$drop(void* vec_ptr);
void __swift_bridge__$Vec_RegisterDappCanistersRet$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RegisterDappCanistersRet$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanistersRet$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RegisterDappCanistersRet$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RegisterDappCanistersRet$len(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanistersRet$as_ptr(void* vec_ptr);

typedef struct RegisterDappCanistersRequest RegisterDappCanistersRequest;
void __swift_bridge__$RegisterDappCanistersRequest$_free(void* self);

void* __swift_bridge__$Vec_RegisterDappCanistersRequest$new(void);
void __swift_bridge__$Vec_RegisterDappCanistersRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_RegisterDappCanistersRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RegisterDappCanistersRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanistersRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RegisterDappCanistersRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RegisterDappCanistersRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanistersRequest$as_ptr(void* vec_ptr);

typedef struct RegisterDappCanisterRet RegisterDappCanisterRet;
void __swift_bridge__$RegisterDappCanisterRet$_free(void* self);

void* __swift_bridge__$Vec_RegisterDappCanisterRet$new(void);
void __swift_bridge__$Vec_RegisterDappCanisterRet$drop(void* vec_ptr);
void __swift_bridge__$Vec_RegisterDappCanisterRet$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisterRet$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisterRet$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RegisterDappCanisterRet$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RegisterDappCanisterRet$len(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisterRet$as_ptr(void* vec_ptr);

typedef struct RegisterDappCanisterRequest RegisterDappCanisterRequest;
void __swift_bridge__$RegisterDappCanisterRequest$_free(void* self);

void* __swift_bridge__$Vec_RegisterDappCanisterRequest$new(void);
void __swift_bridge__$Vec_RegisterDappCanisterRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_RegisterDappCanisterRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisterRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisterRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RegisterDappCanisterRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RegisterDappCanisterRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_RegisterDappCanisterRequest$as_ptr(void* vec_ptr);

typedef struct ManageDappCanisterSettingsResponse ManageDappCanisterSettingsResponse;
void __swift_bridge__$ManageDappCanisterSettingsResponse$_free(void* self);

void* __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$new(void);
void __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsResponse$as_ptr(void* vec_ptr);

typedef struct ManageDappCanisterSettingsRequest ManageDappCanisterSettingsRequest;
void __swift_bridge__$ManageDappCanisterSettingsRequest$_free(void* self);

void* __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$new(void);
void __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_ManageDappCanisterSettingsRequest$as_ptr(void* vec_ptr);

typedef struct ListSnsCanistersResponse ListSnsCanistersResponse;
void __swift_bridge__$ListSnsCanistersResponse$_free(void* self);

void* __swift_bridge__$Vec_ListSnsCanistersResponse$new(void);
void __swift_bridge__$Vec_ListSnsCanistersResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListSnsCanistersResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListSnsCanistersResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsCanistersResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListSnsCanistersResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListSnsCanistersResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsCanistersResponse$as_ptr(void* vec_ptr);

typedef struct ListSnsCanistersArg ListSnsCanistersArg;
void __swift_bridge__$ListSnsCanistersArg$_free(void* self);

void* __swift_bridge__$Vec_ListSnsCanistersArg$new(void);
void __swift_bridge__$Vec_ListSnsCanistersArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListSnsCanistersArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListSnsCanistersArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsCanistersArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListSnsCanistersArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListSnsCanistersArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsCanistersArg$as_ptr(void* vec_ptr);

typedef struct GetSnsCanistersSummaryResponse GetSnsCanistersSummaryResponse;
void __swift_bridge__$GetSnsCanistersSummaryResponse$_free(void* self);

void* __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$new(void);
void __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryResponse$as_ptr(void* vec_ptr);

typedef struct CanisterSummary CanisterSummary;
void __swift_bridge__$CanisterSummary$_free(void* self);

void* __swift_bridge__$Vec_CanisterSummary$new(void);
void __swift_bridge__$Vec_CanisterSummary$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterSummary$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterSummary$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterSummary$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterSummary$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterSummary$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterSummary$as_ptr(void* vec_ptr);

typedef struct GetSnsCanistersSummaryRequest GetSnsCanistersSummaryRequest;
void __swift_bridge__$GetSnsCanistersSummaryRequest$_free(void* self);

void* __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$new(void);
void __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetSnsCanistersSummaryRequest$as_ptr(void* vec_ptr);

typedef struct ChangeCanisterRequest ChangeCanisterRequest;
void __swift_bridge__$ChangeCanisterRequest$_free(void* self);

void* __swift_bridge__$Vec_ChangeCanisterRequest$new(void);
void __swift_bridge__$Vec_ChangeCanisterRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_ChangeCanisterRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ChangeCanisterRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeCanisterRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ChangeCanisterRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ChangeCanisterRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_ChangeCanisterRequest$as_ptr(void* vec_ptr);

typedef struct CanisterInstallMode CanisterInstallMode;
void __swift_bridge__$CanisterInstallMode$_free(void* self);

void* __swift_bridge__$Vec_CanisterInstallMode$new(void);
void __swift_bridge__$Vec_CanisterInstallMode$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterInstallMode$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterInstallMode$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterInstallMode$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterInstallMode$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterInstallMode$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterInstallMode$as_ptr(void* vec_ptr);

typedef struct CanisterStatusResult CanisterStatusResult;
void __swift_bridge__$CanisterStatusResult$_free(void* self);

void* __swift_bridge__$Vec_CanisterStatusResult$new(void);
void __swift_bridge__$Vec_CanisterStatusResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterStatusResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterStatusResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterStatusResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterStatusResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterStatusResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterStatusResult$as_ptr(void* vec_ptr);

typedef struct DefiniteCanisterSettings DefiniteCanisterSettings;
void __swift_bridge__$DefiniteCanisterSettings$_free(void* self);

void* __swift_bridge__$Vec_DefiniteCanisterSettings$new(void);
void __swift_bridge__$Vec_DefiniteCanisterSettings$drop(void* vec_ptr);
void __swift_bridge__$Vec_DefiniteCanisterSettings$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DefiniteCanisterSettings$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DefiniteCanisterSettings$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DefiniteCanisterSettings$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DefiniteCanisterSettings$len(void* vec_ptr);
void* __swift_bridge__$Vec_DefiniteCanisterSettings$as_ptr(void* vec_ptr);

typedef struct CanisterIdRecord CanisterIdRecord;
void __swift_bridge__$CanisterIdRecord$_free(void* self);

void* __swift_bridge__$Vec_CanisterIdRecord$new(void);
void __swift_bridge__$Vec_CanisterIdRecord$drop(void* vec_ptr);
void __swift_bridge__$Vec_CanisterIdRecord$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CanisterIdRecord$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterIdRecord$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CanisterIdRecord$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CanisterIdRecord$len(void* vec_ptr);
void* __swift_bridge__$Vec_CanisterIdRecord$as_ptr(void* vec_ptr);

typedef struct SnsRootCanister SnsRootCanister;
void __swift_bridge__$SnsRootCanister$_free(void* self);

void* __swift_bridge__$Vec_SnsRootCanister$new(void);
void __swift_bridge__$Vec_SnsRootCanister$drop(void* vec_ptr);
void __swift_bridge__$Vec_SnsRootCanister$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SnsRootCanister$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SnsRootCanister$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SnsRootCanister$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SnsRootCanister$len(void* vec_ptr);
void* __swift_bridge__$Vec_SnsRootCanister$as_ptr(void* vec_ptr);

void __swift_bridge__$Service$canister_status(void* callback_wrapper, void __swift_bridge__$Service$canister_status$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$change_canister(void* callback_wrapper, void __swift_bridge__$Service$change_canister$async(void* callback_wrapper, void* ret), void* self, void* arg0);
void __swift_bridge__$Service$get_sns_canisters_summary(void* callback_wrapper, void __swift_bridge__$Service$get_sns_canisters_summary$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_sns_canisters(void* callback_wrapper, void __swift_bridge__$Service$list_sns_canisters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$manage_dapp_canister_settings(void* callback_wrapper, void __swift_bridge__$Service$manage_dapp_canister_settings$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$register_dapp_canister(void* callback_wrapper, void __swift_bridge__$Service$register_dapp_canister$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$register_dapp_canisters(void* callback_wrapper, void __swift_bridge__$Service$register_dapp_canisters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$set_dapp_controllers(void* callback_wrapper, void __swift_bridge__$Service$set_dapp_controllers$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);


// File automatically generated by swift-bridge.
typedef struct RefreshBuyerTokensResponse RefreshBuyerTokensResponse;
void __swift_bridge__$RefreshBuyerTokensResponse$_free(void* self);

void* __swift_bridge__$Vec_RefreshBuyerTokensResponse$new(void);
void __swift_bridge__$Vec_RefreshBuyerTokensResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_RefreshBuyerTokensResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RefreshBuyerTokensResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RefreshBuyerTokensResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RefreshBuyerTokensResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RefreshBuyerTokensResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_RefreshBuyerTokensResponse$as_ptr(void* vec_ptr);

typedef struct RefreshBuyerTokensRequest RefreshBuyerTokensRequest;
void __swift_bridge__$RefreshBuyerTokensRequest$_free(void* self);

void* __swift_bridge__$Vec_RefreshBuyerTokensRequest$new(void);
void __swift_bridge__$Vec_RefreshBuyerTokensRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_RefreshBuyerTokensRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_RefreshBuyerTokensRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_RefreshBuyerTokensRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_RefreshBuyerTokensRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_RefreshBuyerTokensRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_RefreshBuyerTokensRequest$as_ptr(void* vec_ptr);

typedef struct NotifyPaymentFailureArg NotifyPaymentFailureArg;
void __swift_bridge__$NotifyPaymentFailureArg$_free(void* self);

void* __swift_bridge__$Vec_NotifyPaymentFailureArg$new(void);
void __swift_bridge__$Vec_NotifyPaymentFailureArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_NotifyPaymentFailureArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NotifyPaymentFailureArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NotifyPaymentFailureArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NotifyPaymentFailureArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NotifyPaymentFailureArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_NotifyPaymentFailureArg$as_ptr(void* vec_ptr);

typedef struct NewSaleTicketResponse NewSaleTicketResponse;
void __swift_bridge__$NewSaleTicketResponse$_free(void* self);

void* __swift_bridge__$Vec_NewSaleTicketResponse$new(void);
void __swift_bridge__$Vec_NewSaleTicketResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_NewSaleTicketResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NewSaleTicketResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NewSaleTicketResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NewSaleTicketResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NewSaleTicketResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_NewSaleTicketResponse$as_ptr(void* vec_ptr);

typedef struct SNSSwapResult2 SNSSwapResult2;
void __swift_bridge__$SNSSwapResult2$_free(void* self);

void* __swift_bridge__$Vec_SNSSwapResult2$new(void);
void __swift_bridge__$Vec_SNSSwapResult2$drop(void* vec_ptr);
void __swift_bridge__$Vec_SNSSwapResult2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SNSSwapResult2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SNSSwapResult2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SNSSwapResult2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SNSSwapResult2$len(void* vec_ptr);
void* __swift_bridge__$Vec_SNSSwapResult2$as_ptr(void* vec_ptr);

typedef struct Err2 Err2;
void __swift_bridge__$Err2$_free(void* self);

void* __swift_bridge__$Vec_Err2$new(void);
void __swift_bridge__$Vec_Err2$drop(void* vec_ptr);
void __swift_bridge__$Vec_Err2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Err2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Err2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Err2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Err2$len(void* vec_ptr);
void* __swift_bridge__$Vec_Err2$as_ptr(void* vec_ptr);

typedef struct InvalidUserAmount InvalidUserAmount;
void __swift_bridge__$InvalidUserAmount$_free(void* self);

void* __swift_bridge__$Vec_InvalidUserAmount$new(void);
void __swift_bridge__$Vec_InvalidUserAmount$drop(void* vec_ptr);
void __swift_bridge__$Vec_InvalidUserAmount$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_InvalidUserAmount$pop(void* vec_ptr);
void* __swift_bridge__$Vec_InvalidUserAmount$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_InvalidUserAmount$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_InvalidUserAmount$len(void* vec_ptr);
void* __swift_bridge__$Vec_InvalidUserAmount$as_ptr(void* vec_ptr);

typedef struct NewSaleTicketRequest NewSaleTicketRequest;
void __swift_bridge__$NewSaleTicketRequest$_free(void* self);

void* __swift_bridge__$Vec_NewSaleTicketRequest$new(void);
void __swift_bridge__$Vec_NewSaleTicketRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_NewSaleTicketRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NewSaleTicketRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NewSaleTicketRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NewSaleTicketRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NewSaleTicketRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_NewSaleTicketRequest$as_ptr(void* vec_ptr);

typedef struct ListSnsNeuronRecipesResponse ListSnsNeuronRecipesResponse;
void __swift_bridge__$ListSnsNeuronRecipesResponse$_free(void* self);

void* __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$new(void);
void __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesResponse$as_ptr(void* vec_ptr);

typedef struct ListSnsNeuronRecipesRequest ListSnsNeuronRecipesRequest;
void __swift_bridge__$ListSnsNeuronRecipesRequest$_free(void* self);

void* __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$new(void);
void __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListSnsNeuronRecipesRequest$as_ptr(void* vec_ptr);

typedef struct ListDirectParticipantsResponse ListDirectParticipantsResponse;
void __swift_bridge__$ListDirectParticipantsResponse$_free(void* self);

void* __swift_bridge__$Vec_ListDirectParticipantsResponse$new(void);
void __swift_bridge__$Vec_ListDirectParticipantsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListDirectParticipantsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListDirectParticipantsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListDirectParticipantsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListDirectParticipantsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListDirectParticipantsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListDirectParticipantsResponse$as_ptr(void* vec_ptr);

typedef struct Participant Participant;
void __swift_bridge__$Participant$_free(void* self);

void* __swift_bridge__$Vec_Participant$new(void);
void __swift_bridge__$Vec_Participant$drop(void* vec_ptr);
void __swift_bridge__$Vec_Participant$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Participant$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Participant$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Participant$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Participant$len(void* vec_ptr);
void* __swift_bridge__$Vec_Participant$as_ptr(void* vec_ptr);

typedef struct ListDirectParticipantsRequest ListDirectParticipantsRequest;
void __swift_bridge__$ListDirectParticipantsRequest$_free(void* self);

void* __swift_bridge__$Vec_ListDirectParticipantsRequest$new(void);
void __swift_bridge__$Vec_ListDirectParticipantsRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListDirectParticipantsRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListDirectParticipantsRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListDirectParticipantsRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListDirectParticipantsRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListDirectParticipantsRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListDirectParticipantsRequest$as_ptr(void* vec_ptr);

typedef struct ListCommunityFundParticipantsResponse ListCommunityFundParticipantsResponse;
void __swift_bridge__$ListCommunityFundParticipantsResponse$_free(void* self);

void* __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$new(void);
void __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsResponse$as_ptr(void* vec_ptr);

typedef struct ListCommunityFundParticipantsRequest ListCommunityFundParticipantsRequest;
void __swift_bridge__$ListCommunityFundParticipantsRequest$_free(void* self);

void* __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$new(void);
void __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_ListCommunityFundParticipantsRequest$as_ptr(void* vec_ptr);

typedef struct GetStateResponse GetStateResponse;
void __swift_bridge__$GetStateResponse$_free(void* self);

void* __swift_bridge__$Vec_GetStateResponse$new(void);
void __swift_bridge__$Vec_GetStateResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetStateResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetStateResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetStateResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetStateResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetStateResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetStateResponse$as_ptr(void* vec_ptr);

typedef struct DerivedState DerivedState;
void __swift_bridge__$DerivedState$_free(void* self);

void* __swift_bridge__$Vec_DerivedState$new(void);
void __swift_bridge__$Vec_DerivedState$drop(void* vec_ptr);
void __swift_bridge__$Vec_DerivedState$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DerivedState$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DerivedState$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DerivedState$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DerivedState$len(void* vec_ptr);
void* __swift_bridge__$Vec_DerivedState$as_ptr(void* vec_ptr);

typedef struct Swap Swap;
void __swift_bridge__$Swap$_free(void* self);

void* __swift_bridge__$Vec_Swap$new(void);
void __swift_bridge__$Vec_Swap$drop(void* vec_ptr);
void __swift_bridge__$Vec_Swap$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Swap$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Swap$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Swap$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Swap$len(void* vec_ptr);
void* __swift_bridge__$Vec_Swap$as_ptr(void* vec_ptr);

typedef struct SnsNeuronRecipe SnsNeuronRecipe;
void __swift_bridge__$SnsNeuronRecipe$_free(void* self);

void* __swift_bridge__$Vec_SnsNeuronRecipe$new(void);
void __swift_bridge__$Vec_SnsNeuronRecipe$drop(void* vec_ptr);
void __swift_bridge__$Vec_SnsNeuronRecipe$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SnsNeuronRecipe$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SnsNeuronRecipe$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SnsNeuronRecipe$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SnsNeuronRecipe$len(void* vec_ptr);
void* __swift_bridge__$Vec_SnsNeuronRecipe$as_ptr(void* vec_ptr);

typedef struct Investor Investor;
void __swift_bridge__$Investor$_free(void* self);

void* __swift_bridge__$Vec_Investor$new(void);
void __swift_bridge__$Vec_Investor$drop(void* vec_ptr);
void __swift_bridge__$Vec_Investor$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Investor$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Investor$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Investor$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Investor$len(void* vec_ptr);
void* __swift_bridge__$Vec_Investor$as_ptr(void* vec_ptr);

typedef struct DirectInvestment DirectInvestment;
void __swift_bridge__$DirectInvestment$_free(void* self);

void* __swift_bridge__$Vec_DirectInvestment$new(void);
void __swift_bridge__$Vec_DirectInvestment$drop(void* vec_ptr);
void __swift_bridge__$Vec_DirectInvestment$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_DirectInvestment$pop(void* vec_ptr);
void* __swift_bridge__$Vec_DirectInvestment$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_DirectInvestment$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_DirectInvestment$len(void* vec_ptr);
void* __swift_bridge__$Vec_DirectInvestment$as_ptr(void* vec_ptr);

typedef struct CfInvestment CfInvestment;
void __swift_bridge__$CfInvestment$_free(void* self);

void* __swift_bridge__$Vec_CfInvestment$new(void);
void __swift_bridge__$Vec_CfInvestment$drop(void* vec_ptr);
void __swift_bridge__$Vec_CfInvestment$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_CfInvestment$pop(void* vec_ptr);
void* __swift_bridge__$Vec_CfInvestment$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_CfInvestment$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_CfInvestment$len(void* vec_ptr);
void* __swift_bridge__$Vec_CfInvestment$as_ptr(void* vec_ptr);

typedef struct Principals Principals;
void __swift_bridge__$Principals$_free(void* self);

void* __swift_bridge__$Vec_Principals$new(void);
void __swift_bridge__$Vec_Principals$drop(void* vec_ptr);
void __swift_bridge__$Vec_Principals$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Principals$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Principals$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Principals$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Principals$len(void* vec_ptr);
void* __swift_bridge__$Vec_Principals$as_ptr(void* vec_ptr);

typedef struct NeuronAttributes NeuronAttributes;
void __swift_bridge__$NeuronAttributes$_free(void* self);

void* __swift_bridge__$Vec_NeuronAttributes$new(void);
void __swift_bridge__$Vec_NeuronAttributes$drop(void* vec_ptr);
void __swift_bridge__$Vec_NeuronAttributes$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_NeuronAttributes$pop(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronAttributes$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_NeuronAttributes$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_NeuronAttributes$len(void* vec_ptr);
void* __swift_bridge__$Vec_NeuronAttributes$as_ptr(void* vec_ptr);

typedef struct GetStateArg GetStateArg;
void __swift_bridge__$GetStateArg$_free(void* self);

void* __swift_bridge__$Vec_GetStateArg$new(void);
void __swift_bridge__$Vec_GetStateArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetStateArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetStateArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetStateArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetStateArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetStateArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetStateArg$as_ptr(void* vec_ptr);

typedef struct GetSaleParametersResponse GetSaleParametersResponse;
void __swift_bridge__$GetSaleParametersResponse$_free(void* self);

void* __swift_bridge__$Vec_GetSaleParametersResponse$new(void);
void __swift_bridge__$Vec_GetSaleParametersResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetSaleParametersResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetSaleParametersResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetSaleParametersResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetSaleParametersResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetSaleParametersResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetSaleParametersResponse$as_ptr(void* vec_ptr);

typedef struct Params Params;
void __swift_bridge__$Params$_free(void* self);

void* __swift_bridge__$Vec_Params$new(void);
void __swift_bridge__$Vec_Params$drop(void* vec_ptr);
void __swift_bridge__$Vec_Params$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Params$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Params$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Params$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Params$len(void* vec_ptr);
void* __swift_bridge__$Vec_Params$as_ptr(void* vec_ptr);

typedef struct GetSaleParametersArg GetSaleParametersArg;
void __swift_bridge__$GetSaleParametersArg$_free(void* self);

void* __swift_bridge__$Vec_GetSaleParametersArg$new(void);
void __swift_bridge__$Vec_GetSaleParametersArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetSaleParametersArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetSaleParametersArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetSaleParametersArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetSaleParametersArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetSaleParametersArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetSaleParametersArg$as_ptr(void* vec_ptr);

typedef struct GetOpenTicketResponse GetOpenTicketResponse;
void __swift_bridge__$GetOpenTicketResponse$_free(void* self);

void* __swift_bridge__$Vec_GetOpenTicketResponse$new(void);
void __swift_bridge__$Vec_GetOpenTicketResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetOpenTicketResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetOpenTicketResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetOpenTicketResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetOpenTicketResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetOpenTicketResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetOpenTicketResponse$as_ptr(void* vec_ptr);

typedef struct SNSSwapResult1 SNSSwapResult1;
void __swift_bridge__$SNSSwapResult1$_free(void* self);

void* __swift_bridge__$Vec_SNSSwapResult1$new(void);
void __swift_bridge__$Vec_SNSSwapResult1$drop(void* vec_ptr);
void __swift_bridge__$Vec_SNSSwapResult1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SNSSwapResult1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SNSSwapResult1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SNSSwapResult1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SNSSwapResult1$len(void* vec_ptr);
void* __swift_bridge__$Vec_SNSSwapResult1$as_ptr(void* vec_ptr);

typedef struct Err1 Err1;
void __swift_bridge__$Err1$_free(void* self);

void* __swift_bridge__$Vec_Err1$new(void);
void __swift_bridge__$Vec_Err1$drop(void* vec_ptr);
void __swift_bridge__$Vec_Err1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Err1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Err1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Err1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Err1$len(void* vec_ptr);
void* __swift_bridge__$Vec_Err1$as_ptr(void* vec_ptr);

typedef struct Ok2 Ok2;
void __swift_bridge__$Ok2$_free(void* self);

void* __swift_bridge__$Vec_Ok2$new(void);
void __swift_bridge__$Vec_Ok2$drop(void* vec_ptr);
void __swift_bridge__$Vec_Ok2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Ok2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Ok2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Ok2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Ok2$len(void* vec_ptr);
void* __swift_bridge__$Vec_Ok2$as_ptr(void* vec_ptr);

typedef struct Ticket Ticket;
void __swift_bridge__$Ticket$_free(void* self);

void* __swift_bridge__$Vec_Ticket$new(void);
void __swift_bridge__$Vec_Ticket$drop(void* vec_ptr);
void __swift_bridge__$Vec_Ticket$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Ticket$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Ticket$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Ticket$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Ticket$len(void* vec_ptr);
void* __swift_bridge__$Vec_Ticket$as_ptr(void* vec_ptr);

typedef struct Icrc1Account Icrc1Account;
void __swift_bridge__$Icrc1Account$_free(void* self);

void* __swift_bridge__$Vec_Icrc1Account$new(void);
void __swift_bridge__$Vec_Icrc1Account$drop(void* vec_ptr);
void __swift_bridge__$Vec_Icrc1Account$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Icrc1Account$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc1Account$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Icrc1Account$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Icrc1Account$len(void* vec_ptr);
void* __swift_bridge__$Vec_Icrc1Account$as_ptr(void* vec_ptr);

typedef struct GetOpenTicketArg GetOpenTicketArg;
void __swift_bridge__$GetOpenTicketArg$_free(void* self);

void* __swift_bridge__$Vec_GetOpenTicketArg$new(void);
void __swift_bridge__$Vec_GetOpenTicketArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetOpenTicketArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetOpenTicketArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetOpenTicketArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetOpenTicketArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetOpenTicketArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetOpenTicketArg$as_ptr(void* vec_ptr);

typedef struct GetLifecycleResponse GetLifecycleResponse;
void __swift_bridge__$GetLifecycleResponse$_free(void* self);

void* __swift_bridge__$Vec_GetLifecycleResponse$new(void);
void __swift_bridge__$Vec_GetLifecycleResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetLifecycleResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetLifecycleResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetLifecycleResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetLifecycleResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetLifecycleResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetLifecycleResponse$as_ptr(void* vec_ptr);

typedef struct GetLifecycleArg GetLifecycleArg;
void __swift_bridge__$GetLifecycleArg$_free(void* self);

void* __swift_bridge__$Vec_GetLifecycleArg$new(void);
void __swift_bridge__$Vec_GetLifecycleArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetLifecycleArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetLifecycleArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetLifecycleArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetLifecycleArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetLifecycleArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetLifecycleArg$as_ptr(void* vec_ptr);

typedef struct GetInitResponse GetInitResponse;
void __swift_bridge__$GetInitResponse$_free(void* self);

void* __swift_bridge__$Vec_GetInitResponse$new(void);
void __swift_bridge__$Vec_GetInitResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetInitResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetInitResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetInitResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetInitResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetInitResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetInitResponse$as_ptr(void* vec_ptr);

typedef struct GetInitArg GetInitArg;
void __swift_bridge__$GetInitArg$_free(void* self);

void* __swift_bridge__$Vec_GetInitArg$new(void);
void __swift_bridge__$Vec_GetInitArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetInitArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetInitArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetInitArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetInitArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetInitArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetInitArg$as_ptr(void* vec_ptr);

typedef struct GetDerivedStateResponse GetDerivedStateResponse;
void __swift_bridge__$GetDerivedStateResponse$_free(void* self);

void* __swift_bridge__$Vec_GetDerivedStateResponse$new(void);
void __swift_bridge__$Vec_GetDerivedStateResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetDerivedStateResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetDerivedStateResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetDerivedStateResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetDerivedStateResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetDerivedStateResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetDerivedStateResponse$as_ptr(void* vec_ptr);

typedef struct GetDerivedStateArg GetDerivedStateArg;
void __swift_bridge__$GetDerivedStateArg$_free(void* self);

void* __swift_bridge__$Vec_GetDerivedStateArg$new(void);
void __swift_bridge__$Vec_GetDerivedStateArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetDerivedStateArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetDerivedStateArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetDerivedStateArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetDerivedStateArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetDerivedStateArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetDerivedStateArg$as_ptr(void* vec_ptr);

typedef struct GetCanisterStatusArg GetCanisterStatusArg;
void __swift_bridge__$GetCanisterStatusArg$_free(void* self);

void* __swift_bridge__$Vec_GetCanisterStatusArg$new(void);
void __swift_bridge__$Vec_GetCanisterStatusArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetCanisterStatusArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetCanisterStatusArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetCanisterStatusArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetCanisterStatusArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetCanisterStatusArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetCanisterStatusArg$as_ptr(void* vec_ptr);

typedef struct GetBuyersTotalResponse GetBuyersTotalResponse;
void __swift_bridge__$GetBuyersTotalResponse$_free(void* self);

void* __swift_bridge__$Vec_GetBuyersTotalResponse$new(void);
void __swift_bridge__$Vec_GetBuyersTotalResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBuyersTotalResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBuyersTotalResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyersTotalResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBuyersTotalResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBuyersTotalResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyersTotalResponse$as_ptr(void* vec_ptr);

typedef struct GetBuyersTotalArg GetBuyersTotalArg;
void __swift_bridge__$GetBuyersTotalArg$_free(void* self);

void* __swift_bridge__$Vec_GetBuyersTotalArg$new(void);
void __swift_bridge__$Vec_GetBuyersTotalArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBuyersTotalArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBuyersTotalArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyersTotalArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBuyersTotalArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBuyersTotalArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyersTotalArg$as_ptr(void* vec_ptr);

typedef struct GetBuyerStateResponse GetBuyerStateResponse;
void __swift_bridge__$GetBuyerStateResponse$_free(void* self);

void* __swift_bridge__$Vec_GetBuyerStateResponse$new(void);
void __swift_bridge__$Vec_GetBuyerStateResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBuyerStateResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBuyerStateResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyerStateResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBuyerStateResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBuyerStateResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyerStateResponse$as_ptr(void* vec_ptr);

typedef struct BuyerState BuyerState;
void __swift_bridge__$BuyerState$_free(void* self);

void* __swift_bridge__$Vec_BuyerState$new(void);
void __swift_bridge__$Vec_BuyerState$drop(void* vec_ptr);
void __swift_bridge__$Vec_BuyerState$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_BuyerState$pop(void* vec_ptr);
void* __swift_bridge__$Vec_BuyerState$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_BuyerState$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_BuyerState$len(void* vec_ptr);
void* __swift_bridge__$Vec_BuyerState$as_ptr(void* vec_ptr);

typedef struct TransferableAmount TransferableAmount;
void __swift_bridge__$TransferableAmount$_free(void* self);

void* __swift_bridge__$Vec_TransferableAmount$new(void);
void __swift_bridge__$Vec_TransferableAmount$drop(void* vec_ptr);
void __swift_bridge__$Vec_TransferableAmount$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TransferableAmount$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TransferableAmount$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TransferableAmount$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TransferableAmount$len(void* vec_ptr);
void* __swift_bridge__$Vec_TransferableAmount$as_ptr(void* vec_ptr);

typedef struct GetBuyerStateRequest GetBuyerStateRequest;
void __swift_bridge__$GetBuyerStateRequest$_free(void* self);

void* __swift_bridge__$Vec_GetBuyerStateRequest$new(void);
void __swift_bridge__$Vec_GetBuyerStateRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetBuyerStateRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetBuyerStateRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyerStateRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetBuyerStateRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetBuyerStateRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetBuyerStateRequest$as_ptr(void* vec_ptr);

typedef struct GetAutoFinalizationStatusResponse GetAutoFinalizationStatusResponse;
void __swift_bridge__$GetAutoFinalizationStatusResponse$_free(void* self);

void* __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$new(void);
void __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusResponse$as_ptr(void* vec_ptr);

typedef struct GetAutoFinalizationStatusArg GetAutoFinalizationStatusArg;
void __swift_bridge__$GetAutoFinalizationStatusArg$_free(void* self);

void* __swift_bridge__$Vec_GetAutoFinalizationStatusArg$new(void);
void __swift_bridge__$Vec_GetAutoFinalizationStatusArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_GetAutoFinalizationStatusArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_GetAutoFinalizationStatusArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_GetAutoFinalizationStatusArg$as_ptr(void* vec_ptr);

typedef struct FinalizeSwapResponse FinalizeSwapResponse;
void __swift_bridge__$FinalizeSwapResponse$_free(void* self);

void* __swift_bridge__$Vec_FinalizeSwapResponse$new(void);
void __swift_bridge__$Vec_FinalizeSwapResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_FinalizeSwapResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FinalizeSwapResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FinalizeSwapResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FinalizeSwapResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FinalizeSwapResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_FinalizeSwapResponse$as_ptr(void* vec_ptr);

typedef struct SetModeCallResult SetModeCallResult;
void __swift_bridge__$SetModeCallResult$_free(void* self);

void* __swift_bridge__$Vec_SetModeCallResult$new(void);
void __swift_bridge__$Vec_SetModeCallResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_SetModeCallResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SetModeCallResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SetModeCallResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SetModeCallResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SetModeCallResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_SetModeCallResult$as_ptr(void* vec_ptr);

typedef struct Possibility3 Possibility3;
void __swift_bridge__$Possibility3$_free(void* self);

void* __swift_bridge__$Vec_Possibility3$new(void);
void __swift_bridge__$Vec_Possibility3$drop(void* vec_ptr);
void __swift_bridge__$Vec_Possibility3$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Possibility3$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility3$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Possibility3$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Possibility3$len(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility3$as_ptr(void* vec_ptr);

typedef struct SettleNeuronsFundParticipationResult SettleNeuronsFundParticipationResult;
void __swift_bridge__$SettleNeuronsFundParticipationResult$_free(void* self);

void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$new(void);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_SettleNeuronsFundParticipationResult$as_ptr(void* vec_ptr);

typedef struct Possibility2 Possibility2;
void __swift_bridge__$Possibility2$_free(void* self);

void* __swift_bridge__$Vec_Possibility2$new(void);
void __swift_bridge__$Vec_Possibility2$drop(void* vec_ptr);
void __swift_bridge__$Vec_Possibility2$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Possibility2$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility2$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Possibility2$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Possibility2$len(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility2$as_ptr(void* vec_ptr);

typedef struct SettleCommunityFundParticipationResult SettleCommunityFundParticipationResult;
void __swift_bridge__$SettleCommunityFundParticipationResult$_free(void* self);

void* __swift_bridge__$Vec_SettleCommunityFundParticipationResult$new(void);
void __swift_bridge__$Vec_SettleCommunityFundParticipationResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_SettleCommunityFundParticipationResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SettleCommunityFundParticipationResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SettleCommunityFundParticipationResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SettleCommunityFundParticipationResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SettleCommunityFundParticipationResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_SettleCommunityFundParticipationResult$as_ptr(void* vec_ptr);

typedef struct Possibility1 Possibility1;
void __swift_bridge__$Possibility1$_free(void* self);

void* __swift_bridge__$Vec_Possibility1$new(void);
void __swift_bridge__$Vec_Possibility1$drop(void* vec_ptr);
void __swift_bridge__$Vec_Possibility1$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Possibility1$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility1$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Possibility1$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Possibility1$len(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility1$as_ptr(void* vec_ptr);

typedef struct Response Response;
void __swift_bridge__$Response$_free(void* self);

void* __swift_bridge__$Vec_Response$new(void);
void __swift_bridge__$Vec_Response$drop(void* vec_ptr);
void __swift_bridge__$Vec_Response$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Response$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Response$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Response$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Response$len(void* vec_ptr);
void* __swift_bridge__$Vec_Response$as_ptr(void* vec_ptr);

typedef struct SweepResult SweepResult;
void __swift_bridge__$SweepResult$_free(void* self);

void* __swift_bridge__$Vec_SweepResult$new(void);
void __swift_bridge__$Vec_SweepResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_SweepResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SweepResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SweepResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SweepResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SweepResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_SweepResult$as_ptr(void* vec_ptr);

typedef struct SetDappControllersCallResult SetDappControllersCallResult;
void __swift_bridge__$SetDappControllersCallResult$_free(void* self);

void* __swift_bridge__$Vec_SetDappControllersCallResult$new(void);
void __swift_bridge__$Vec_SetDappControllersCallResult$drop(void* vec_ptr);
void __swift_bridge__$Vec_SetDappControllersCallResult$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_SetDappControllersCallResult$pop(void* vec_ptr);
void* __swift_bridge__$Vec_SetDappControllersCallResult$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_SetDappControllersCallResult$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_SetDappControllersCallResult$len(void* vec_ptr);
void* __swift_bridge__$Vec_SetDappControllersCallResult$as_ptr(void* vec_ptr);

typedef struct Possibility Possibility;
void __swift_bridge__$Possibility$_free(void* self);

void* __swift_bridge__$Vec_Possibility$new(void);
void __swift_bridge__$Vec_Possibility$drop(void* vec_ptr);
void __swift_bridge__$Vec_Possibility$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Possibility$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Possibility$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Possibility$len(void* vec_ptr);
void* __swift_bridge__$Vec_Possibility$as_ptr(void* vec_ptr);

typedef struct FinalizeSwapArg FinalizeSwapArg;
void __swift_bridge__$FinalizeSwapArg$_free(void* self);

void* __swift_bridge__$Vec_FinalizeSwapArg$new(void);
void __swift_bridge__$Vec_FinalizeSwapArg$drop(void* vec_ptr);
void __swift_bridge__$Vec_FinalizeSwapArg$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_FinalizeSwapArg$pop(void* vec_ptr);
void* __swift_bridge__$Vec_FinalizeSwapArg$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_FinalizeSwapArg$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_FinalizeSwapArg$len(void* vec_ptr);
void* __swift_bridge__$Vec_FinalizeSwapArg$as_ptr(void* vec_ptr);

typedef struct ErrorRefundIcpResponse ErrorRefundIcpResponse;
void __swift_bridge__$ErrorRefundIcpResponse$_free(void* self);

void* __swift_bridge__$Vec_ErrorRefundIcpResponse$new(void);
void __swift_bridge__$Vec_ErrorRefundIcpResponse$drop(void* vec_ptr);
void __swift_bridge__$Vec_ErrorRefundIcpResponse$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ErrorRefundIcpResponse$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ErrorRefundIcpResponse$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ErrorRefundIcpResponse$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ErrorRefundIcpResponse$len(void* vec_ptr);
void* __swift_bridge__$Vec_ErrorRefundIcpResponse$as_ptr(void* vec_ptr);

typedef struct ErrorRefundIcpRequest ErrorRefundIcpRequest;
void __swift_bridge__$ErrorRefundIcpRequest$_free(void* self);

void* __swift_bridge__$Vec_ErrorRefundIcpRequest$new(void);
void __swift_bridge__$Vec_ErrorRefundIcpRequest$drop(void* vec_ptr);
void __swift_bridge__$Vec_ErrorRefundIcpRequest$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ErrorRefundIcpRequest$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ErrorRefundIcpRequest$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ErrorRefundIcpRequest$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ErrorRefundIcpRequest$len(void* vec_ptr);
void* __swift_bridge__$Vec_ErrorRefundIcpRequest$as_ptr(void* vec_ptr);

void __swift_bridge__$Service$error_refund_icp(void* callback_wrapper, void __swift_bridge__$Service$error_refund_icp$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$finalize_swap(void* callback_wrapper, void __swift_bridge__$Service$finalize_swap$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_auto_finalization_status(void* callback_wrapper, void __swift_bridge__$Service$get_auto_finalization_status$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_buyer_state(void* callback_wrapper, void __swift_bridge__$Service$get_buyer_state$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_buyers_total(void* callback_wrapper, void __swift_bridge__$Service$get_buyers_total$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_canister_status(void* callback_wrapper, void __swift_bridge__$Service$get_canister_status$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_derived_state(void* callback_wrapper, void __swift_bridge__$Service$get_derived_state$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_init(void* callback_wrapper, void __swift_bridge__$Service$get_init$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_lifecycle(void* callback_wrapper, void __swift_bridge__$Service$get_lifecycle$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_open_ticket(void* callback_wrapper, void __swift_bridge__$Service$get_open_ticket$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_sale_parameters(void* callback_wrapper, void __swift_bridge__$Service$get_sale_parameters$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$get_state(void* callback_wrapper, void __swift_bridge__$Service$get_state$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_community_fund_participants(void* callback_wrapper, void __swift_bridge__$Service$list_community_fund_participants$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_direct_participants(void* callback_wrapper, void __swift_bridge__$Service$list_direct_participants$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$list_sns_neuron_recipes(void* callback_wrapper, void __swift_bridge__$Service$list_sns_neuron_recipes$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$new_sale_ticket(void* callback_wrapper, void __swift_bridge__$Service$new_sale_ticket$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$notify_payment_failure(void* callback_wrapper, void __swift_bridge__$Service$notify_payment_failure$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);
void __swift_bridge__$Service$refresh_buyer_tokens(void* callback_wrapper, void __swift_bridge__$Service$refresh_buyer_tokens$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* arg0);


