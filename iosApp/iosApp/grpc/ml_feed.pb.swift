// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ml_feed.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MlFeed_PostItem: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: UInt32 = 0

  var canisterID: String = String()

  var videoID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MlFeed_PostItemResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: UInt32 = 0

  var canisterID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MlFeed_PostItemResponseV1: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: UInt32 = 0

  var canisterID: String = String()

  var score: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MlFeed_FeedRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var canisterID: String = String()

  var filterPosts: [MlFeed_PostItem] = []

  var numResults: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MlFeed_FeedResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feed: [MlFeed_PostItemResponse] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MlFeed_FeedResponseV1: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feed: [MlFeed_PostItemResponseV1] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ml_feed"

extension MlFeed_PostItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .standard(proto: "canister_id"),
    3: .standard(proto: "video_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.canisterID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.videoID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.postID != 0 {
      try visitor.visitSingularUInt32Field(value: self.postID, fieldNumber: 1)
    }
    if !self.canisterID.isEmpty {
      try visitor.visitSingularStringField(value: self.canisterID, fieldNumber: 2)
    }
    if !self.videoID.isEmpty {
      try visitor.visitSingularStringField(value: self.videoID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MlFeed_PostItem, rhs: MlFeed_PostItem) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.canisterID != rhs.canisterID {return false}
    if lhs.videoID != rhs.videoID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MlFeed_PostItemResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostItemResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .standard(proto: "canister_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.canisterID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.postID != 0 {
      try visitor.visitSingularUInt32Field(value: self.postID, fieldNumber: 1)
    }
    if !self.canisterID.isEmpty {
      try visitor.visitSingularStringField(value: self.canisterID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MlFeed_PostItemResponse, rhs: MlFeed_PostItemResponse) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.canisterID != rhs.canisterID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MlFeed_PostItemResponseV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostItemResponseV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .standard(proto: "canister_id"),
    3: .same(proto: "score"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.canisterID) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.score) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.postID != 0 {
      try visitor.visitSingularUInt32Field(value: self.postID, fieldNumber: 1)
    }
    if !self.canisterID.isEmpty {
      try visitor.visitSingularStringField(value: self.canisterID, fieldNumber: 2)
    }
    if self.score.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.score, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MlFeed_PostItemResponseV1, rhs: MlFeed_PostItemResponseV1) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.canisterID != rhs.canisterID {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MlFeed_FeedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "canister_id"),
    2: .standard(proto: "filter_posts"),
    3: .standard(proto: "num_results"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.canisterID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.filterPosts) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.numResults) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.canisterID.isEmpty {
      try visitor.visitSingularStringField(value: self.canisterID, fieldNumber: 1)
    }
    if !self.filterPosts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.filterPosts, fieldNumber: 2)
    }
    if self.numResults != 0 {
      try visitor.visitSingularUInt32Field(value: self.numResults, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MlFeed_FeedRequest, rhs: MlFeed_FeedRequest) -> Bool {
    if lhs.canisterID != rhs.canisterID {return false}
    if lhs.filterPosts != rhs.filterPosts {return false}
    if lhs.numResults != rhs.numResults {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MlFeed_FeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.feed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feed, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MlFeed_FeedResponse, rhs: MlFeed_FeedResponse) -> Bool {
    if lhs.feed != rhs.feed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MlFeed_FeedResponseV1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedResponseV1"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.feed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feed, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MlFeed_FeedResponseV1, rhs: MlFeed_FeedResponseV1) -> Bool {
    if lhs.feed != rhs.feed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
// swiftlint:enable all
