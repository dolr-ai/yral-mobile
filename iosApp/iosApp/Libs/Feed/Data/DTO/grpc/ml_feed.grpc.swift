//
// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the protocol buffer compiler.
// Source: ml_feed.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `MlFeed_MLFeedClient`, then call methods of this protocol to make API calls.
internal protocol MlFeed_MLFeedClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol? { get }

  func get_feed(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>

  func get_feed_v1(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponseV1>

  func get_feed_clean(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>

  func get_feed_nsfw(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>

  func get_feed_coldstart(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>
}

extension MlFeed_MLFeedClientProtocol {
  internal var serviceName: String {
    return "ml_feed.MLFeed"
  }

  /// Unary call to get_feed
  ///
  /// - Parameters:
  ///   - request: Request to send to get_feed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_feed(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feedInterceptors() ?? []
    )
  }

  /// Unary call to get_feed_v1
  ///
  /// - Parameters:
  ///   - request: Request to send to get_feed_v1.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_feed_v1(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponseV1> {
    return self.makeUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_v1.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_v1Interceptors() ?? []
    )
  }

  /// Unary call to get_feed_clean
  ///
  /// - Parameters:
  ///   - request: Request to send to get_feed_clean.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_feed_clean(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_clean.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_cleanInterceptors() ?? []
    )
  }

  /// Unary call to get_feed_nsfw
  ///
  /// - Parameters:
  ///   - request: Request to send to get_feed_nsfw.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_feed_nsfw(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_nsfw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_nsfwInterceptors() ?? []
    )
  }

  /// Unary call to get_feed_coldstart
  ///
  /// - Parameters:
  ///   - request: Request to send to get_feed_coldstart.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get_feed_coldstart(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_coldstart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_coldstartInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension MlFeed_MLFeedClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "MlFeed_MLFeedNIOClient")
internal final class MlFeed_MLFeedClient: MlFeed_MLFeedClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ml_feed.MLFeed service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct MlFeed_MLFeedNIOClient: MlFeed_MLFeedClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol?

  /// Creates a client for the ml_feed.MLFeed service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol MlFeed_MLFeedAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol? { get }

  func makeGetFeedCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>

  func makeGetFeedV1Call(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponseV1>

  func makeGetFeedCleanCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>

  func makeGetFeedNsfwCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>

  func makeGetFeedColdstartCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension MlFeed_MLFeedAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return MlFeed_MLFeedClientMetadata.serviceDescriptor
  }

  internal var interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetFeedCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feedInterceptors() ?? []
    )
  }

  internal func makeGetFeedV1Call(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponseV1> {
    return self.makeAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_v1.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_v1Interceptors() ?? []
    )
  }

  internal func makeGetFeedCleanCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_clean.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_cleanInterceptors() ?? []
    )
  }

  internal func makeGetFeedNsfwCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_nsfw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_nsfwInterceptors() ?? []
    )
  }

  internal func makeGetFeedColdstartCall(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<MlFeed_FeedRequest, MlFeed_FeedResponse> {
    return self.makeAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_coldstart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_coldstartInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension MlFeed_MLFeedAsyncClientProtocol {
  internal func get_feed(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MlFeed_FeedResponse {
    return try await self.performAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feedInterceptors() ?? []
    )
  }

  internal func get_feed_v1(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MlFeed_FeedResponseV1 {
    return try await self.performAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_v1.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_v1Interceptors() ?? []
    )
  }

  internal func get_feed_clean(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MlFeed_FeedResponse {
    return try await self.performAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_clean.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_cleanInterceptors() ?? []
    )
  }

  internal func get_feed_nsfw(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MlFeed_FeedResponse {
    return try await self.performAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_nsfw.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_nsfwInterceptors() ?? []
    )
  }

  internal func get_feed_coldstart(
    _ request: MlFeed_FeedRequest,
    callOptions: CallOptions? = nil
  ) async throws -> MlFeed_FeedResponse {
    return try await self.performAsyncUnaryCall(
      path: MlFeed_MLFeedClientMetadata.Methods.get_feed_coldstart.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeget_feed_coldstartInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct MlFeed_MLFeedAsyncClient: MlFeed_MLFeedAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MlFeed_MLFeedClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol MlFeed_MLFeedClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'get_feed'.
  func makeget_feedInterceptors() -> [ClientInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]

  /// - Returns: Interceptors to use when invoking 'get_feed_v1'.
  func makeget_feed_v1Interceptors() -> [ClientInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponseV1>]

  /// - Returns: Interceptors to use when invoking 'get_feed_clean'.
  func makeget_feed_cleanInterceptors() -> [ClientInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]

  /// - Returns: Interceptors to use when invoking 'get_feed_nsfw'.
  func makeget_feed_nsfwInterceptors() -> [ClientInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]

  /// - Returns: Interceptors to use when invoking 'get_feed_coldstart'.
  func makeget_feed_coldstartInterceptors() -> [ClientInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]
}

internal enum MlFeed_MLFeedClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MLFeed",
    fullName: "ml_feed.MLFeed",
    methods: [
      MlFeed_MLFeedClientMetadata.Methods.get_feed,
      MlFeed_MLFeedClientMetadata.Methods.get_feed_v1,
      MlFeed_MLFeedClientMetadata.Methods.get_feed_clean,
      MlFeed_MLFeedClientMetadata.Methods.get_feed_nsfw,
      MlFeed_MLFeedClientMetadata.Methods.get_feed_coldstart,
    ]
  )

  internal enum Methods {
    internal static let get_feed = GRPCMethodDescriptor(
      name: "get_feed",
      path: "/ml_feed.MLFeed/get_feed",
      type: GRPCCallType.unary
    )

    internal static let get_feed_v1 = GRPCMethodDescriptor(
      name: "get_feed_v1",
      path: "/ml_feed.MLFeed/get_feed_v1",
      type: GRPCCallType.unary
    )

    internal static let get_feed_clean = GRPCMethodDescriptor(
      name: "get_feed_clean",
      path: "/ml_feed.MLFeed/get_feed_clean",
      type: GRPCCallType.unary
    )

    internal static let get_feed_nsfw = GRPCMethodDescriptor(
      name: "get_feed_nsfw",
      path: "/ml_feed.MLFeed/get_feed_nsfw",
      type: GRPCCallType.unary
    )

    internal static let get_feed_coldstart = GRPCMethodDescriptor(
      name: "get_feed_coldstart",
      path: "/ml_feed.MLFeed/get_feed_coldstart",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol MlFeed_MLFeedProvider: CallHandlerProvider {
  var interceptors: MlFeed_MLFeedServerInterceptorFactoryProtocol? { get }

  func get_feed(request: MlFeed_FeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MlFeed_FeedResponse>

  func get_feed_v1(request: MlFeed_FeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MlFeed_FeedResponseV1>

  func get_feed_clean(request: MlFeed_FeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MlFeed_FeedResponse>

  func get_feed_nsfw(request: MlFeed_FeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MlFeed_FeedResponse>

  func get_feed_coldstart(request: MlFeed_FeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<MlFeed_FeedResponse>
}

extension MlFeed_MLFeedProvider {
  internal var serviceName: Substring {
    return MlFeed_MLFeedServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "get_feed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feedInterceptors() ?? [],
        userFunction: self.get_feed(request:context:)
      )

    case "get_feed_v1":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponseV1>(),
        interceptors: self.interceptors?.makeget_feed_v1Interceptors() ?? [],
        userFunction: self.get_feed_v1(request:context:)
      )

    case "get_feed_clean":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feed_cleanInterceptors() ?? [],
        userFunction: self.get_feed_clean(request:context:)
      )

    case "get_feed_nsfw":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feed_nsfwInterceptors() ?? [],
        userFunction: self.get_feed_nsfw(request:context:)
      )

    case "get_feed_coldstart":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feed_coldstartInterceptors() ?? [],
        userFunction: self.get_feed_coldstart(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol MlFeed_MLFeedAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: MlFeed_MLFeedServerInterceptorFactoryProtocol? { get }

  func get_feed(
    request: MlFeed_FeedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MlFeed_FeedResponse

  func get_feed_v1(
    request: MlFeed_FeedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MlFeed_FeedResponseV1

  func get_feed_clean(
    request: MlFeed_FeedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MlFeed_FeedResponse

  func get_feed_nsfw(
    request: MlFeed_FeedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MlFeed_FeedResponse

  func get_feed_coldstart(
    request: MlFeed_FeedRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> MlFeed_FeedResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension MlFeed_MLFeedAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return MlFeed_MLFeedServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return MlFeed_MLFeedServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: MlFeed_MLFeedServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "get_feed":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feedInterceptors() ?? [],
        wrapping: { try await self.get_feed(request: $0, context: $1) }
      )

    case "get_feed_v1":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponseV1>(),
        interceptors: self.interceptors?.makeget_feed_v1Interceptors() ?? [],
        wrapping: { try await self.get_feed_v1(request: $0, context: $1) }
      )

    case "get_feed_clean":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feed_cleanInterceptors() ?? [],
        wrapping: { try await self.get_feed_clean(request: $0, context: $1) }
      )

    case "get_feed_nsfw":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feed_nsfwInterceptors() ?? [],
        wrapping: { try await self.get_feed_nsfw(request: $0, context: $1) }
      )

    case "get_feed_coldstart":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<MlFeed_FeedRequest>(),
        responseSerializer: ProtobufSerializer<MlFeed_FeedResponse>(),
        interceptors: self.interceptors?.makeget_feed_coldstartInterceptors() ?? [],
        wrapping: { try await self.get_feed_coldstart(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol MlFeed_MLFeedServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'get_feed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_feedInterceptors() -> [ServerInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]

  /// - Returns: Interceptors to use when handling 'get_feed_v1'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_feed_v1Interceptors() -> [ServerInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponseV1>]

  /// - Returns: Interceptors to use when handling 'get_feed_clean'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_feed_cleanInterceptors() -> [ServerInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]

  /// - Returns: Interceptors to use when handling 'get_feed_nsfw'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_feed_nsfwInterceptors() -> [ServerInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]

  /// - Returns: Interceptors to use when handling 'get_feed_coldstart'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeget_feed_coldstartInterceptors() -> [ServerInterceptor<MlFeed_FeedRequest, MlFeed_FeedResponse>]
}

internal enum MlFeed_MLFeedServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MLFeed",
    fullName: "ml_feed.MLFeed",
    methods: [
      MlFeed_MLFeedServerMetadata.Methods.get_feed,
      MlFeed_MLFeedServerMetadata.Methods.get_feed_v1,
      MlFeed_MLFeedServerMetadata.Methods.get_feed_clean,
      MlFeed_MLFeedServerMetadata.Methods.get_feed_nsfw,
      MlFeed_MLFeedServerMetadata.Methods.get_feed_coldstart,
    ]
  )

  internal enum Methods {
    internal static let get_feed = GRPCMethodDescriptor(
      name: "get_feed",
      path: "/ml_feed.MLFeed/get_feed",
      type: GRPCCallType.unary
    )

    internal static let get_feed_v1 = GRPCMethodDescriptor(
      name: "get_feed_v1",
      path: "/ml_feed.MLFeed/get_feed_v1",
      type: GRPCCallType.unary
    )

    internal static let get_feed_clean = GRPCMethodDescriptor(
      name: "get_feed_clean",
      path: "/ml_feed.MLFeed/get_feed_clean",
      type: GRPCCallType.unary
    )

    internal static let get_feed_nsfw = GRPCMethodDescriptor(
      name: "get_feed_nsfw",
      path: "/ml_feed.MLFeed/get_feed_nsfw",
      type: GRPCCallType.unary
    )

    internal static let get_feed_coldstart = GRPCMethodDescriptor(
      name: "get_feed_coldstart",
      path: "/ml_feed.MLFeed/get_feed_coldstart",
      type: GRPCCallType.unary
    )
  }
}
// swiftlint:enable all
