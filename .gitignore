# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# General ignore patterns
*.iml
.gradle
.idea
.DS_Store
build
captures
.externalNativeBuild
.cxx
local.properties


# If using Rustup:
# Directory for toolchains installed by rustup
/toolchain

# These are backup files generated by rustc
*.rs.bk

# Ignore Cargo.lock for libraries
# Cargo.lock should be included in binaries for reproducible builds
# More info: https://doc.rust-lang.org/cargo/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries
Cargo.lock

# Output of `cargo doc`, created by running `cargo doc`
/doc/

# Optional: if you have a custom build directory
# (This is not created by default)
/build/

# Executable and generated binary files
*.exe
*.out
*.app
*.dylib
*.so
*.dll
*.lib

# IDE specific files
/.vscode/
/*.sublime-workspace

# Ignore macOS specific files
.AppleDouble
.LSOverride

# Thumbnails
._*

# Files that might appear when mounting external volumes
.Spotlight-V100
.Trashes

# Rust analyzer and other tools
/rust-agent/target/
rust-analyzer.json
